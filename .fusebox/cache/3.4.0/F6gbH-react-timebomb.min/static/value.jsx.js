module.exports = { contents: "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c, _d, _e, _f, _g, _h;\n\"use strict\";\nconst lodash_decorators_1 = require(\"lodash-decorators\");\nconst React = require(\"react\");\nconst styled_components_1 = require(\"styled-components\");\nconst utils_1 = require(\"./utils\");\nconst Flex = styled_components_1.default.div `\n    display: flex;\n    align-items: center;\n`;\nconst Container = styled_components_1.default(Flex) `\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n`;\nconst Input = styled_components_1.default.span `\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\nconst Button = styled_components_1.default.button `\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\nconst ClearButton = styled_components_1.default(Button) `\n    font-size: 18px;\n`;\nconst Placeholder = styled_components_1.default.span `\n    color: #aaa;\n    user-select: none;\n`;\nconst Icon = styled_components_1.default.span `\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: 'ðŸ“…';\n    }\n`;\nconst WHITELIST_KEYS = [utils_1.keys.BACKSPACE, utils_1.keys.DELETE, utils_1.keys.TAB];\nclass Value extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.searchInputs = [];\n    }\n    get formatGroups() {\n        return this.props.format.split('').reduce((memo, char) => {\n            const prevChar = memo[memo.length - 1];\n            if (prevChar && char === prevChar.substr(0, 1)) {\n                memo[memo.length - 1] += char;\n            }\n            else {\n                memo = [...memo, char];\n            }\n            return memo;\n        }, []);\n    }\n    get focused() {\n        return document.querySelector(':focus');\n    }\n    componentDidUpdate(prevProps) {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n        if (!hasFocus) {\n            if (prevProps.value !== value && value) {\n                const parts = utils_1.splitDate(value, format);\n                const input = this.searchInputs[0];\n                this.searchInputs.forEach((input, i) => (input.innerText = parts[i]));\n                if (input) {\n                    input.focus();\n                }\n            }\n            if ((open && !prevProps.open) || value !== prevProps.value) {\n                const input = this.searchInputs[0];\n                if (input) {\n                    if (input.innerText === '') {\n                        input.focus();\n                    }\n                    else {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n        if (!open && value) {\n            const parts = utils_1.splitDate(value, format);\n            this.searchInputs.forEach((input, i) => (input.innerText = parts[i]));\n        }\n    }\n    render() {\n        const { placeholder, value, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n        return (React.createElement(Container, { \"data-role\": \"value\", className: \"react-slct-value react-timebomb-value\", onClick: this.onToggle },\n            React.createElement(Flex, null,\n                React.createElement(Icon, { className: \"react-timebomb-icon\" }),\n                React.createElement(Flex, null,\n                    this.renderValue(),\n                    showPlaceholder && (React.createElement(Placeholder, { className: \"react-timebomb-placeholder\" }, placeholder)))),\n            React.createElement(Flex, null,\n                value && (React.createElement(ClearButton, { className: \"react-timebomb-clearer\", tabIndex: -1, onClick: this.onClear }, \"\\u00D7\")),\n                React.createElement(Button, { tabIndex: -1, className: \"react-timebomb-arrow\" }, open ? 'â–²' : 'â–¼'))));\n    }\n    renderValue() {\n        const { open, value } = this.props;\n        if (!open && !value) {\n            return null;\n        }\n        const { formatGroups } = this;\n        return (React.createElement(Flex, null, formatGroups.map((group, i) => {\n            if (group === '.' || group === ':' || group === ' ') {\n                return null;\n            }\n            else {\n                const separator = formatGroups[i + 1];\n                return (React.createElement(Input, { contentEditable: true, \"data-placeholder\": group, \"data-separator\": separator, key: group, \"data-group\": group, innerRef: this.onSearchRef, onKeyDown: this.onKeyDown, onKeyUp: this.onKeyUp, onFocus: this.onFocus, onClick: this.onFocus, onChange: this.onChange }));\n            }\n        })));\n    }\n    selectText(el) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n            range.selectNodeContents(el);\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n    onSearchRef(el) {\n        if (el) {\n            this.searchInputs.push(el);\n        }\n        else {\n            this.searchInputs = [];\n        }\n    }\n    onKeyDown(e) {\n        const { onChangeValueText, format, value, allowValidation } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        const numericValue = parseInt(innerText, 10);\n        switch (e.keyCode) {\n            case utils_1.keys.ENTER:\n            case utils_1.keys.ESC:\n                e.preventDefault();\n                return;\n            case utils_1.keys.ARROW_RIGHT:\n                e.preventDefault();\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                }\n                else {\n                    this.selectText(input);\n                }\n                return;\n            case utils_1.keys.ARROW_LEFT:\n                e.preventDefault();\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                }\n                else {\n                    this.selectText(input);\n                }\n                return;\n            case utils_1.keys.ARROW_UP:\n            case utils_1.keys.ARROW_DOWN:\n                e.preventDefault();\n                const isArrowUp = e.keyCode === utils_1.keys.ARROW_UP;\n                if (isFinite(numericValue)) {\n                    if (!allowValidation) {\n                        input.innerText = utils_1.formatNumber(numericValue + (isArrowUp ? 1 : -1));\n                    }\n                    else {\n                        const formatGroup = utils_1.getAttribute(input, 'data-group');\n                        const formatType = utils_1.getFormatType(formatGroup);\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n                            const newDate = utils_1.manipulateDate(value, formatType, direction);\n                            const disabled = utils_1.isDisabled(newDate, this.props);\n                            if (!disabled) {\n                                const dateParts = utils_1.splitDate(newDate, format);\n                                this.searchInputs.map((inp, i) => (inp.innerText = dateParts[i]));\n                            }\n                        }\n                    }\n                    this.selectText(input);\n                    onChangeValueText(utils_1.joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n        const dataValue = utils_1.getAttribute(input, 'data-value');\n        const dataGroup = utils_1.getAttribute(input, 'data-group');\n        const char = utils_1.stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n        const valid = utils_1.validateFormatGroup(groupValue, dataGroup);\n        if (!valid) {\n            e.preventDefault();\n        }\n        else if (typeof valid === 'string') {\n            e.preventDefault();\n            input.innerText = valid;\n        }\n        if (hasSelection) {\n            return;\n        }\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n    onKeyUp(e) {\n        const { onChangeValueText, format, allowValidation } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n        if (e.keyCode === utils_1.keys.ENTER || e.keyCode === utils_1.keys.ESC) {\n            if (this.focused) {\n                this.focused.blur();\n            }\n            this.props.onSubmit(this.props.onToggle);\n            return;\n        }\n        if (innerText.length >= utils_1.getAttribute(input, 'data-group').length) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            }\n            else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n            onChangeValueText(utils_1.joinDates(this.searchInputs, format));\n        }\n        input.setAttribute('data-value', innerText);\n    }\n    onFocus(e) {\n        this.selectText(e.currentTarget);\n    }\n    onChange(e) {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n        onChangeValueText(utils_1.joinDates(this.searchInputs, format));\n        if (innerText.length >= utils_1.getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n    onClear(e) {\n        e.stopPropagation();\n        this.props.onChangeValueText('');\n    }\n    onToggle(e) {\n        const { open, onToggle } = this.props;\n        if (this.searchInputs.some(inp => inp === e.target) === false ||\n            !open) {\n            onToggle();\n        }\n    }\n}\ntslib_1.__decorate([\n    lodash_decorators_1.bind,\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", []),\n    tslib_1.__metadata(\"design:returntype\", typeof (_a = (typeof React !== \"undefined\" && React).ReactNode) === \"function\" && _a || Object)\n], Value.prototype, \"renderValue\", null);\ntslib_1.__decorate([\n    lodash_decorators_1.bind,\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof HTMLSpanElement !== \"undefined\" && HTMLSpanElement) === \"function\" && _b || Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], Value.prototype, \"onSearchRef\", null);\ntslib_1.__decorate([\n    lodash_decorators_1.bind,\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_c = (typeof React !== \"undefined\" && React).KeyboardEvent) === \"function\" && _c || Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], Value.prototype, \"onKeyDown\", null);\ntslib_1.__decorate([\n    lodash_decorators_1.bind,\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_d = (typeof React !== \"undefined\" && React).KeyboardEvent) === \"function\" && _d || Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], Value.prototype, \"onKeyUp\", null);\ntslib_1.__decorate([\n    lodash_decorators_1.bind,\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_e = (typeof React !== \"undefined\" && React).SyntheticEvent) === \"function\" && _e || Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], Value.prototype, \"onFocus\", null);\ntslib_1.__decorate([\n    lodash_decorators_1.bind,\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_f = (typeof React !== \"undefined\" && React).KeyboardEvent) === \"function\" && _f || Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], Value.prototype, \"onChange\", null);\ntslib_1.__decorate([\n    lodash_decorators_1.bind,\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_g = (typeof React !== \"undefined\" && React).SyntheticEvent) === \"function\" && _g || Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], Value.prototype, \"onClear\", null);\ntslib_1.__decorate([\n    lodash_decorators_1.bind,\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_h = (typeof React !== \"undefined\" && React).SyntheticEvent) === \"function\" && _h || Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], Value.prototype, \"onToggle\", null);\nexports.Value = Value;\n//# sourceMappingURL=value.js.map",
dependencies: ["tslib","lodash-decorators","react","styled-components","./utils"],
sourceMap: "{\"version\":3,\"file\":\"value.jsx\",\"sourceRoot\":\"\",\"sources\":[\"/src/value.tsx\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import { bind } from 'lodash-decorators';\\nimport * as React from 'react';\\nimport styled from 'styled-components';\\nimport {\\n    keys,\\n    formatNumber,\\n    splitDate,\\n    joinDates,\\n    stringFromCharCode,\\n    validateFormatGroup,\\n    getAttribute,\\n    getFormatType,\\n    manipulateDate,\\n    isDisabled\\n} from './utils';\\nimport { ReactTimebombProps } from './typings';\\n\\ninterface ValueProps {\\n    open?: boolean;\\n    value?: Date;\\n    valueText?: string;\\n    format: string;\\n    placeholder: ReactTimebombProps['placeholder'];\\n    minDate: ReactTimebombProps['minDate'];\\n    maxDate: ReactTimebombProps['maxDate'];\\n    allowValidation?: boolean;\\n    onToggle(): void;\\n    onChangeValueText(valueText: string): void;\\n    onSubmit(onToggle: () => void): void;\\n}\\n\\nconst Flex = styled.div`\\n    display: flex;\\n    align-items: center;\\n`;\\n\\nconst Container = styled(Flex)`\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 5px 10px;\\n    border: 1px solid #ccc;\\n    cursor: pointer;\\n`;\\n\\nconst Input = styled.span`\\n    padding: 2px 0 2px 0;\\n    min-width: 1px;\\n    cursor: text;\\n\\n    &:focus {\\n        outline: none;\\n    }\\n\\n    &:last-of-type {\\n        padding: 2px 10px 2px 0;\\n    }\\n\\n    &:not(:last-of-type):after {\\n        content: attr(data-separator);\\n        width: 4px;\\n        display: inline-block;\\n    }\\n\\n    &:empty:before {\\n        content: attr(data-placeholder);\\n        color: #aaa;\\n    }\\n\\n    &:empty:not(:last-of-type):after {\\n        color: #aaa;\\n    }\\n`;\\n\\nconst Button = styled.button`\\n    font-size: 13px;\\n    color: #ccc;\\n    cursor: pointer;\\n    border: none;\\n    line-height: 1;\\n\\n    &:hover {\\n        color: #333;\\n    }\\n\\n    &:focus {\\n        outline: none;\\n    }\\n`;\\n\\nconst ClearButton = styled(Button)`\\n    font-size: 18px;\\n`;\\n\\nconst Placeholder = styled.span`\\n    color: #aaa;\\n    user-select: none;\\n`;\\n\\nconst Icon = styled.span`\\n    margin-right: 5px;\\n    user-select: none;\\n\\n    &:after {\\n        content: 'ðŸ“…';\\n    }\\n`;\\n\\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\\n\\nexport class Value extends React.PureComponent<ValueProps> {\\n    private searchInputs: HTMLSpanElement[] = [];\\n\\n    private get formatGroups(): string[] {\\n        return this.props.format.split('').reduce(\\n            (memo, char) => {\\n                const prevChar = memo[memo.length - 1];\\n\\n                if (prevChar && char === prevChar.substr(0, 1)) {\\n                    memo[memo.length - 1] += char;\\n                } else {\\n                    memo = [...memo, char];\\n                }\\n\\n                return memo;\\n            },\\n            [] as string[]\\n        );\\n    }\\n\\n    private get focused(): HTMLElement | null {\\n        return document.querySelector(':focus');\\n    }\\n\\n    public componentDidUpdate(prevProps: ValueProps): void {\\n        const { open, value, format } = this.props;\\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\\n\\n        if (!hasFocus) {\\n            if (prevProps.value !== value && value) {\\n                const parts = splitDate(value, format);\\n                const input = this.searchInputs[0];\\n\\n                this.searchInputs.forEach(\\n                    (input, i) => (input.innerText = parts[i])\\n                );\\n\\n                if (input) {\\n                    input.focus();\\n                }\\n            }\\n\\n            if ((open && !prevProps.open) || value !== prevProps.value) {\\n                const input = this.searchInputs[0];\\n\\n                if (input) {\\n                    if (input.innerText === '') {\\n                        input.focus();\\n                    } else {\\n                        this.selectText(input);\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (!open && value) {\\n            const parts = splitDate(value, format);\\n\\n            this.searchInputs.forEach(\\n                (input, i) => (input.innerText = parts[i])\\n            );\\n        }\\n    }\\n\\n    public render(): React.ReactNode {\\n        const { placeholder, value, open } = this.props;\\n        const showPlaceholder = placeholder && !open;\\n\\n        return (\\n            <Container\\n                data-role=\\\"value\\\"\\n                className=\\\"react-slct-value react-timebomb-value\\\"\\n                onClick={this.onToggle}\\n            >\\n                <Flex>\\n                    <Icon className=\\\"react-timebomb-icon\\\" />\\n                    <Flex>\\n                        {this.renderValue()}\\n                        {showPlaceholder && (\\n                            <Placeholder className=\\\"react-timebomb-placeholder\\\">\\n                                {placeholder}\\n                            </Placeholder>\\n                        )}\\n                    </Flex>\\n                </Flex>\\n                <Flex>\\n                    {value && (\\n                        <ClearButton\\n                            className=\\\"react-timebomb-clearer\\\"\\n                            tabIndex={-1}\\n                            onClick={this.onClear}\\n                        >\\n                            Ã—\\n                        </ClearButton>\\n                    )}\\n                    <Button tabIndex={-1} className=\\\"react-timebomb-arrow\\\">\\n                        {open ? 'â–²' : 'â–¼'}\\n                    </Button>\\n                </Flex>\\n            </Container>\\n        );\\n    }\\n\\n    @bind\\n    private renderValue(): React.ReactNode {\\n        const { open, value } = this.props;\\n\\n        if (!open && !value) {\\n            return null;\\n        }\\n\\n        const { formatGroups } = this;\\n\\n        return (\\n            <Flex>\\n                {formatGroups.map((group, i) => {\\n                    if (group === '.' || group === ':' || group === ' ') {\\n                        return null;\\n                    } else {\\n                        const separator = formatGroups[i + 1];\\n\\n                        return (\\n                            <Input\\n                                contentEditable\\n                                data-placeholder={group}\\n                                data-separator={separator}\\n                                key={group}\\n                                data-group={group}\\n                                innerRef={this.onSearchRef}\\n                                onKeyDown={this.onKeyDown}\\n                                onKeyUp={this.onKeyUp}\\n                                onFocus={this.onFocus}\\n                                onClick={this.onFocus}\\n                                onChange={this.onChange}\\n                            />\\n                        );\\n                    }\\n                })}\\n            </Flex>\\n        );\\n    }\\n\\n    private selectText(el: HTMLElement | undefined) {\\n        if (el) {\\n            const range = document.createRange();\\n            const sel = getSelection();\\n\\n            range.selectNodeContents(el);\\n\\n            sel.removeAllRanges();\\n            sel.addRange(range);\\n        }\\n    }\\n\\n    @bind\\n    private onSearchRef(el?: HTMLSpanElement): void {\\n        if (el) {\\n            this.searchInputs.push(el);\\n        } else {\\n            this.searchInputs = [];\\n        }\\n    }\\n\\n    @bind\\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\\n        const {\\n            onChangeValueText,\\n            format,\\n            value,\\n            allowValidation\\n        } = this.props;\\n        const input = e.currentTarget;\\n        const { innerText, nextSibling, previousSibling } = input;\\n        const sel = getSelection();\\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\\n        const numericValue = parseInt(innerText, 10);\\n\\n        switch (e.keyCode) {\\n            case keys.ENTER:\\n            case keys.ESC:\\n                e.preventDefault();\\n                return;\\n            case keys.ARROW_RIGHT:\\n                e.preventDefault();\\n\\n                if (nextSibling instanceof HTMLSpanElement) {\\n                    nextSibling.focus();\\n                } else {\\n                    this.selectText(input);\\n                }\\n                return;\\n            case keys.ARROW_LEFT:\\n                e.preventDefault();\\n\\n                if (previousSibling instanceof HTMLSpanElement) {\\n                    previousSibling.focus();\\n                } else {\\n                    this.selectText(input);\\n                }\\n                return;\\n            case keys.ARROW_UP:\\n            case keys.ARROW_DOWN:\\n                e.preventDefault();\\n\\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\\n\\n                if (isFinite(numericValue)) {\\n                    if (!allowValidation) {\\n                        input.innerText = formatNumber(\\n                            numericValue + (isArrowUp ? 1 : -1)\\n                        );\\n                    } else {\\n                        const formatGroup = getAttribute(input, 'data-group');\\n                        const formatType = getFormatType(formatGroup);\\n\\n                        if (value && formatType) {\\n                            const direction = isArrowUp ? 'add' : 'subtract';\\n\\n                            const newDate = manipulateDate(\\n                                value,\\n                                formatType,\\n                                direction\\n                            );\\n                            const disabled = isDisabled(newDate, this.props);\\n\\n                            if (!disabled) {\\n                                const dateParts = splitDate(newDate, format);\\n\\n                                this.searchInputs.map(\\n                                    (inp, i) => (inp.innerText = dateParts[i])\\n                                );\\n                            }\\n                        }\\n                    }\\n\\n                    this.selectText(input);\\n                    onChangeValueText(joinDates(this.searchInputs, format));\\n                }\\n                return;\\n        }\\n\\n        const dataValue = getAttribute(input, 'data-value');\\n        const dataGroup = getAttribute(input, 'data-group')!;\\n        const char = stringFromCharCode(e.keyCode);\\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\\n\\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\\n            return;\\n        }\\n\\n        const valid = validateFormatGroup(groupValue, dataGroup);\\n\\n        if (!valid) {\\n            e.preventDefault();\\n        } else if (typeof valid === 'string') {\\n            e.preventDefault();\\n\\n            input.innerText = valid;\\n        }\\n\\n        if (hasSelection) {\\n            return;\\n        }\\n\\n        // validate group\\n        if (innerText.length >= dataGroup.length) {\\n            e.preventDefault();\\n        }\\n    }\\n\\n    @bind\\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\\n        const { onChangeValueText, format, allowValidation } = this.props;\\n        const input = e.currentTarget;\\n        const { innerText, nextSibling } = input;\\n\\n        if (e.keyCode === keys.ENTER || e.keyCode === keys.ESC) {\\n            if (this.focused) {\\n                this.focused.blur();\\n            }\\n            this.props.onSubmit(this.props.onToggle);\\n\\n            return;\\n        }\\n\\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\\n            if (allowValidation || !nextSibling) {\\n                this.selectText(input);\\n            } else if (nextSibling instanceof HTMLSpanElement) {\\n                this.selectText(nextSibling);\\n            }\\n\\n            onChangeValueText(joinDates(this.searchInputs, format));\\n        }\\n\\n        input.setAttribute('data-value', innerText);\\n    }\\n\\n    @bind\\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\\n        this.selectText(e.currentTarget);\\n    }\\n\\n    @bind\\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\\n        const { format, onChangeValueText } = this.props;\\n        const input = e.currentTarget;\\n        const { innerText, nextSibling } = input;\\n\\n        onChangeValueText(joinDates(this.searchInputs, format));\\n\\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\\n            if (nextSibling instanceof HTMLSpanElement) {\\n                nextSibling.focus();\\n            }\\n        }\\n    }\\n\\n    @bind\\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\\n        e.stopPropagation();\\n\\n        this.props.onChangeValueText('');\\n    }\\n\\n    @bind\\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\\n        const { open, onToggle } = this.props;\\n\\n        if (\\n            this.searchInputs.some(inp => inp === e.target) === false ||\\n            !open\\n        ) {\\n            onToggle();\\n        }\\n    }\\n}\\n\"]}",
headerContent: undefined,
mtime: 1532199270000,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
