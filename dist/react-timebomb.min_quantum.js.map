{"version":3,"sources":["src/index.tsx","src/menu.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","onChangeFormatGroup","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","menuWidth","showCalendarWeek","selectWeek","onOpen","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","MenuContainer","showMenu","ref","renderValue","Math","max","MENU_WIDTH","MenuTitle","onMonth","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","getFormatType","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps","button_1","menu_day_1","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","css","PureComponent","yearContainer","monthMatrixCache","Map","scrollToYear","delay","selected","querySelector","scrollIntoView","scrollBy","top","onYearContainer","onDayMouseEnter","onDayMouseLeave","weekdayNames","getWeekdayNames","monthNames","getMonthNames","now","monthMatrix","getDate","dateMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","weekStart","addDays","set","fullYears","year","getDateConfig","newYear","setFullYear","enabled","setSeconds","getSeconds","setMinutes","setHours","currentYear","Array","fill","_","i","filter","obj","reverse","minYear","array","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","month","str","hoverDay","sun","mon","tue","wed","thu","fri","sat","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","WeekNum","Day","onMouseEnter","onMouseLeave","isValid","e","getAttribute","currentTarget","el"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n} from './typings';\nimport { ValueMulti } from './value-multi';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'day',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={Math.max(\n                                        ReactTimebomb.MENU_WIDTH,\n                                        menuWidth || 0\n                                    )}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    getAttribute,\n    isArray,\n    dateEqual,\n    getWeekdayNames\n} from './utils';\nimport { Button } from './button';\nimport { Day, WeekNum } from './menu-day';\nimport { ReactTimebombDate } from './typings';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface MenuState {\n    hoverDay?: Date;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: 220px;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 46px;\n        border: none;\n        margin: 0 0 4px;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps, MenuState> {\n    private weekdayNames!: string[];\n    private monthNames!: string[];\n\n    private get now(): Date {\n        return new Date();\n    }\n\n    private getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[this.props.selectedRange] : date)!;\n    }\n\n    private yearContainer: HTMLDivElement | null = null;\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const date = this.getDate(this.props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { value, minDate, maxDate } = this.props;\n        const valueDate = this.getDate(value);\n        const year = this.getDate(this.props.date).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, this.props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onYearContainer = this.onYearContainer.bind(this);\n        this.onDayMouseEnter = this.onDayMouseEnter.bind(this);\n        this.onDayMouseLeave = this.onDayMouseLeave.bind(this);\n\n        this.weekdayNames = getWeekdayNames();\n        this.monthNames = getMonthNames(true);\n    }\n\n    public componentDidUpdate(prevProps: MenuProps) {\n        if (!dateEqual(prevProps.date, this.props.date)) {\n            this.scrollToYear(64);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showDate, showConfirm } = this.props;\n\n        if (showDate) {\n            switch (mode) {\n                case 'year':\n                case 'month':\n                    return (\n                        <MonthAndYearContainer>\n                            {this.renderMenuMonths()}\n                            {this.renderMenuYear()}\n                        </MonthAndYearContainer>\n                    );\n                case 'day':\n                    return (\n                        <MonthContainer>\n                            {this.renderMonth()}\n                            {showConfirm && this.renderConfirm()}\n                        </MonthContainer>\n                    );\n            }\n        }\n\n        return null;\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { value } = this.props;\n        const valueDate = this.getDate(value);\n        const date = this.getDate(this.props.date);\n        const month = value && valueDate.getMonth();\n        const year = value && valueDate.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {this.monthNames.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek } = this.props;\n        const { hoverDay } = this.state;\n        const [sun, mon, tue, wed, thu, fri, sat] = this.weekdayNames;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>{mon}</th>\n                        <th>{tue}</th>\n                        <th>{wed}</th>\n                        <th>{thu}</th>\n                        <th>{fri}</th>\n                        <th>{sat}</th>\n                        <th>{sun}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">\n                                        <WeekNum\n                                            day={dates[0]}\n                                            onClick={this.onSelectDay}\n                                        >\n                                            {weekNum}\n                                        </WeekNum>\n                                    </td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            day={date}\n                                            hoverDay={hoverDay}\n                                            date={this.props.date}\n                                            value={this.props.value}\n                                            minDate={this.props.minDate}\n                                            maxDate={this.props.maxDate}\n                                            selectWeek={this.props.selectWeek}\n                                            selectRange={this.props.selectRange}\n                                            showTime={this.props.showTime}\n                                            onSelectDay={this.onSelectDay}\n                                            onMouseEnter={this.onDayMouseEnter}\n                                            onMouseLeave={this.onDayMouseLeave}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isArray(validDate)\n                ? validDate.every(v => isEnabled('day', v, this.props))\n                : isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private scrollToYear = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (delay: number) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                if (this.yearContainer) {\n                    const selected = this.yearContainer.querySelector(\n                        '.selected'\n                    );\n\n                    if (selected) {\n                        selected.scrollIntoView();\n                        this.yearContainer.scrollBy({ top: -10 });\n                    }\n                }\n            }, delay);\n        };\n    })();\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        this.yearContainer = el;\n\n        this.scrollToYear(0);\n    }\n\n    private onDayMouseEnter(day: Date) {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: day });\n        }\n    }\n\n    private onDayMouseLeave() {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: undefined });\n        }\n    }\n}\n"]}