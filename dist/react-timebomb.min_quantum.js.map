{"version":3,"sources":["src/index.tsx","src/button.tsx","src/value.tsx","src/arrow-button.tsx","src/typings.ts","src/value-multi.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","format","showTime","isTimeFormat","showDate","isDateFormat","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","startOfDay","mode","valueText","dateFormat","undefined","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","menuWidth","showCalendarWeek","selectWeek","MENU_HEIGHT","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","showMenu","ref","renderValue","Math","max","MENU_WIDTH","MenuTitle","onMonths","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","clearSelection","onError","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps","StyledButton","button","selected","Button","Object","assign","data-react-timebomb-selectable","data-role","SmallButton","button_1","arrow_button_1","Flex","Input","span","ClearButton","Placeholder","Icon","icon","WHITELIST_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","PureComponent","searchInputs","onSearchRef","onKeyDown","onKeyUp","onClick","onBlur","formatGroups","reduce","memo","char","prevChar","substr","focused","document","querySelector","iconClass","some","inp","parts","splitDate","forEach","i","innerText","focus","selectText","forceUpdate","ArrowButtonComp","ArrowButton","showPlaceholder","timeOnly","tabIndex","group","separator","contentEditable","data-placeholder","data-separator","key","data-group","el","range","createRange","sel","getSelection","selectNodeContents","removeAllRanges","addRange","e","currentTarget","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","keyCode","ENTER","ESC","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatGroup","getAttribute","formatType","getFormatType","direction","manipulateDate","shiftKey","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataValue","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","blur","setAttribute","target","currentFormatGroup","fillZero","stopPropagation","ArrowButtonProps","body","addEventListener","removeEventListener"],"mappings":"mFAAA,MAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBACAE,EAAAH,EAAAC,EAAA,cACAG,EAAAJ,EAAAC,EAAA,GACAI,EAAAL,EAAAC,EAAA,GACAK,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GAmBAO,EAAAR,EAAAC,EAAA,GAUIQ,EAAAC,mBATAF,EAAAE,mBAUAD,EAAAE,mBATAH,EAAAG,mBAUAF,EAAAG,mBATAJ,EAAAI,mBAUAH,EAAAI,kBATAL,EAAAK,kBAUAJ,EAAAK,8BATAN,EAAAM,8BAEJ,MAAAC,EAAAf,EAAAC,EAAA,GAUMe,EAAYd,EAAAe,QAAOC;;;;EAMnBC,EAAcjB,EAAAe,QAAOC;;;;;;;;;kBASTE,GAAmCA,EAAMC;;;EAKrDC,EAAapB,EAAAe,QAAOM;;;;;;EAQ1B,MAAaC,UAAsBzB,EAAM0B,UA0ErCC,YAAYN,GACRO,MAAMP,GAkQFQ,KAAAC,WAAa,MACjB,IAAIC,EAEJ,MAAO,CAACC,EAAyBC,KAC7BC,aAAaH,GAEbA,EAAUI,WAAW,KACjB,MAAMC,MAAEA,EAAAC,YAAOA,EAAAC,SAAaA,GAAaT,KAAKR,MAEzCgB,IACDJ,GAAS,GAGTzB,EAAA+B,UAAUH,EAAOJ,KAIjBC,IACIzB,EAAAgC,QAAQR,GACRM,KAAYN,GAEZM,EAASN,IAIjBH,KAAKY,SAAS,CAAEC,gBAAiBC,QAAQX,OAC1C,KA1BU,GAhQjB,MAAMY,QAAEA,EAAAC,QAASA,EAAAC,YAASA,EAAAT,YAAaA,GAAgBhB,EAEvD,GAAIuB,GAAWC,GAAWrC,EAAAuC,SAASF,EAASD,GACxC,MAAM,IAAII,MAAM,sCAGpB,GAAIF,IAAgBT,EAChB,MAAM,IAAIW,MACN,0DAIRnB,KAAKoB,MAAQpB,KAAKqB,aAElBrB,KAAKsB,kBAAoBtB,KAAKsB,kBAAkBC,KAAKvB,MACrDA,KAAKwB,cAAgBxB,KAAKwB,cAAcD,KAAKvB,MAC7CA,KAAKyB,YAAczB,KAAKyB,YAAYF,KAAKvB,MACzCA,KAAK0B,WAAa1B,KAAK0B,WAAWH,KAAKvB,MACvCA,KAAK2B,aAAe3B,KAAK2B,aAAaJ,KAAKvB,MAC3CA,KAAK4B,cAAgB5B,KAAK4B,cAAcL,KAAKvB,MAC7CA,KAAK6B,aAAe7B,KAAK6B,aAAaN,KAAKvB,MAC3CA,KAAK8B,QAAU9B,KAAK8B,QAAQP,KAAKvB,MACjCA,KAAK+B,YAAc/B,KAAK+B,YAAYR,KAAKvB,MACzCA,KAAKgC,YAAchC,KAAKgC,YAAYT,KAAKvB,MACzCA,KAAKiC,aAAejC,KAAKiC,aAAaV,KAAKvB,MAC3CA,KAAKkC,QAAUlC,KAAKkC,QAAQX,KAAKvB,MACjCA,KAAKmC,QAAUnC,KAAKmC,QAAQZ,KAAKvB,MA7F9BF,gCACHN,GAEA,MAAM4C,EAAS5C,EAAM4C,OAErB,MAAO,CACHC,SAAU1D,EAAA2D,aAAaF,GACvBG,SAAU5D,EAAA6D,aAAaJ,IAS/BK,gBACI,MAAMC,EAAa,CAAC,kBAcpB,OAZI1C,KAAKR,MAAMiD,WACXC,EAAWC,KAAK3C,KAAKR,MAAMiD,WAG3BzC,KAAKR,MAAMoD,OACXF,EAAWC,KAAK,SAGhB3C,KAAKR,MAAMqD,UACXH,EAAWC,KAAK,YAGbD,EAAWI,KAAK,KAG3BC,uBACI,MAAMxC,MAAEA,EAAAQ,QAAOA,EAAAC,QAASA,GAAYhB,KAAKR,MAEzC,GAAIe,EACA,OAAOA,EAGX,IAAIJ,EAAO,IAAI6C,KAQf,OANIhC,GAAWrC,EAAAuC,SAASF,EAASb,GAC7BA,EAAOa,EACAD,GAAWpC,EAAAsE,QAAQlC,EAASZ,KACnCA,EAAOY,GAGJpC,EAAAuE,WAAW/C,GAGtBkB,mBACI,MAAO,CACHR,iBAAiB,EACjBsC,KAAM,QACNC,UAAWpD,KAAKR,MAAMe,MAChB5B,EAAA0E,WAAWrD,KAAKR,MAAMe,MAAOP,KAAKR,MAAM4C,aACxCkB,EACNnD,KAAMH,KAAK+C,iBACXQ,cAAe,GAoChBzD,mBACH0D,EACAC,GAEA,MAAML,UAAEA,GAAcpD,KAAKoB,OACrBb,MAAEA,EAAA6B,OAAOA,GAAWpC,KAAKR,MAE3BgE,EAAUpB,SAAWA,GACrBpC,KAAKY,SAAS,CACVwC,UAAW7C,EAAQ5B,EAAA0E,WAAW9C,EAAO6B,QAAWkB,IAIpDG,EAAUL,YAAcA,GACxBpD,KAAK0D,oBAAmB,GAIxB5D,mBAAmBM,GACvB,MAAMgD,UAAEA,EAAAvC,gBAAWA,GAAoBb,KAAKoB,OACtCgB,OAAEA,GAAWpC,KAAKR,MAClBmE,EAAYhF,EAAAiF,aAAaR,EAAWhB,GAEtCuB,EACA3D,KAAKY,SAAS,CAAEC,iBAAiB,GAAQ,MACrBlC,EAAAgC,QAAQgD,GAClBA,EAAUE,MAAMC,GAAKnF,EAAAoF,UAAU,MAAOD,EAAG9D,KAAKR,QAC9Cb,EAAAoF,UAAU,MAAOJ,EAAW3D,KAAKR,QAGnCQ,KAAKY,SAAS,CAAET,KAAMwD,GAAa,IAC/B3D,KAAKC,WAAW0D,EAAWvD,IAG/BJ,KAAKgE,UAAU,aAAcZ,KAG9BA,EACPpD,KAAKgE,UAAU,cAAeZ,IACtBzE,EAAAsF,YAAYb,IAAcvC,GAClCb,KAAKC,gBAAWqD,EAAWlD,GAI5BN,SACH,MAAMoE,YACFA,EAAAC,UACAA,EAAA3D,YACAA,EAAA4D,iBACAA,EAAAC,WACAA,EAAApD,YACAA,EAAAmB,OACAA,EAAAQ,MACAA,EAAAC,SACAA,GACA7C,KAAKR,OACH+C,SACFA,EAAAF,SACAA,EAAAe,UACAA,EAAAD,KACAA,EAAAI,cACAA,GACAvD,KAAKoB,MACH3B,EAAaG,EAAc0E,YAC3BvD,EAAUf,KAAKR,MAAMuB,QACrBpC,EAAAuE,WAAWlD,KAAKR,MAAMuB,cACtBuC,EACAtC,EAAUhB,KAAKR,MAAMwB,QACrBrC,EAAA4F,SAASvE,KAAKR,MAAMwB,cACpBsC,EACA/C,EAAQ6C,EACRzE,EAAAiF,aAAaR,EAAWhB,GACxBpC,KAAKR,MAAMe,MAEjB,OACIpC,EAAAqG,cAACjG,EAAAkG,OAAM,CACHlE,MAAOA,EACP2D,YAAaA,EACbtB,MAAOA,EACPV,QAASlC,KAAKkC,SAEb,EAAGgC,YAAAA,EAAaQ,KAAAA,EAAMC,SAAAA,EAAUC,MAAAA,EAAOC,cAAAA,MACpC,MAAMC,EAAWJ,GAAQnC,IAAaM,EAItC,OAFA7C,KAAK2E,SAAWA,EAGZxG,EAAAqG,cAACpF,EAAS,CAAC2F,IAAKH,EAAOnC,UAAWzC,KAAKyC,WAClCzC,KAAKgF,YAAYzE,EAAO2D,EAAaQ,GACrCI,EACG3G,EAAAqG,cAACK,EAAa,CACVV,UAAWc,KAAKC,IACZtF,EAAcuF,WACdhB,GAAa,GAEjB1E,WAAYA,GAEZtB,EAAAqG,cAACjF,EAAW,CACRkD,UAAU,sBACVhD,WAAYA,GAEZtB,EAAAqG,cAAC/F,EAAA2G,UAAS,CACNjC,KAAMA,EACNhD,KAAMH,KAAKoB,MAAMjB,KACjBY,QAASA,EACTC,QAASA,EACTuC,cAAeA,EACf8B,SAAUrF,KAAK2B,aACf2D,OAAQtF,KAAK0B,WACbK,YAAa/B,KAAK+B,YAClBC,YAAahC,KAAKgC,YAClBF,QAAS9B,KAAK8B,UAElB3D,EAAAqG,cAAChG,EAAA+G,KAAI,CACDlD,SAAUA,EACVE,SAAUA,EACV/B,YAAaA,EACb4D,iBAAkBA,EAClBC,WAAYA,EACZpD,YAAaA,EACbd,KAAMH,KAAKoB,MAAMjB,KACjBI,MAAOA,EACP6C,UAAWA,EACXhB,OAAQA,EACRe,KAAMA,EACNpC,QAASA,EACTC,QAASA,EACTuC,cAAeA,EACf9B,YAAazB,KAAKyB,YAClBG,cAAe5B,KAAK4B,cACpBC,aAAc7B,KAAK6B,aACnBI,aAAcjC,KAAKiC,aACnBuD,SAAUxF,KAAKwB,kBAK3BrD,EAAAqG,cAAC9E,EAAU,CAAC+F,KAAK,OAAOC,QAASf,OASrD7E,YACJS,EACA2D,EACAQ,GAEAR,EAAcQ,OAAOpB,EAAYY,EAEjC,MAAMnD,QACFA,EAAAC,QACAA,EAAA6B,SACAA,EAAAT,OACAA,EAAAnB,YACAA,EAAA0E,qBACAA,GACA3F,KAAKR,OACH+C,SAAEA,EAAAF,SAAUA,EAAAxB,gBAAUA,GAAoBb,KAAKoB,MAErD,GAAIH,GAAetC,EAAAgC,QAAQJ,GAAQ,CAC/B,MAAMqF,EAAarF,EACb5B,EAAAgC,QAAQJ,GACJA,EACA,CAACA,QACL+C,EAEN,OACInF,EAAAqG,cAACrF,EAAA0G,WAAU,CACPnB,KAAMA,EACN7B,SAAUA,EACVqB,YAAaA,EACb3D,MAAOqF,EACPD,qBAAsBA,EACtBxD,QAASnC,KAAKmC,QACdwC,SAAU3E,KAAK2E,WAK3B,OACIxG,EAAAqG,cAAC9F,EAAAoH,MAAK,CACFjD,SAAUA,EACVqB,YAAaA,EACb9B,OAAQA,EACR7B,MAAOA,EACPQ,QAASA,EACTC,QAASA,EACTH,gBAAiBA,EACjB6D,KAAMA,EACNnC,SAAUA,EACVF,SAAUA,EACVsD,qBAAsBA,EACtBxD,QAASnC,KAAKmC,QACdb,kBAAmBtB,KAAKsB,kBACxBqD,SAAU3E,KAAK2E,SACfa,SAAUxF,KAAKwB,gBAKnB1B,UACJnB,EAAAoH,iBAEAzF,WAAW,KACP3B,EAAAoH,iBAEA/F,KAAKY,SAASZ,KAAKqB,eACpB,IAGCvB,UACJ8C,EACArC,GAEIP,KAAKoB,MAAMP,iBACXb,KAAKY,SAAS,CAAEC,iBAAiB,GAAS,KAClCb,KAAKR,MAAMwG,SACXhG,KAAKR,MAAMwG,QAAQpD,EAAOrC,KAoClCT,iBAAiBK,GACrB,OAAIxB,EAAAgC,QAAQR,GACY,IAAhBA,EAAK8F,OACD9F,EAAK,GAAKA,EAAK,GACR,EAEA,EAEY,IAAhBA,EAAK8F,OACL,EAMRjG,KAAKoB,MAAMmC,cAHP,EAMPzD,UACJE,KAAKY,SAAS,CAAEwC,eAAWE,GAAa,KACpCtD,KAAKC,gBAAWqD,GAAW,KAI3BxD,kBAAkBsD,GACtBpD,KAAKY,SAAS,CAAEwC,UAAAA,IAGZtD,gBACAE,KAAK2E,UACL3E,KAAK2E,WAEThG,EAAAoH,iBAEA/F,KAAK0D,oBAAmB,GAGpB5D,YAAYoG,GAChB,MAAM3F,MAAEA,EAAA6B,OAAOA,EAAAiC,WAAQA,EAAApD,YAAYA,GAAgBjB,KAAKR,MAElD2G,EACF5F,aAAiByC,KACXzC,EACA5B,EAAAgC,QAAQJ,GACRA,EAAM,QACN+C,EAEV,GAAIe,EAAY,CACZ,MAAMlE,EAAO,CAACxB,EAAAyH,YAAYF,GAAMvH,EAAA0H,UAAUH,IACpC9C,EAAYzE,EAAA0E,WAAWlD,EAAMiC,GAEnCpC,KAAKY,SAAS,CAAET,KAAAA,EAAMiD,UAAAA,QACnB,CACH,MAAMjD,EAAOxB,EAAA2H,QACTJ,EACAC,EAAYA,EAAUI,WAAa,EACnCJ,EAAYA,EAAUK,aAAe,GAGzC,GAAIvF,EAAa,CACb,MAAMwF,EACF9H,EAAAgC,QAAQX,KAAKoB,MAAMgC,YACa,IAAhCpD,KAAKoB,MAAMgC,UAAU6C,OACf,CACItH,EAAAiF,aACI5D,KAAKoB,MAAMgC,UAAU,GACrBhB,GAEJjC,GAEJ,CAACA,GAELoD,EAAgBvD,KAAK0G,iBAAiBD,GACtCrD,EAAYzE,EAAA0E,WAAWoD,EAAQE,KAAKhI,EAAAiI,WAAYxE,GAEtDpC,KAAKY,SAAS,CAAET,KAAMsG,EAASrD,UAAAA,EAAWG,cAAAA,QACvC,CACH,MAAMH,EAAYzE,EAAA0E,WAAWlD,EAAMiC,GAEnCpC,KAAKY,SAAS,CAAET,KAAAA,EAAMiD,UAAAA,MAK1BtD,aACJE,KAAKY,SAAS,CAAEuC,KAAM,SAGlBrD,eACJE,KAAKY,SAAS,CAAEuC,KAAM,WAGlBrD,cAAcK,GAClBH,KAAKY,SAAS,CAAET,KAAAA,EAAMgD,KAAM,UAGxBrD,aAAaK,GACjBH,KAAKY,SAAS,CAAET,KAAAA,EAAMgD,KAAM,WAGxBrD,UACJE,KAAKY,SAAS,CAAET,KAAMH,KAAK+C,mBAGvBjD,cACJ,MAAM+G,EAAclI,EAAAgC,QAAQX,KAAKoB,MAAMjB,MACjCH,KAAKoB,MAAMjB,KAAKH,KAAKoB,MAAMmC,eAC3BvD,KAAKoB,MAAMjB,KAEjB,GAAI0G,EAAa,CACb,MAAM1G,EAAO,IAAI6C,KAAK6D,GAEtB1G,EAAK2G,SAAS3G,EAAK4G,WAAa,GAEhC/G,KAAKY,SAAS,CAAET,KAAAA,KAIhBL,cACJ,MAAM+G,EAAclI,EAAAgC,QAAQX,KAAKoB,MAAMjB,MACjCH,KAAKoB,MAAMjB,KAAKH,KAAKoB,MAAMmC,eAC3BvD,KAAKoB,MAAMjB,KAEjB,GAAI0G,EAAa,CACb,MAAM1G,EAAO,IAAI6C,KAAK6D,GAEtB1G,EAAK2G,SAAS3G,EAAK4G,WAAa,GAEhC/G,KAAKY,SAAS,CAAET,KAAAA,KAIhBL,aAAakH,GACjB,MAAM5E,OAAEA,GAAWpC,KAAKR,MACxB,IAAIe,EAAQP,KAAKR,MAAMe,OAAS,IAAIyC,KAAK,cAEzC,GAAKgE,EAME,CACH,MAAMC,EAAWD,EAAKE,MAAM,KACtBC,EAAUxI,EAAAgC,QAAQJ,GAClBA,EAAM6G,IAAItD,GACNnF,EAAA2H,QACIxC,EACAuD,SAASJ,EAAS,GAAI,IACtBI,SAASJ,EAAS,GAAI,MAG9BtI,EAAA2H,QACI/F,EACA8G,SAASJ,EAAS,GAAI,IACtBI,SAASJ,EAAS,GAAI,KAG1B7D,EAAYzE,EAAA0E,WAAW8D,EAAS/E,GAEtCpC,KAAKY,SAAS,CAAEwC,UAAAA,GAAa,IAAMpD,KAAKC,WAAWkH,GAAS,SAvBxDxI,EAAAgC,QAAQJ,KACRA,EAAQA,EAAM6G,IAAIE,GAAK3I,EAAAuE,WAAWoE,KAGtCtH,KAAKC,WAAWM,GAAO,IApfjBX,EAAAuF,WAAa,IACbvF,EAAA0E,YAAc,IAiBd1E,EAAA2H,aAA4C,CACtDnF,OAAQ,cAvBhBvD,EAAAe,cAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0sTCrEA,MAAAzB,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBAEMmJ,EAAelJ,EAAAe,QAAOoI;;;;;;;kBAOVjI,GACVA,EAAMkI,SAAW,OAAS;;;;;;;;;;;;;;;4BAeNlI,GAChBA,EAAMkI,SAAW,OAAS;;;;;;EAQzB7I,EAAA8I,OAASnI,CAAAA,GAGlBrB,EAAAqG,cAACgD,EAAYI,OAAAC,OAAA,CAAAC,kCAAA,EAAAC,YAEC,SACVtC,KAAK,UACDjG,KAICX,EAAAmJ,YAAc1J,EAAAe,QAAOR,EAAA8I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uiCC/ClC,MAAAxJ,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBACAM,EAAAP,EAAAC,EAAA,GAaA4J,EAAA7J,EAAAC,EAAA,GACA6J,EAAA9J,EAAAC,EAAA,GA4BaQ,EAAAsJ,KAAO7J,EAAAe,QAAOC;;;;;EAOdT,EAAAO,UAAYd,EAAAe,QAAOR,EAAAsJ;;;;;cAKlB3I,GACNA,EAAMqD,SAAW,cAAgB;;;;EAMzC,MAAMuF,EAAQ9J,EAAAe,QAAOgJ;;;cAGP7I,GAAwBA,EAAMqD,SAAW,cAAgB;sBACjDrD,GACdA,EAAMqD,SAAW,OAAS;;;;;;;;;;;;;;;;;;;;;;;;EA0BrBhE,EAAAyJ,YAAchK,EAAAe,QAAO4I,EAAAD;;EAIrBnJ,EAAA0J,YAAcjK,EAAAe,QAAOgJ;;;EAKrBxJ,EAAA2J,KAAOlK,EAAAe,QAAOgJ;;;;;oBAKP7I,GAA6BA,EAAMiJ;;EAIvD,MAAMC,EAAiB,CAAC/J,EAAAgK,KAAKC,UAAWjK,EAAAgK,KAAKE,OAAQlK,EAAAgK,KAAKG,KAEpDC,EAAiB,CACnBpK,EAAAgK,KAAKK,MACLrK,EAAAgK,KAAKM,WACLtK,EAAAgK,KAAKO,YACLvK,EAAAgK,KAAKQ,SACLxK,EAAAgK,KAAKS,WACLzK,EAAAgK,KAAKG,KAGTjK,EAAAiH,MAAA,cAA2B3H,EAAMkL,cA2C7BvJ,YAAYN,GACRO,MAAMP,GA3CFQ,KAAAsJ,aAAkC,GA6CtCtJ,KAAKoB,MAAQ,GAEbpB,KAAKuJ,YAAcvJ,KAAKuJ,YAAYhI,KAAKvB,MACzCA,KAAKwJ,UAAYxJ,KAAKwJ,UAAUjI,KAAKvB,MACrCA,KAAKyJ,QAAUzJ,KAAKyJ,QAAQlI,KAAKvB,MACjCA,KAAK0F,QAAU1F,KAAK0F,QAAQnE,KAAKvB,MACjCA,KAAK0J,QAAU1J,KAAK0J,QAAQnI,KAAKvB,MACjCA,KAAK2J,OAAS3J,KAAK2J,OAAOpI,KAAKvB,MAC/BA,KAAKS,SAAWT,KAAKS,SAASc,KAAKvB,MACnCA,KAAKmC,QAAUnC,KAAKmC,QAAQZ,KAAKvB,MACjCA,KAAK2E,SAAW3E,KAAK2E,SAASpD,KAAKvB,MArDvC4J,mBACI,OAAO5J,KAAKR,MAAM4C,OAAO8E,MAAM,IAAI2C,OAC/B,CAACC,EAAMC,KACH,MAAMC,EAAWF,EAAKA,EAAK7D,OAAS,GAQpC,OANI+D,GAAYD,IAASC,EAASC,OAAO,EAAG,GACxCH,EAAKA,EAAK7D,OAAS,IAAM8D,EAEzBD,EAAO,IAAIA,EAAMC,GAGdD,GAEX,IAIRI,cACI,OAAOC,SAASC,cAAc,UAGlCC,gBACI,MAAMhI,SAAEA,EAAAE,SAAUA,GAAavC,KAAKR,MAEpC,OAAK+C,GAAYF,EACN,OAGJ,WAGXoG,WACI,OAAQzI,KAAKqK,WACT,IAAK,WACD,MAAO,KACX,IAAK,OACD,MAAO,KAoBZvK,mBAAmB0D,GACtB,MAAMkB,KAAEA,EAAAnE,MAAMA,EAAA6B,OAAOA,GAAWpC,KAAKR,MAGrC,IAFiBQ,KAAKsJ,aAAagB,KAAKC,GAAOA,IAAQvK,KAAKkK,UAGpDxF,EAAM,CACN,GAAIlB,EAAUjD,QAAUA,GAAAA,EAAgB,CACpC,MAAMiK,EAAQ7L,EAAA8L,UAAUlK,EAAO6B,GACzBzC,EAAQK,KAAKsJ,aAAa,GAEhCtJ,KAAKsJ,aAAaoB,QACd,CAAC/K,EAAOgL,IAAOhL,EAAMiL,UAAYJ,EAAMG,IAGvChL,GACAA,EAAMkL,QAId,IAAKrH,EAAUkB,MAAQnE,IAAUiD,EAAUjD,MAAO,CAC9C,MAAMZ,EAAQK,KAAKsJ,aAAa,GAE5B3J,GACAK,KAAK8K,WAAWnL,IAMhC,IAAK+E,GAAQnE,EAAO,CAChB,MAAMiK,EAAQ7L,EAAA8L,UAAUlK,EAAO6B,GAE/BpC,KAAKsJ,aAAaoB,QACd,CAAC/K,EAAOgL,IAAOhL,EAAMiL,UAAYJ,EAAMG,KAK5C7K,oBACCE,KAAKR,MAAMe,OACXP,KAAK+K,cAINjL,SACH,MAAMoE,YACFA,EAAA3D,MACAA,EAAAgC,SACAA,EAAAF,SACAA,EAAAQ,SACAA,EAAA6B,KACAA,GACA1E,KAAKR,MACHwL,EAAkBhL,KAAKR,MAAMmG,sBAAwBuC,EAAA+C,YACrDC,EAAkBhH,IAAgBQ,EAClCyG,EAAW9I,IAAaE,EAE9B,OACIpE,EAAAqG,cAAC3F,EAAAO,UAAS,CAAA2I,YACI,QACVtF,UAAU,wCACVI,SAAUA,EACV6G,QAAS1J,KAAK2E,UAEdxG,EAAAqG,cAAC3F,EAAAsJ,KAAI,KACDhK,EAAAqG,cAAC3F,EAAA2J,KAAI,CACDC,KAAMzI,KAAKyI,KACXhG,iCAAkCzC,KAAKqK,cAE3ClM,EAAAqG,cAAC3F,EAAAsJ,KAAI,KACAnI,KAAKgF,cACLkG,GACG/M,EAAAqG,cAAC3F,EAAA0J,YAAW,CAAC9F,UAAU,8BAClByB,KAKjB/F,EAAAqG,cAAC3F,EAAAsJ,KAAI,KACA5H,GACGpC,EAAAqG,cAAC3F,EAAAyJ,YAAW,CACR7F,UAAU,yBACV2I,UAAW,EACXvI,SAAUA,EACV6G,QAAS1J,KAAKmC,SAAO,MAK3BgJ,GACEhN,EAAAqG,cAACwG,EAAe,CAACnI,SAAUA,EAAU6B,KAAMA,MAOvD5E,cACJ,MAAM4E,KAAEA,EAAA7B,SAAMA,EAAAtC,MAAUA,GAAUP,KAAKR,MAEvC,IAAKkF,IAASnE,EACV,OAAO,KAGX,MAAMqJ,aAAEA,GAAiB5J,KAEzB,OACI7B,EAAAqG,cAAC3F,EAAAsJ,KAAI,KACAyB,EAAaxC,IAAI,CAACiE,EAAOV,KACtB,GAAc,MAAVU,GAA2B,MAAVA,GAA2B,MAAVA,EAClC,OAAO,KACJ,CACH,MAAMC,EAAY1B,EAAae,EAAI,GAEnC,OACIxM,EAAAqG,cAAC4D,EAAK,CACFmD,iBAAkB1I,EAClBA,SAAUA,EAAQ2I,mBACAH,EAAKI,iBACPH,EAChBI,IAAKL,EAAKM,aACEN,EACZtG,IAAK/E,KAAKuJ,YAAWzB,kCAAA,EAErB0B,UAAWxJ,KAAKwJ,UAChBC,QAASzJ,KAAKyJ,QACd/D,QAAS1F,KAAK0F,QACdiE,OAAQ3J,KAAK2J,OACbD,QAAS1J,KAAK0J,QACdjJ,SAAUT,KAAKS,eASnCX,WAAW8L,GACf,GAAIA,EAAI,CACJ,MAAMC,EAAQ1B,SAAS2B,cACjBC,EAAMC,eAEZH,EAAMI,mBAAmBL,GAEzBG,EAAIG,kBACJH,EAAII,SAASN,IAIb/L,YAAY8L,GACZA,EACA5L,KAAKsJ,aAAa3G,KAAKiJ,GAEvB5L,KAAKsJ,aAAe,GAIpBxJ,UAAUsM,GACd,MAAM9K,kBACFA,EAAAc,OACAA,EAAA7B,MACAA,EAAAM,gBACAA,GACAb,KAAKR,MACHG,EAAQyM,EAAEC,eACVzB,UAAEA,EAAA0B,YAAWA,EAAAC,gBAAaA,GAAoB5M,EAC9CoM,EAAMC,eACNQ,EAAe1L,QAAQiL,EAAIU,YAAcV,EAAIW,YACnD,IAAIC,EAAetF,SAASuD,EAAW,IAEvC,OAAQwB,EAAEQ,SACN,KAAKjO,EAAAgK,KAAKkE,MACV,KAAKlO,EAAAgK,KAAKmE,IACV,KAAKnO,EAAAgK,KAAKC,UAEN,YADAwD,EAAEW,iBAEN,KAAKpO,EAAAgK,KAAKO,YAQN,OAPAkD,EAAEW,sBAEET,aAAuBU,gBACvBV,EAAYzB,QAEZ7K,KAAK8K,WAAWnL,IAGxB,KAAKhB,EAAAgK,KAAKM,WAQN,OAPAmD,EAAEW,sBAEER,aAA2BS,gBAC3BT,EAAgB1B,QAEhB7K,KAAK8K,WAAWnL,IAGxB,KAAKhB,EAAAgK,KAAKQ,SACV,KAAKxK,EAAAgK,KAAKS,WACNgD,EAAEW,iBAEF,MAAME,EAAYb,EAAEQ,UAAYjO,EAAAgK,KAAKQ,SAMrC,GAJI+D,MAAMP,KACNA,EAAe,GAGfQ,SAASR,GAAe,CACxB,MAAMS,EAAczO,EAAA0O,aAAa1N,EAAO,cAClC2N,EAAa3O,EAAA4O,cAAcH,GAEjC,GAAKvM,GAgBD,GAAIN,GAAS+M,EAAY,CACrB,MAAME,EAAYP,EAAY,MAAQ,WAEhC9F,EAAUxI,EAAA8O,eACZlN,EACA+M,EACAE,EACApB,EAAEsB,UAQN,GANgB/O,EAAAoF,UACZ,MACAoD,EACAnH,KAAKR,OAGI,CACT,MAAMmO,EAAYhP,EAAA8L,UAAUtD,EAAS/E,GAErCpC,KAAKsJ,aAAalC,IACd,CAACmD,EAAKI,IAAOJ,EAAIK,UAAY+C,EAAUhD,UAnCjC,CAClB,MAAMiD,EAAMxB,EAAEsB,SAAW,GAAK,EACxBG,EACFlB,GAAgBM,EAAYW,GAAOA,GACjCE,EAAQnP,EAAAoP,oBACVF,EACAT,GAGAU,IACAnO,EAAMiL,UACe,iBAAVkD,EACDA,EACAnP,EAAAqP,aAAaH,IA4B/B7N,KAAK8K,WAAWnL,GAChB2B,EAAkB3C,EAAAsP,UAAUjO,KAAKsJ,aAAclH,IAEnD,OAGR,MAAM8L,EAAYvP,EAAA0O,aAAa1N,EAAO,cAChCwO,EAAYxP,EAAA0O,aAAa1N,EAAO,cAChCoK,EAAOpL,EAAAyP,mBAAmBhC,EAAEQ,SAC5ByB,EAAaH,IAAc1B,EAAe0B,EAAYnE,EAAOA,EAEnE,GAAIrB,EAAe4F,SAASlC,EAAEQ,UAAYR,EAAEmC,SAAWnC,EAAEoC,QACrD,OAGJ,MAAMV,EAAQnP,EAAAoP,oBAAoBM,EAAYF,GAEzCL,EAEuB,iBAAVA,IACd1B,EAAEW,iBAEFpN,EAAMiL,UAAYkD,GAJlB1B,EAAEW,iBAOFP,GAKA5B,EAAU3E,QAAUkI,EAAUlI,QAC9BmG,EAAEW,iBAIFjN,QAAQsM,GACZ,MAAM9K,kBACFA,EAAAc,OACAA,EAAAvB,gBACAA,EAAA2E,SACAA,EAAAb,SACAA,GACA3E,KAAKR,MACHG,EAAQyM,EAAEC,eACVzB,UAAEA,EAAA0B,YAAWA,EAAAC,gBAAaA,GAAoB5M,EAEpD,GAAIyM,EAAEQ,UAAYjO,EAAAgK,KAAKkE,MAOnB,OANAT,EAAEW,iBAEE/M,KAAKkK,SACLlK,KAAKkK,QAAQuE,YAEjBjJ,IAIA4G,EAAEQ,UAAYjO,EAAAgK,KAAKmE,KAMnBV,EAAEQ,UAAYjO,EAAAgK,KAAKC,UACfgC,EACAjL,EAAMiL,UAAY,GACX2B,aAA2BS,iBAClChN,KAAK8K,WAAWyB,GAMpB3B,EAAU3E,QAAUtH,EAAA0O,aAAa1N,EAAO,cAAcsG,SACrD8C,EAAeuF,SAASlC,EAAEQ,WAEvB/L,IAAoByL,EACpBtM,KAAK8K,WAAWnL,GACT2M,aAAuBU,iBAC9BhN,KAAK8K,WAAWwB,GAGpBhL,EAAkB3C,EAAAsP,UAAUjO,KAAKsJ,aAAclH,KAGnDzC,EAAM+O,aAAa,aAAc/O,EAAMiL,YA3BnCjG,IA8BA7E,QAAQsM,GACZpM,KAAK8K,WAAWsB,EAAEC,eAGdvM,QAAQsM,GACZ,MAAMzM,EAAQyM,EAAEuC,OACVC,EAAqBjQ,EAAA0O,aAAa1N,EAAO,cAE/CK,KAAK8K,WAAWsB,EAAEC,eAElBrM,KAAKY,SAAS,CAAEgO,mBAAAA,IAGZ9O,OAAOsM,GACX,MAAMzM,EAAQyM,EAAEuC,OACVpO,EAAQZ,EAAMiL,UACduD,EAAYxP,EAAA0O,aAAa1N,EAAO,cAGhCkP,EAAW,KACb,MAAMjE,MAAgBrK,IAEtBZ,EAAMiL,UAAYA,EAClBjL,EAAM+O,aAAa,aAAc9D,IAGrC,OATmBjM,EAAA4O,cAAcY,IAU7B,IAAK,MACa,MAAV5N,GAA2B,MAAVA,GAA2B,MAAVA,GAClCsO,IAEJ,MACJ,IAAK,QACa,MAAVtO,GACAsO,IAMZvO,WAAW,KACP,MAAM4J,QAAEA,GAAYlK,KAGhBA,KAAKR,MAAMkF,MACXwF,IACCvL,EAAA0O,aAAanD,EAAS,mCAEvBlK,KAAKR,MAAMmF,YAEhB,GAGC7E,SAASsM,GACb,MAAMhK,OAAEA,EAAAd,kBAAQA,GAAsBtB,KAAKR,MACrCG,EAAQyM,EAAEC,eACVzB,UAAEA,EAAA0B,YAAWA,GAAgB3M,EAEnC2B,EAAkB3C,EAAAsP,UAAUjO,KAAKsJ,aAAclH,IAE3CwI,EAAU3E,QAAUtH,EAAA0O,aAAa1N,EAAO,cAAcsG,QAClDqG,aAAuBU,iBACvBV,EAAYzB,QAKhB/K,QAAQsM,GACZA,EAAE0C,kBAEF9O,KAAKR,MAAM2C,UAGPrC,SAASsM,GACb,MAAM1H,KAAEA,EAAA7B,SAAMA,EAAA8B,SAAUA,GAAa3E,KAAKR,MAEtCqD,GAIC7C,KAAKsJ,aAAagB,KAAKC,GAAOA,IAAQ6B,EAAEuC,SAAYjK,GACrDC,6ECxlBZ,MAAAxG,EAAAC,EAAAC,EAAA,SACA4J,EAAA7J,EAAAC,EAAA,GAOaQ,EAAAoM,YAAczL,CAAAA,GACvBrB,EAAAqG,cAACyD,EAAAD,YAAW,CACRvF,UAAU,uBACVI,SAAUrD,EAAMqD,SAChBuI,UAAW,GAEV5L,EAAMkF,KAAO,IAAM,6ECd5B,MAAAwD,EAAA9J,EAAAC,EAAA,GAsC6BQ,EAAAK,8BAtCpBgJ,EAAA6G,wFCAT,MAAA5Q,EAAAC,EAAAC,EAAA,SACAK,EAAAN,EAAAC,EAAA,GAQAM,EAAAP,EAAAC,EAAA,GACA6J,EAAA9J,EAAAC,EAAA,GAYAQ,EAAAgH,WAAA,cAAgC1H,EAAMkL,cAClCvJ,YAAYN,GACRO,MAAMP,GAENQ,KAAKmC,QAAUnC,KAAKmC,QAAQZ,KAAKvB,MACjCA,KAAKyJ,QAAUzJ,KAAKyJ,QAAQlI,KAAKvB,MAG9BF,oBACHqK,SAAS6E,KAAKC,iBAAiB,QAASjP,KAAKyJ,SAG1C3J,uBACHqK,SAAS6E,KAAKE,oBAAoB,QAASlP,KAAKyJ,SAG7C3J,SACH,MAAMoE,YAAEA,EAAA3D,MAAaA,EAAAmE,KAAOA,GAAS1E,KAAKR,MACpCwL,EAAkBhL,KAAKR,MAAMmG,sBAAwBuC,EAAA+C,YACrDC,EAAkBhH,IAAgBQ,EAExC,OACIvG,EAAAqG,cAAC9F,EAAAU,UAAS,CAAA2I,YACI,QACVtF,UAAU,wCACViH,QAAS1J,KAAKR,MAAMmF,UAEpBxG,EAAAqG,cAAC9F,EAAAyJ,KAAI,KACDhK,EAAAqG,cAAC9F,EAAA8J,KAAI,CAAC/F,UAAU,sBAAsBgG,KAAK,OAC3CtK,EAAAqG,cAAC9F,EAAAyJ,KAAI,KACAnI,KAAKgF,cACLkG,GACG/M,EAAAqG,cAAC9F,EAAA6J,YAAW,CAAC9F,UAAU,8BAClByB,KAKjB/F,EAAAqG,cAAC9F,EAAAyJ,KAAI,KACA5H,GACGpC,EAAAqG,cAAC9F,EAAA4J,YAAW,CACR7F,UAAU,yBACV2I,UAAW,EACX1B,QAAS1J,KAAKmC,SAAO,KAK7BhE,EAAAqG,cAACwG,EAAe,QAMxBlL,cACJ,MAAMS,MAAEA,GAAUP,KAAKR,MAEvB,OAAKe,EAIEA,EAAM6G,IAAItD,GAAKnF,EAAA0E,WAAWS,EAAG,eAAehB,KAAK,OAH7C,KAMPhD,QAAQsM,GACZA,EAAE0C,kBAEF9O,KAAKR,MAAM2C,UAGPrC,QAAQsM,GACZ,MAAM1H,KAAEA,EAAAC,SAAMA,GAAa3E,KAAKR,MAEhC,OAAQ4M,EAAEQ,SACN,KAAKjO,EAAAgK,KAAKmE,IACFpI,GACAC","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n} from './typings';\nimport { ValueMulti } from './value-multi';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n\n        return {\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'month',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange\n        } = this.state;\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={Math.max(\n                                        ReactTimebomb.MENU_WIDTH,\n                                        menuWidth || 0\n                                    )}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                disabled={disabled}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState);\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","// @ts-ignore\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n    margin-right: 5px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n    padding: 3px 6px;\n    min-height: 21px;\n    box-sizing: border-box;\n    background: ${(props: { selected?: boolean }) =>\n        props.selected ? '#ccc' : '#fff'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    &:not(:disabled) {\n        cursor: pointer;\n    }\n\n    &:not(:disabled):hover {\n        background-color: ${(props: { selected?: boolean }) =>\n            props.selected ? '#ccc' : '#efefef'};\n    }\n\n    &:last-child {\n        margin-right: 0;\n    }\n`;\n\nexport const Button = (\n    props: { selected?: boolean } & React.ButtonHTMLAttributes<{}>\n) => (\n    <StyledButton\n        data-react-timebomb-selectable\n        data-role=\"button\"\n        type=\"button\"\n        {...props}\n    />\n);\n\nexport const SmallButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover:not(:disabled) {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { SmallButton } from './button';\nimport { ArrowButton } from './arrow-button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    currentFormatGroup?: string;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.searchInputs[0];\n\n                    this.searchInputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const input = this.searchInputs[0];\n\n                    if (input) {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp disabled={disabled} open={open} />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable={!disabled}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = e.shiftKey ? 10 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            allowValidation,\n            onSubmit,\n            onToggle\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        // focus prev\n        if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                this.selectText(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !FORBIDDEN_KEYS.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', input.innerText);\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const currentFormatGroup = getAttribute(input, 'data-group');\n\n        this.selectText(e.currentTarget);\n\n        this.setState({ currentFormatGroup });\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n","import * as React from 'react';\nimport { SmallButton } from './button';\n\nexport interface ArrowButtonProps {\n    open?: boolean;\n    disabled?: boolean;\n}\n\nexport const ArrowButton = (props: ArrowButtonProps) => (\n    <SmallButton\n        className=\"react-timebomb-arrow\"\n        disabled={props.disabled}\n        tabIndex={-1}\n    >\n        {props.open ? '▲' : '▼'}\n    </SmallButton>\n);\n","import { ArrowButtonProps } from './arrow-button';\n\nexport type ReactTimebombDate = Date | undefined | Date[];\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectWeek?: boolean;\n    selectRange?: boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: boolean;\n    arrowButtonComponent?: React.ComponentType<ArrowButtonProps>;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n}\n\nexport interface ReactTimebombState {\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode: 'year' | 'months' | 'month';\n    showDate?: boolean;\n    showTime?: boolean;\n    selectedRange: number;\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\n\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n","import * as React from 'react';\nimport {\n    Container,\n    Flex,\n    Icon,\n    ValueProps,\n    Placeholder,\n    ClearButton\n} from './value';\nimport { dateFormat, keys } from './utils';\nimport { ArrowButton } from './arrow-button';\n\ninterface MultiValueProps {\n    value: undefined | Date[];\n    placeholder: ValueProps['placeholder'];\n    open: ValueProps['open'];\n    arrowButtonComponent: ValueProps['arrowButtonComponent'];\n    disabled: ValueProps['disabled'];\n    onToggle(): void;\n    onClear(): void;\n}\n\nexport class ValueMulti extends React.PureComponent<MultiValueProps> {\n    constructor(props: MultiValueProps) {\n        super(props);\n\n        this.onClear = this.onClear.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n    }\n\n    public componentDidMount() {\n        document.body.addEventListener('keyup', this.onKeyUp);\n    }\n\n    public componentWillUnmount() {\n        document.body.removeEventListener('keyup', this.onKeyUp);\n    }\n\n    public render() {\n        const { placeholder, value, open } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.props.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" icon=\"📅\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <ArrowButtonComp />\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue() {\n        const { value } = this.props;\n\n        if (!value) {\n            return null;\n        }\n\n        return value.map(d => dateFormat(d, 'DD.MM.YYYY')).join(' – ');\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onKeyUp(e: KeyboardEvent) {\n        const { open, onToggle } = this.props;\n\n        switch (e.keyCode) {\n            case keys.ESC:\n                if (open) {\n                    onToggle();\n                }\n                break;\n        }\n    }\n}\n"]}