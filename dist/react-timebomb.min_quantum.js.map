{"version":3,"sources":["src/index.tsx","src/button.tsx","src/value.tsx","src/arrow-button.tsx","src/value-multi.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","minDate","maxDate","selectRange","showConfirm","isBefore","Error","this","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","format","showTime","isTimeFormat","showDate","isDateFormat","className","classNames","push","error","join","defaultDateValue","value","date","Date","isAfter","startOfDay","allowValidation","mode","valueText","dateFormat","undefined","selectedRange","prevProps","prevState","setState","valueTextDidUpdate","commit","validDate","validateDate","isArray","every","d","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showCalendarWeek","selectWeek","MENU_HEIGHT","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","showMenu","ref","renderValue","Math","max","MENU_WIDTH","MenuTitle","onMonths","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","clearSelection","setTimeout","onError","onChange","dateEqual","Boolean","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps","StyledButton","button","selected","Button","Object","assign","data-react-timebomb-selectable","data-role","SmallButton","button_1","arrow_button_1","Flex","Input","span","ClearButton","Placeholder","Icon","icon","WHITELIST_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","PureComponent","searchInputs","onSearchRef","onKeyDown","onKeyUp","onClick","onBlur","formatGroups","reduce","memo","char","prevChar","substr","focused","document","querySelector","iconClass","some","inp","parts","splitDate","forEach","i","innerText","focus","selectText","forceUpdate","ArrowButtonComp","ArrowButton","showPlaceholder","timeOnly","tabIndex","group","separator","contentEditable","data-placeholder","data-separator","key","data-group","el","range","createRange","sel","getSelection","selectNodeContents","removeAllRanges","addRange","e","currentTarget","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","keyCode","ENTER","ESC","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatGroup","getAttribute","formatType","getFormatType","direction","manipulateDate","shiftKey","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataValue","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","blur","setAttribute","target","currentFormatGroup","fillZero","stopPropagation","body","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate\n} from './typings';\nimport { ValueMulti } from './value-multi';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n\n        return {\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'month',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange\n        } = this.state;\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate;\n\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={Math.max(\n                                        ReactTimebomb.MENU_WIDTH,\n                                        menuWidth || 0\n                                    )}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            format,\n            selectRange,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState);\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange(date: ReactTimebombDate, commit: boolean): void {\n        const { value, showConfirm, onChange } = this.props;\n\n        if (!showConfirm) {\n            commit = true;\n        }\n\n        if (dateEqual(value, date)) {\n            return;\n        }\n\n        if (commit) {\n            if (isArray(date)) {\n                onChange(...date);\n            } else {\n                onChange(date);\n            }\n        }\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","// @ts-ignore\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n    margin-right: 5px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n    padding: 3px 6px;\n    min-height: 21px;\n    box-sizing: border-box;\n    background: ${(props: { selected?: boolean }) =>\n        props.selected ? '#ccc' : '#fff'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    &:not(:disabled) {\n        cursor: pointer;\n    }\n\n    &:not(:disabled):hover {\n        background-color: ${(props: { selected?: boolean }) =>\n            props.selected ? '#ccc' : '#efefef'};\n    }\n\n    &:last-child {\n        margin-right: 0;\n    }\n`;\n\nexport const Button = (\n    props: { selected?: boolean } & React.ButtonHTMLAttributes<{}>\n) => (\n    <StyledButton\n        data-react-timebomb-selectable\n        data-role=\"button\"\n        type=\"button\"\n        {...props}\n    />\n);\n\nexport const SmallButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { SmallButton } from './button';\nimport { ArrowButton } from './arrow-button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    currentFormatGroup?: string;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.searchInputs[0];\n\n                    this.searchInputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const input = this.searchInputs[0];\n\n                    if (input) {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, showDate, showTime, open } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && <ArrowButtonComp open={open} />}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = e.shiftKey ? 10 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            allowValidation,\n            onSubmit,\n            onToggle\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        // focus prev\n        if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                this.selectText(previousSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        // focus next\n        else if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !FORBIDDEN_KEYS.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', input.innerText);\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const currentFormatGroup = getAttribute(input, 'data-group');\n\n        this.selectText(e.currentTarget);\n\n        this.setState({ currentFormatGroup });\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n","import * as React from 'react';\nimport { SmallButton } from './button';\n\nexport interface ArrowButtonProps {\n    open?: boolean;\n}\n\nexport const ArrowButton = (props: ArrowButtonProps) => (\n    <SmallButton className=\"react-timebomb-arrow\" tabIndex={-1}>\n        {props.open ? '▲' : '▼'}\n    </SmallButton>\n);\n","import * as React from 'react';\nimport {\n    Container,\n    Flex,\n    Icon,\n    ValueProps,\n    Placeholder,\n    ClearButton\n} from './value';\nimport { dateFormat, keys } from './utils';\nimport { ArrowButton } from './arrow-button';\n\ninterface MultiValueProps {\n    value: undefined | Date[];\n    placeholder: ValueProps['placeholder'];\n    open: ValueProps['open'];\n    arrowButtonComponent: ValueProps['arrowButtonComponent'];\n    onToggle(): void;\n    onClear(): void;\n}\n\nexport class ValueMulti extends React.PureComponent<MultiValueProps> {\n    constructor(props: MultiValueProps) {\n        super(props);\n\n        this.onClear = this.onClear.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n    }\n\n    public componentDidMount() {\n        document.body.addEventListener('keyup', this.onKeyUp);\n    }\n\n    public componentWillUnmount() {\n        document.body.removeEventListener('keyup', this.onKeyUp);\n    }\n\n    public render() {\n        const { placeholder, value, open } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.props.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" icon=\"📅\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <ArrowButtonComp />\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue() {\n        const { value } = this.props;\n\n        if (!value) {\n            return null;\n        }\n\n        return value.map(d => dateFormat(d, 'DD.MM.YYYY')).join(' – ');\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onKeyUp(e: KeyboardEvent) {\n        const { open, onToggle } = this.props;\n\n        switch (e.keyCode) {\n            case keys.ESC:\n                if (open) {\n                    onToggle();\n                }\n                break;\n        }\n    }\n}\n"]}