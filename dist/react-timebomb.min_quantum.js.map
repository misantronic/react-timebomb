{"version":3,"sources":["src/index.tsx","src/utils.ts","src/value/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","value_multi_1","__export","Container","default","div","MenuWrapper","props","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","valueRef","createRef","emitChange","timeout","date","clearTimeout","setTimeout","__awaiter","value","onChange","dateEqual","isArray","setStateAsync","allowValidation","Boolean","preventClose","minDate","maxDate","isBefore","console","error","state","initialState","onChangeValueText","bind","emitChangeAndClose","onSelectDay","onModeDay","onModeYear","onModeMonth","onChangeMonth","onChangeYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onHoverDays","onMultiValueSelect","onPaste","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","hoverDate","menuHeight","selectedRange","prevProps","prevState","selectRange","showConfirm","setState","stringEqual","result","validateValueText","emitError","rangeIsComplete","length","Promise","resolve","validDate","validateDate","some","d","isEnabled","isUndefined","placeholder","showCalendarWeek","timeStep","confirmComponent","onOpen","menuWidth","Math","max","MENU_WIDTH","menuLeft","current","getBoundingClientRect","left","width","createElement","Select","open","onToggle","onRef","showMenu","onClick","onCloseMenu","onOpenMenu","getMobileMenuContainer","ref","renderValue","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","clearComponent","labelComponent","isMulti","ValueComponent","ValueMulti","Value","componentValue","sort","a","b","getTime","onAllSelect","onValueSelect","clearSelection","onError","newDate","date0","date1","index","Object","assign","valueText0","day","valueDate","startOfWeek","endOfWeek","addDays","setDate","getHours","getMinutes","dateArr","getSelectedRange","sortDates","currentDate","setMonth","getMonth","time","commit","map","text","e","target","HTMLDivElement","classList","contains","exports","defaultProps","moment_1","momentImport","moment","test","validateFormatType","formatType","isFinite","int","parseInt","char","String","strLen","startsWith","formatSplitExpr","dates","instance","isValid","toDate","filter","is24HoursFormat","getMeridiem","matcher","match","formatIsActualNumber","validateFormatGroup","ALLOWED_CHARS","setHours","num","add","addMonths","addMinutes","subtractDays","subtract","subtractMonths","stringFromCharCode","keyCode","charCode","floor","fromCharCode","includes","formatNumber","number","formatNumberRaw","Number","splitDate","split","group","joinDates","parts","strParts","part","HTMLElement","innerText","val","splittedFormat","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","sel","getSelection","empty","removeAllRanges","selectElement","el","caret","range","document","createRange","selectNodeContents","start","end","setStart","setEnd","addRange","getWeekOfYear","isoWeek","startOf","endOf","addHours","subtractHours","manipulateDate","dateA","isSame","dateB","isToday","inp","isSameOrAfter","context","cmpDateA","cmpDateB","isBetween","getAttribute","attr","isDayFormat","replaceSpaceWithNbsp","str","replace","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","DOT","COMMA","button_1","Flex","Input","span","ClearButton","SmallButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","getIcon","DefaultClearComponent","tabIndex","META_KEYS","FORBIDDEN_KEYS","PureComponent","inputs","mounted","currentTarget","allSelected","formatGroup","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","formatGroups","reduce","memo","prevChar","substr","focused","querySelector","firstInput","i","s","findIndex","hasFocus","allowTextSelection","forEach","focus","find","forceUpdate","ArrowButtonComp","ArrowButton","ClearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","data-role","innerRef","id","LabelComponent","contentEditable","g","separator","hasFormatType","data-react-timebomb-selectable","data-placeholder","data-separator","key","data-group","onDoubleClick","nextSibling","previousSibling","numericFormat","hasSelection","focusOffset","anchorOffset","numericValue","preventDefault","HTMLSpanElement","isArrowUp","isNaN","direction","dateParts","nextValue","valid","groupValue","metaKey","ctrlKey","validatedChar","dataGroup","blur","parentNode","filledValue","fillZero","clipboardData","getData","stopPropagation","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType,\n    addDays,\n    stringEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport * from './typings';\n\ninterface MenuWrapperProps {\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n\n    private onToggle?: () => void;\n    private onCloseMenu?: () => void;\n    private onOpenMenu?: () => void;\n    private MobileMenuContainer?: React.ComponentType<MenuContainerProps>;\n    private valueRef = React.createRef<HTMLDivElement>();\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentType<MenuContainerProps>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            hoverDate: undefined,\n            menuHeight: 'auto',\n            selectedRange: 0,\n            preventClose: false\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            console.error(\n                '[react-timebomb]: minDate must appear before maxDate'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.emitChangeAndClose = this.emitChangeAndClose.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onChangeYear = this.onChangeYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onHoverDays = this.onHoverDays.bind(this);\n        this.onMultiValueSelect = this.onMultiValueSelect.bind(this);\n        this.onPaste = this.onPaste.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public async componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ) {\n        const { valueText, showDate, showTime, preventClose } = this.state;\n        const { value, format, selectRange, showConfirm } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (!stringEqual(prevState.valueText, valueText)) {\n            const result = await this.validateValueText();\n\n            if (result.error) {\n                this.emitError(result.error, result.valueText);\n            }\n\n            if (result.date) {\n                const rangeIsComplete =\n                    selectRange &&\n                    isArray(result.date) &&\n                    result.date.length === 2;\n\n                if (\n                    (!showConfirm && !selectRange && showDate) ||\n                    rangeIsComplete\n                ) {\n                    if (prevState.mode === 'day' && !preventClose) {\n                        this.emitChangeAndClose(result.date);\n                    } else {\n                        this.emitChange(result.date);\n                    }\n                }\n\n                if (!showDate && showTime) {\n                    this.emitChange(result.date);\n                }\n            }\n        }\n    }\n\n    private setStateAsync(state: Partial<ReactTimebombState>) {\n        return new Promise(resolve => {\n            this.setState(state as any, resolve);\n        });\n    }\n\n    private validateValueText(): Promise<{\n        date?: ReactTimebombDate;\n        error?: ReactTimebombError;\n        valueText?: string | string[];\n    }> {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        return new Promise(async resolve => {\n            if (validDate) {\n                await this.setStateAsync({ allowValidation: true });\n\n                const enabled = isArray(validDate)\n                    ? validDate.some(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    await this.setStateAsync({ date: validDate });\n\n                    resolve({ date: validDate });\n                } else {\n                    resolve({ error: 'outOfRange', valueText });\n                }\n            } else if (valueText) {\n                resolve({ error: 'invalidDate', valueText });\n            } else if (!isUndefined(valueText) && allowValidation) {\n                resolve({ date: undefined });\n            }\n        });\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            confirmComponent,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate,\n            hoverDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuLeft =\n            isArray(value) &&\n            value.length === 1 &&\n            this.valueRef.current &&\n            selectRange === true\n                ? this.valueRef.current.getBoundingClientRect().left +\n                  this.valueRef.current.getBoundingClientRect().width -\n                  menuWidth\n                : undefined;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({\n                    placeholder,\n                    open,\n                    onToggle,\n                    onClose,\n                    onOpen,\n                    onRef,\n                    MenuContainer\n                }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n                    const className = [this.className];\n                    const onClick = mobile\n                        ? this.onMobileMenuContainerClick\n                        : undefined;\n\n                    if (showMenu) {\n                        className.push('open');\n                    }\n\n                    this.onToggle = onToggle;\n                    this.onCloseMenu = onClose;\n                    this.onOpenMenu = onOpen;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={className.join(' ')}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuLeft={menuLeft}\n                                    menuWidth={menuWidth}\n                                    menuHeight={this.state.menuHeight}\n                                    onClick={onClick}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            hoverDate={hoverDate}\n                                            confirmComponent={confirmComponent}\n                                            onHoverDays={this.onHoverDays}\n                                            onSelectDay={this.onSelectDay}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onChangeYear={this.onChangeYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.emitChangeAndClose}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId,\n            clearComponent,\n            labelComponent\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            allowValidation,\n            mode,\n            hoverDate\n        } = this.state;\n        const isMulti = selectRange || isArray(value);\n        const ValueComponent = isMulti ? ValueMulti : Value;\n\n        let componentValue = isMulti\n            ? value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined\n            : value;\n\n        if (\n            isArray(componentValue) &&\n            componentValue.length === 1 &&\n            hoverDate\n        ) {\n            componentValue = [...componentValue, hoverDate].sort(\n                (a, b) => a.getTime() - b.getTime()\n            );\n        }\n\n        placeholder = open && !isMulti ? undefined : placeholder;\n\n        return (\n            <ValueComponent\n                ref={this.valueRef}\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                selectRange={selectRange}\n                value={componentValue as any}\n                hoverDate={hoverDate}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                clearComponent={clearComponent}\n                labelComponent={labelComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle}\n                onSubmit={this.emitChangeAndClose}\n                onAllSelect={this.onModeDay}\n                onValueSelect={this.onMultiValueSelect}\n                onPaste={this.onPaste}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        // get rid of this timeout\n        // fixme\n        setTimeout(async () => {\n            clearSelection();\n\n            await this.setStateAsync(this.initialState);\n\n            if (this.props.onClose) {\n                this.props.onClose();\n            }\n        }, 16);\n    }\n\n    private async emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ) {\n        if (this.state.allowValidation) {\n            await this.setStateAsync({ allowValidation: false });\n\n            if (this.props.onError) {\n                this.props.onError(error, value);\n            }\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(async () => {\n                const { value, onChange } = this.props;\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                const changeDate = isArray(date) ? date : [date];\n\n                onChange(...changeDate);\n\n                await this.setStateAsync({\n                    allowValidation: Boolean(date),\n                    preventClose: false\n                });\n            }, 0);\n        };\n    })();\n\n    private async emitChangeAndClose(newDate?: ReactTimebombDate) {\n        if (this.onCloseMenu) {\n            this.onCloseMenu();\n        }\n        clearSelection();\n\n        const { date } = newDate\n            ? { date: newDate }\n            : await this.validateValueText();\n\n        if (date) {\n            this.emitChange(date);\n        }\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private async onClear() {\n        await this.setStateAsync({ valueText: undefined });\n\n        this.emitChange(undefined);\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText, preventClose: true });\n    }\n\n    private async onChangeFormatGroup(format?: string) {\n        await this.setStateAsync({\n            menuHeight: 'auto',\n            mode: format ? getFormatType(format) : undefined\n        });\n    }\n\n    private onHoverDays([date0, date1]: (Date | undefined)[]) {\n        const hoverDate = date1 || date0;\n\n        if (\n            isArray(this.state.valueText) &&\n            isArray(this.state.date) &&\n            this.state.valueText.length === 1 &&\n            this.state.date.length === 1 &&\n            hoverDate\n        ) {\n            this.setState({ hoverDate });\n        }\n    }\n\n    private async onMultiValueSelect(date: Date, index: number) {\n        if (index === 0) {\n            await this.setStateAsync({ ...this.initialState, hoverDate: date });\n        }\n\n        if (\n            index === 1 &&\n            isArray(this.state.valueText) &&\n            isArray(this.state.date)\n        ) {\n            const [valueText0] = this.state.valueText;\n            const [date0] = this.state.date;\n\n            await this.setStateAsync({\n                ...this.initialState,\n                valueText: [valueText0],\n                date: [date0],\n                hoverDate: date\n            });\n        }\n\n        // since closing of the menu is delayed (16ms), we need to deplay the opening as well\n        // fixme\n        setTimeout(async () => {\n            if (this.onOpenMenu) {\n                this.onOpenMenu();\n            }\n\n            await this.setStateAsync({ hoverDate: date });\n        }, 32);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, selectRange } = this.props;\n        const format = this.props.format!;\n\n        const valueDate = (() => {\n            if (value instanceof Date) {\n                return value;\n            }\n\n            if (isArray(value)) {\n                return value[0];\n            }\n\n            return day;\n        })();\n\n        if (selectRange === 'week') {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (typeof selectRange === 'number') {\n            const date = [day, addDays(day, selectRange - 1)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (selectRange === true) {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(this.state.valueText[0], format) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format);\n\n            this.setState({\n                date: dateArr,\n                valueText,\n                selectedRange,\n                hoverDate: undefined\n            });\n        } else {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onChangeYear(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private async onSelectTime(time: Date, mode: FormatType, commit = false) {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        await this.setStateAsync({ mode, valueText });\n\n        if (commit) {\n            this.emitChange(newDate);\n        }\n    }\n\n    private onPaste(text: string) {\n        const date = validateDate(text, this.props.format!);\n\n        if (date instanceof Date) {\n            this.onSelectDay(date);\n        }\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\nimport { ReactTimebombDate, FormatType } from './typings';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\n\nexport const formatSplitExpr = /[.|:|\\-|\\\\|_|\\/|\\s]/;\n\nexport function dateFormat(date: Date, format: string): string;\nexport function dateFormat(date: Date[], format: string): string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[] {\n    if (isArray(date)) {\n        return date.map(date => moment(date).format(format));\n    } else {\n        return moment(date).format(format);\n    }\n}\n\nexport function validateDate(\n    date: string | string[] | undefined,\n    format: string\n): ReactTimebombDate {\n    if (isArray(date)) {\n        const dates = date\n            .map(date => {\n                const instance = moment(date, format, true);\n\n                return instance.isValid() ? instance.toDate() : undefined;\n            })\n            .filter(d => Boolean(d)) as Date[];\n\n        return dates.length === 0 ? undefined : dates;\n    } else {\n        const instance = moment(date, format, true);\n\n        return instance.isValid() ? instance.toDate() : undefined;\n    }\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/^D/.test(format)) {\n        return 'day';\n    }\n\n    if (/^M/.test(format)) {\n        return 'month';\n    }\n\n    if (/^Y/.test(format)) {\n        return 'year';\n    }\n\n    if (/^h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/^m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/^s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\nexport function is24HoursFormat(format?: string): boolean {\n    if (!format) {\n        return false;\n    }\n\n    return /H|k/.test(format);\n}\n\nexport function getMeridiem(format?: string) {\n    if (!format) {\n        return undefined;\n    }\n\n    const matcher = format.match(/\\s+([aAp])$/);\n\n    if (matcher) {\n        return matcher[1];\n    }\n\n    return undefined;\n}\n\nexport function formatIsActualNumber(format: string) {\n    // day / year\n    if (/D|Y|H|h|m|s/.test(format)) {\n        return true;\n    }\n\n    // month\n    if (format === 'M' || format === 'MM') {\n        return true;\n    }\n\n    return false;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    const formatType = getFormatType(format);\n\n    return validateFormatType(input, formatType);\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatType(\n    input: string | number,\n    formatType?: FormatType\n) {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n\n        switch (formatType) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nconst ALLOWED_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n    const char = String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n\n    if (ALLOWED_CHARS.includes(char)) {\n        return char;\n    }\n\n    return '';\n}\n\nexport function formatNumber(number: number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function formatNumberRaw(number: number): string {\n    if (number <= 9) {\n        return `0${Number(number) || 0}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    const formattedDate = dateFormat(date, format);\n\n    return formattedDate\n        .split(formatSplitExpr)\n        .filter(group => group && formatSplitExpr.test(group) === false);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplitExpr);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel) {\n        if (sel.empty) {\n            // Chrome\n            sel.empty();\n        } else if (sel.removeAllRanges) {\n            // Firefox\n            sel.removeAllRanges();\n        }\n    }\n}\n\nexport function selectElement(\n    el: HTMLElement | undefined,\n    caret?: number[]\n): void {\n    if (el) {\n        const range = document.createRange();\n        const sel = getSelection();\n\n        if (caret === undefined) {\n            range.selectNodeContents(el);\n        } else {\n            const [start, end] = caret;\n\n            range.setStart(el, start);\n            range.setEnd(el, end);\n        }\n\n        if (sel) {\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract',\n    timeStep?: number\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractMinutes(date, timeStep || 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractSeconds(date, timeStep || 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isSameDay(dateA: Date, dateB: Date): boolean {\n    return moment(dateA).isSame(dateB, 'day');\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function isBetween(\n    date: Date,\n    cmpDateA?: Date,\n    cmpDateB?: Date,\n    context: momentImport.unitOfTime.StartOf = 'day'\n) {\n    return moment(date).isBetween(cmpDateA, cmpDateB, context, '[]');\n}\n\nexport function dateEqual(\n    dateA?: ReactTimebombDate,\n    dateB?: ReactTimebombDate,\n    considerTime = false\n) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    if (considerTime) {\n        if (isArray(dateA)) {\n            dateA = dateA.map(startOfDay);\n        } else {\n            dateA = startOfDay(dateA);\n        }\n\n        if (isArray(dateB)) {\n            dateB = dateB.map(startOfDay);\n        } else {\n            dateB = startOfDay(dateB);\n        }\n    }\n\n    if (isArray(dateA) && isArray(dateB)) {\n        return dateA.every((date, i) => {\n            const dBi = dateB![i];\n\n            if (date && dBi) {\n                return date.getTime() === dBi.getTime();\n            }\n\n            return false;\n        });\n    } else if (isArray(dateA) && dateB instanceof Date) {\n        return dateA.some(d => d.getTime() === (dateB as Date).getTime());\n    } else if (isArray(dateB) && dateA instanceof Date) {\n        return dateB.some(d => d.getTime() === (dateA as Date).getTime());\n    } else if (!isArray(dateA) && !isArray(dateB)) {\n        return dateA.getTime() === dateB.getTime();\n    }\n\n    return false;\n}\n\nexport function stringEqual(\n    valueA?: string | string[],\n    valueB?: string | string[]\n): boolean {\n    if (valueA === valueB) {\n        return true;\n    }\n\n    if (!valueA || !valueB) {\n        return false;\n    }\n\n    if (isArray(valueA) && isArray(valueB) && valueA.length === valueB.length) {\n        return valueA.every((val, i) => val === valueB[i]);\n    }\n\n    return false;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function getWeekdayNames() {\n    return moment.weekdaysShort();\n}\n\nexport function isEnabled(\n    context: momentImport.unitOfTime.StartOf,\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return isBetween(date, minDate, maxDate, context);\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport function isDayFormat(format: string) {\n    return Boolean(/d/i.test(format));\n}\n\nexport function isDateFormat(format: string) {\n    return Boolean(/D|M|Y/.test(format));\n}\n\nexport function isTimeFormat(format: string) {\n    return Boolean(/H|h|m|k|a|S|s/.test(format));\n}\n\nexport function sortDates(a: Date, b: Date) {\n    return a.getTime() - b.getTime();\n}\n\nexport function isArray(val: any): val is any[] {\n    return Array.isArray(val);\n}\n\nexport function fillZero(value: string | number, formatType: FormatType) {\n    value = String(value);\n\n    switch (formatType) {\n        case 'day':\n            if (value === '1' || value === '2' || value === '3') {\n                return `0${value}`;\n            }\n            break;\n        case 'month':\n            if (value === '1') {\n                return `0${value}`;\n            }\n            break;\n    }\n\n    return undefined;\n}\n\nexport function replaceSpaceWithNbsp(str?: string) {\n    if (!str) {\n        return str;\n    }\n\n    return str.replace(/ /g, ' ');\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    DOT: 190,\n    COMMA: 188\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton, SmallButton } from '../components/button';\nimport {\n    ClearComponentProps,\n    IconProps,\n    ReactTimebombValueProps\n} from '../typings';\nimport {\n    clearSelection,\n    fillZero,\n    formatIsActualNumber,\n    formatNumber,\n    formatSplitExpr,\n    getAttribute,\n    getFormatType,\n    isEnabled,\n    joinDates,\n    keys,\n    manipulateDate,\n    replaceSpaceWithNbsp,\n    selectElement,\n    splitDate,\n    stringFromCharCode,\n    validateFormatGroup,\n    validateFormatType,\n    isDayFormat\n} from '../utils';\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = (props: ClearComponentProps) => (\n    <ClearButton\n        className=\"react-timebomb-clearer\"\n        tabIndex={-1}\n        disabled={props.disabled}\n        onClick={props.onClick}\n    >\n        <ClearButtonX>×</ClearButtonX>\n    </ClearButton>\n);\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nclass ValueComponent extends React.PureComponent<\n    ReactTimebombValueProps,\n    ValueState\n> {\n    private inputs: HTMLSpanElement[] = [];\n    private mounted = false;\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get firstInput() {\n        const formatParts = this.props\n            .format!.split(formatSplitExpr)\n            .filter(s => Boolean(s));\n        const i = formatParts.findIndex(isDayFormat);\n\n        return this.inputs[i === -1 ? 0 : i];\n    }\n\n    constructor(props: ReactTimebombValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onPaste = this.onPaste.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ReactTimebombValueProps): void {\n        setTimeout(() => {\n            if (!this.mounted) {\n                return;\n            }\n\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    const { firstInput } = this;\n\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (firstInput && allowTextSelection) {\n                            firstInput.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            if (firstInput) {\n                                selectElement(firstInput);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        this.mounted = true;\n\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                ref={this.props.innerRef}\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearComponent\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        />\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const LabelComponent = this.props.labelComponent;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...this.props} />;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n                        const hasFormatType = Boolean(getFormatType(group));\n                        const placeholder = hasFormatType ? group : undefined;\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled || !hasFormatType}\n                                data-placeholder={placeholder}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                                onPaste={this.onPaste}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = sel\n            ? Boolean(sel.focusOffset - sel.anchorOffset)\n            : false;\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const dataGroup = getAttribute(input, 'data-group');\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC && onToggle) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= dataGroup.length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (\n                (e.keyCode === keys.DOT || e.keyCode === keys.COMMA) &&\n                innerText.length < dataGroup.length\n            ) {\n                const formatType = getFormatType(dataGroup);\n\n                if (!validateFormatType(innerText, formatType)) {\n                    return;\n                }\n            }\n\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected && this.mounted) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.mounted &&\n                this.props.onToggle &&\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onPaste(e: React.ClipboardEvent<HTMLSpanElement>) {\n        e.preventDefault();\n\n        const text = e.clipboardData.getData('text/plain');\n\n        if (text) {\n            this.props.onPaste(text);\n\n            if (e.target instanceof HTMLSpanElement) {\n                e.target.blur();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (onToggle) {\n            if (!this.inputs.some(inp => inp === e.target) || !open) {\n                onToggle();\n            }\n        }\n    }\n}\n\nexport const Value = React.forwardRef(\n    (props: ReactTimebombValueProps, ref: React.Ref<HTMLDivElement>) => (\n        <ValueComponent innerRef={ref} {...props} />\n    )\n);\n"]}