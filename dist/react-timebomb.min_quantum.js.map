{"version":3,"sources":["src/components/number-input.tsx"],"names":["React","$fsx","r","styled_components_1","utils_1","Steps","default","div","Step","button","InputContainer","Input","input","exports","NumberInput","props","date","step","mode","onCancel","onSubmit","ref","useRef","focused","setFocused","useState","value","setValue","getDateValue","setDateValue","newDate","Date","newValue","parseInt","setHours","setMinutes","getHours","getMinutes","onFocusIn","onFocusOut","document","querySelector","current","useEffect","getTime","onChange","createElement","className","onMouseEnter","onMouseLeave","data-react-timebomb-selectable","type","isFinite","formatNumberRaw","e","currentTarget","length","preventDefault","onFocus","onBlur","onKeyUp","keyCode","keys","ENTER","ESC","undefined","tabIndex","onClick","addHours","addMinutes","subtractHours","subtractMinutes"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { FormatType } from '../typings';\nimport {\n    formatNumberRaw,\n    keys,\n    addMinutes,\n    addHours,\n    subtractHours,\n    subtractMinutes\n} from '../utils';\n\nconst Steps = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 24px;\n    height: 100%;\n    border-width: 0 1px;\n    border-style: solid;\n    border-color: #ccc;\n    visibility: hidden;\n`;\n\nconst Step = styled.button`\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    border: none;\n    flex: 1;\n    font-size: 8px;\n    color: #ccc;\n    cursor: pointer;\n    -webkit-appearance: none;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:hover {\n        background: #eee;\n        color: #000;\n    }\n`;\n\nconst InputContainer = styled.div`\n    position: relative;\n    flex: 1;\n    display: flex;\n\n    &:hover {\n        ${Steps} {\n            visibility: visible;\n        }\n    }\n\n    &:last-child {\n        ${Steps} {\n            border-right: none;\n        }\n    }\n`;\n\nconst Input = styled.input`\n    flex: 1;\n    padding: 0 25px 0 6px;\n    margin: 0;\n    width: 50%;\n    min-height: 32px;\n    text-align: center;\n    border: none;\n\n    // @see https://stackoverflow.com/a/4298216/1138860\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n        /* display: none; <- Crashes Chrome on hover */\n        -webkit-appearance: none;\n        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    &:focus {\n        background: #eee;\n\n        + ${Steps} {\n            visibility: visible;\n        }\n    }\n`;\n\ninterface NumberInputProps {\n    date: Date;\n    mode: FormatType;\n    step?: number;\n    onChange(date: Date, mode: FormatType): void;\n    onSubmit(date: Date, mode: FormatType): void;\n    onCancel(date: undefined, mode: FormatType): void;\n}\n\nexport function NumberInput(props: NumberInputProps) {\n    const { date, step, mode, onCancel, onSubmit } = props;\n    const ref = React.useRef<HTMLInputElement | null>(null);\n    const [focused, setFocused] = React.useState(false);\n    const [value, setValue] = React.useState<number | string | undefined>(\n        getDateValue(date)\n    );\n\n    React.useEffect(() => {\n        setValue(getDateValue(props.date));\n    }, [date.getTime()]);\n\n    React.useEffect(() => {\n        if (value && focused) {\n            const newDate = setDateValue(value);\n\n            props.onChange(newDate, mode);\n        }\n    }, [value]);\n\n    function setDateValue(value: string | number) {\n        const newDate = new Date(date);\n        const newValue = parseInt((value as any) || '0', 10);\n\n        switch (mode) {\n            case 'hour':\n                newDate.setHours(newValue);\n                break;\n            case 'minute':\n                newDate.setMinutes(newValue);\n                break;\n        }\n\n        return newDate;\n    }\n\n    function getDateValue(date: Date) {\n        switch (mode) {\n            case 'hour':\n                return date.getHours();\n            case 'minute':\n                return date.getMinutes();\n        }\n\n        return 0;\n    }\n\n    function getRenderedValue() {\n        if (focused) {\n            return value;\n        } else {\n            return isFinite(value as any) ? formatNumberRaw(value as any) : '';\n        }\n    }\n\n    function onFocusIn() {\n        setFocused(true);\n    }\n\n    function onFocusOut() {\n        if (document.querySelector(':focus') !== ref.current) {\n            setFocused(false);\n        }\n    }\n\n    function onChange(e: React.SyntheticEvent<HTMLInputElement>) {\n        const { value } = e.currentTarget;\n\n        if (value.length > 2) {\n            e.preventDefault();\n            return;\n        }\n\n        if (value === '') {\n            setValue(value);\n        } else if (date) {\n            const newDate = setDateValue(value);\n\n            setValue(getDateValue(newDate));\n        }\n    }\n\n    function onStepUp() {\n        if (date) {\n            const newDate = (() => {\n                switch (mode) {\n                    case 'hour':\n                        return addHours(date, 1);\n                    case 'minute':\n                        return addMinutes(date, step!);\n                }\n\n                return undefined;\n            })();\n\n            if (newDate) {\n                props.onChange(newDate, mode);\n            }\n        }\n    }\n\n    function onStepDown() {\n        if (date) {\n            const newDate = (() => {\n                switch (mode) {\n                    case 'hour':\n                        return subtractHours(date, 1);\n                    case 'minute':\n                        return subtractMinutes(date, step!);\n                }\n\n                return undefined;\n            })();\n\n            if (newDate) {\n                props.onChange(newDate, mode);\n            }\n        }\n    }\n\n    function onKeyUp(e: React.KeyboardEvent<HTMLInputElement>) {\n        switch (e.keyCode) {\n            case keys.ENTER:\n                onSubmit(date, mode);\n                break;\n            case keys.ESC:\n                onCancel(undefined, mode);\n                break;\n        }\n    }\n\n    return (\n        <InputContainer\n            className={`react-timebomb-number-input ${mode}`}\n            onMouseEnter={onFocusIn}\n            onMouseLeave={onFocusOut}\n        >\n            <Input\n                data-react-timebomb-selectable\n                type=\"number\"\n                ref={ref}\n                step={step}\n                value={getRenderedValue()}\n                onChange={onChange}\n                onFocus={onFocusIn}\n                onBlur={onFocusOut}\n                onKeyUp={onKeyUp}\n            />\n            <Steps>\n                <Step\n                    data-react-timebomb-selectable\n                    tabIndex={-1}\n                    onClick={onStepUp}\n                >\n                    ▲\n                </Step>\n                <Step\n                    data-react-timebomb-selectable\n                    tabIndex={-1}\n                    onClick={onStepDown}\n                >\n                    ▼\n                </Step>\n            </Steps>\n        </InputContainer>\n    );\n}\n"]}