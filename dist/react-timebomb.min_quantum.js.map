{"version":3,"sources":["src/index.tsx","src/menu/index.tsx","src/utils.ts","src/menu/time.tsx","src/components/number-input.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","selectWeek","timeStep","onOpen","menuWidth","Math","max","MENU_WIDTH","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","onClick","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","newDate","map","e","target","HTMLDivElement","classList","contains","defaultProps","button_1","table_1","mobile_1","time_1","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","PureComponent","yearContainer","scrollToYear","delay","selected","querySelector","scrollIntoView","scrollBy","top","onYearContainer","onChangeMonth","monthNames","getMonthNames","now","fullYears","getDate","year","getFullYear","getDateConfig","newYear","setFullYear","enabled","setSeconds","getSeconds","setMinutes","setHours","currentYear","Array","fill","_","i","filter","obj","reverse","minYear","array","renderMenuMonths","renderMenuYear","renderMonth","renderTime","renderConfirm","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","month","str","GestureWrapper","MenuTable","subtractMonths","addMonths","MenuTime","topDivider","onCancel","isValid","v","getAttribute","currentTarget","el","direction","moment_1","momentImport","moment","test","formatSplitExpr","dates","instance","toDate","formatIsActualNumber","validateFormatGroup","formatType","isFinite","int","parseInt","char","String","strLen","startsWith","validateFormatType","stringFromCharCode","parts","strParts","part","HTMLElement","innerText","val","dateA","dBi","dateB","getTime","replaceSpaceWithNbsp","replace","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","DOT","COMMA","number_input_1","Divider","span","NumberInput","step","Steps","Step","button","InputContainer","Input","createRef","onFocusIn","onFocusOut","onStepUp","onStepDown","onKeyUp","renderedValue","focused","formatNumberRaw","getDateValue","manipulateDate","onMouseEnter","onMouseLeave","data-react-timebomb-selectable","onBlur","newValue","document","current","keyCode"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentClass<MenuContainerProps, any>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                    onClick={\n                                        mobile\n                                            ? this.onMobileMenuContainerClick\n                                            : undefined\n                                    }\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: Date, mode: FormatType, commit = false): void {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        this.setState({ mode, valueText }, () =>\n            this.emitChange(newDate, commit)\n        );\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '../';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getAttribute,\n    isArray,\n    dateEqual,\n    addMonths,\n    subtractMonths\n} from '../utils';\nimport { Button } from '../components/button';\nimport { ReactTimebombDate, FormatType } from '../typings';\nimport { MenuTable } from './table';\nimport { GestureWrapper, GestureDirection } from './mobile';\nimport { MenuTime } from './time';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    timeStep: ReactTimebombProps['timeStep'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(date: Date, mode: FormatType): void;\n    onSubmitTime(date: Date | undefined, mode: FormatType): void;\n    onSubmit(): void;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0;\n    height: ${(props: { mobile?: boolean }) => (props.mobile ? '100' : 'auto')};\n    overflow: hidden;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private monthNames!: string[];\n\n    private get now(): Date {\n        return new Date();\n    }\n\n    private getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[this.props.selectedRange] : date)!;\n    }\n\n    private yearContainer: HTMLDivElement | null = null;\n\n    private get fullYears() {\n        const { value, minDate, maxDate } = this.props;\n        const valueDate = this.getDate(value);\n        const year = this.getDate(this.props.date).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, this.props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = this.now;\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onYearContainer = this.onYearContainer.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n\n        this.monthNames = getMonthNames(true);\n    }\n\n    public componentDidUpdate(prevProps: MenuProps) {\n        if (!dateEqual(prevProps.date, this.props.date)) {\n            this.scrollToYear(64);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { mode, mobile, showDate, showConfirm, showTime } = this.props;\n\n        if (showDate || showTime) {\n            switch (mode) {\n                case 'year':\n                case 'month':\n                    return (\n                        <MonthAndYearContainer mobile={mobile}>\n                            {this.renderMenuMonths()}\n                            {this.renderMenuYear()}\n                        </MonthAndYearContainer>\n                    );\n                case 'day':\n                case 'hour':\n                case 'minute':\n                case 'second':\n                    return (\n                        <MonthContainer mobile={mobile}>\n                            {showDate && this.renderMonth()}\n                            {showTime && this.renderTime()}\n                            {showConfirm && this.renderConfirm()}\n                        </MonthContainer>\n                    );\n            }\n        }\n\n        return null;\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                mobile={this.props.mobile}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { value, mobile } = this.props;\n        const valueDate = this.getDate(value);\n        const date = this.getDate(this.props.date);\n        const month = value && valueDate.getMonth();\n        const year = value && valueDate.getFullYear();\n\n        return (\n            <MonthsContainer mobile={mobile} className=\"months\">\n                {this.monthNames.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            mobile={this.props.mobile}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { mobile } = this.props;\n\n        if (mobile) {\n            return (\n                <GestureWrapper onChangeMonth={this.onChangeMonth}>\n                    <MenuTable\n                        date={subtractMonths(this.getDate(this.props.date), 1)}\n                        minDate={this.props.minDate}\n                        maxDate={this.props.maxDate}\n                        mobile={this.props.mobile}\n                        selectRange={this.props.selectRange}\n                        selectedRange={this.props.selectedRange}\n                        selectWeek={this.props.selectWeek}\n                        showCalendarWeek={this.props.showCalendarWeek}\n                        showConfirm={this.props.showConfirm}\n                        showTime={this.props.showTime}\n                        value={subtractMonths(\n                            this.getDate(this.props.value),\n                            1\n                        )}\n                        onSubmit={this.props.onSubmit}\n                        onSelectDay={this.props.onSelectDay}\n                    />\n                    <MenuTable\n                        date={this.props.date}\n                        minDate={this.props.minDate}\n                        maxDate={this.props.maxDate}\n                        mobile={this.props.mobile}\n                        selectRange={this.props.selectRange}\n                        selectedRange={this.props.selectedRange}\n                        selectWeek={this.props.selectWeek}\n                        showCalendarWeek={this.props.showCalendarWeek}\n                        showConfirm={this.props.showConfirm}\n                        showTime={this.props.showTime}\n                        value={this.props.value}\n                        onSubmit={this.props.onSubmit}\n                        onSelectDay={this.props.onSelectDay}\n                    />\n                    <MenuTable\n                        date={addMonths(this.getDate(this.props.date), 1)}\n                        minDate={this.props.minDate}\n                        maxDate={this.props.maxDate}\n                        mobile={this.props.mobile}\n                        selectRange={this.props.selectRange}\n                        selectedRange={this.props.selectedRange}\n                        selectWeek={this.props.selectWeek}\n                        showCalendarWeek={this.props.showCalendarWeek}\n                        showConfirm={this.props.showConfirm}\n                        showTime={this.props.showTime}\n                        value={addMonths(this.getDate(this.props.value), 1)}\n                        onSubmit={this.props.onSubmit}\n                        onSelectDay={this.props.onSelectDay}\n                    />\n                </GestureWrapper>\n            );\n        }\n\n        return (\n            <MenuTable\n                date={this.props.date}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                mobile={this.props.mobile}\n                selectRange={this.props.selectRange}\n                selectedRange={this.props.selectedRange}\n                selectWeek={this.props.selectWeek}\n                showCalendarWeek={this.props.showCalendarWeek}\n                showConfirm={this.props.showConfirm}\n                showTime={this.props.showTime}\n                value={this.props.value}\n                onSubmit={this.props.onSubmit}\n                onSelectDay={this.props.onSelectDay}\n            />\n        );\n    }\n\n    private renderTime(): React.ReactNode {\n        return (\n            <MenuTime\n                date={this.props.date}\n                timeStep={this.props.timeStep}\n                topDivider={this.props.showDate}\n                onChange={this.props.onSelectTime}\n                onSubmit={this.props.onSubmitTime}\n                onCancel={this.props.onSubmitTime}\n            />\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isArray(validDate)\n                ? validDate.every(v => isEnabled('day', v, this.props))\n                : isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    mobile={this.props.mobile}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private scrollToYear = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (delay: number) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                if (this.yearContainer) {\n                    const selected = this.yearContainer.querySelector(\n                        '.selected'\n                    );\n\n                    if (selected) {\n                        selected.scrollIntoView();\n\n                        if (this.yearContainer.scrollBy) {\n                            this.yearContainer.scrollBy({ top: -10 });\n                        }\n                    }\n                }\n            }, delay);\n        };\n    })();\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        this.yearContainer = el;\n\n        this.scrollToYear(0);\n    }\n\n    private onChangeMonth(direction: GestureDirection) {\n        const { onSelectMonth } = this.props;\n        const date = this.getDate(this.props.date);\n\n        switch (direction) {\n            case 'next':\n                onSelectMonth(addMonths(date, 1));\n                break;\n            case 'prev':\n                onSelectMonth(subtractMonths(date, 1));\n                break;\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\nimport { ReactTimebombDate, FormatType } from './typings';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\n\nexport const formatSplitExpr = /[.|:|\\-|\\\\|_|\\s]/;\n\nexport function dateFormat(date: Date, format: string): string;\nexport function dateFormat(date: Date[], format: string): string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[] {\n    if (isArray(date)) {\n        return date.map(date => moment(date).format(format));\n    } else {\n        return moment(date).format(format);\n    }\n}\n\nexport function validateDate(\n    date: string | string[] | undefined,\n    format: string\n): ReactTimebombDate {\n    if (isArray(date)) {\n        const dates = date\n            .map(date => {\n                const instance = moment(date, format, true);\n\n                return instance.isValid() ? instance.toDate() : undefined;\n            })\n            .filter(d => Boolean(d)) as Date[];\n\n        return dates.length === 0 ? undefined : dates;\n    } else {\n        const instance = moment(date, format, true);\n\n        return instance.isValid() ? instance.toDate() : undefined;\n    }\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/^D/.test(format)) {\n        return 'day';\n    }\n\n    if (/^M/.test(format)) {\n        return 'month';\n    }\n\n    if (/^Y/.test(format)) {\n        return 'year';\n    }\n\n    if (/^H/.test(format)) {\n        return 'hour';\n    }\n\n    if (/^m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/^s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\nexport function formatIsActualNumber(format: string) {\n    // day / year\n    if (/D|Y|H|m|s/.test(format)) {\n        return true;\n    }\n\n    // month\n    if (format === 'M' || format === 'MM') {\n        return true;\n    }\n\n    return false;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    const formatType = getFormatType(format);\n\n    return validateFormatType(input, formatType);\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatType(\n    input: string | number,\n    formatType?: FormatType\n) {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n\n        switch (formatType) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nconst ALLOWED_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n    const char = String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n\n    if (ALLOWED_CHARS.includes(char)) {\n        return char;\n    }\n\n    return '';\n}\n\nexport function formatNumber(number: number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function formatNumberRaw(number: number): string {\n    if (number <= 9) {\n        return `0${number || 0}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    const formattedDate = dateFormat(date, format);\n\n    return formattedDate\n        .split(formatSplitExpr)\n        .filter(group => group && formatSplitExpr.test(group) === false);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplitExpr);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function selectElement(\n    el: HTMLElement | undefined,\n    caret?: number[]\n): void {\n    if (el) {\n        const range = document.createRange();\n        const sel = getSelection();\n\n        if (caret === undefined) {\n            range.selectNodeContents(el);\n        } else {\n            const [start, end] = caret;\n\n            range.setStart(el, start);\n            range.setEnd(el, end);\n        }\n\n        sel.removeAllRanges();\n        sel.addRange(range);\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract',\n    timeStep?: number\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractMinutes(date, timeStep || 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractSeconds(date, timeStep || 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function dateEqual(\n    dateA?: ReactTimebombDate,\n    dateB?: ReactTimebombDate,\n    considerTime = false\n) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    if (considerTime) {\n        if (isArray(dateA)) {\n            dateA = dateA.map(startOfDay);\n        } else {\n            dateA = startOfDay(dateA);\n        }\n\n        if (isArray(dateB)) {\n            dateB = dateB.map(startOfDay);\n        } else {\n            dateB = startOfDay(dateB);\n        }\n    }\n\n    if (isArray(dateA) && isArray(dateB)) {\n        return dateA.every((date, i) => {\n            const dBi = dateB![i];\n\n            if (date && dBi) {\n                return date.getTime() === dBi.getTime();\n            }\n\n            return false;\n        });\n    } else if (isArray(dateA) && dateB instanceof Date) {\n        return dateA.some(d => d.getTime() === (dateB as Date).getTime());\n    } else if (isArray(dateB) && dateA instanceof Date) {\n        return dateB.some(d => d.getTime() === (dateA as Date).getTime());\n    } else if (!isArray(dateA) && !isArray(dateB)) {\n        return dateA.getTime() === dateB.getTime();\n    }\n\n    return false;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function getWeekdayNames() {\n    return moment.weekdaysShort();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport function isDateFormat(format: string) {\n    return Boolean(/D|M|Y/.test(format));\n}\n\nexport function isTimeFormat(format: string) {\n    return Boolean(/H|h|m|k|a|S|s/.test(format));\n}\n\nexport function sortDates(a: Date, b: Date) {\n    return a.getTime() - b.getTime();\n}\n\nexport function isArray(val: any): val is any[] {\n    return Array.isArray(val);\n}\n\nexport function fillZero(value: string | number, formatType: FormatType) {\n    value = String(value);\n\n    switch (formatType) {\n        case 'day':\n            if (value === '1' || value === '2' || value === '3') {\n                return `0${value}`;\n            }\n            break;\n        case 'month':\n            if (value === '1') {\n                return `0${value}`;\n            }\n            break;\n    }\n\n    return undefined;\n}\n\nexport function replaceSpaceWithNbsp(str?: string) {\n    if (!str) {\n        return str;\n    }\n\n    return str.replace(' ', ' ');\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    DOT: 190,\n    COMMA: 188\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState, FormatType } from '../typings';\nimport { isArray } from '../utils';\nimport { ReactTimebombProps } from 'src';\nimport { NumberInput } from '../components/number-input';\n\nconst Container = styled.div`\n    padding: 0;\n    display: flex;\n    align-items: center;\n    margin: 0 auto;\n    width: 100%;\n    border-top: ${(props: { topDivider?: boolean }) =>\n        props.topDivider ? '1px solid #ccc' : 'none'};\n\n    &:not(:last-child) {\n        border-bottom: 1px solid #ccc;\n    }\n`;\n\nconst Divider = styled.span`\n    margin: 0 5px;\n    font-weight: bold;\n`;\n\ninterface MenuTimeProps {\n    date: ReactTimebombState['date'];\n    timeStep: ReactTimebombProps['timeStep'];\n    topDivider?: boolean;\n    onChange(date: Date, mode: FormatType): void;\n    onSubmit(date: Date, mode: FormatType): void;\n    onCancel(date: undefined, mode: FormatType): void;\n}\n\nexport class MenuTime extends React.PureComponent<MenuTimeProps> {\n    public render() {\n        const {\n            date,\n            timeStep,\n            topDivider,\n            onChange,\n            onSubmit,\n            onCancel\n        } = this.props;\n\n        if (isArray(date) || !date) {\n            return null;\n        }\n\n        return (\n            <Container topDivider={topDivider} className=\"react-timebomb-time\">\n                <NumberInput\n                    date={date}\n                    step={1}\n                    mode=\"hour\"\n                    onChange={onChange}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n                <Divider className=\"divider\">:</Divider>\n                <NumberInput\n                    date={date}\n                    step={timeStep}\n                    mode=\"minute\"\n                    onChange={onChange}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            </Container>\n        );\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { FormatType } from '../typings';\nimport { formatNumberRaw, keys } from '../utils';\n\nconst Steps = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 24px;\n    height: 100%;\n    border-width: 0 1px;\n    border-style: solid;\n    border-color: #ccc;\n    visibility: hidden;\n`;\n\nconst Step = styled.button`\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    border: none;\n    flex: 1;\n    font-size: 8px;\n    color: #ccc;\n    cursor: pointer;\n    -webkit-appearance: none;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:hover {\n        background: #eee;\n        color: #000;\n    }\n`;\n\nconst InputContainer = styled.div`\n    position: relative;\n    flex: 1;\n    display: flex;\n\n    &:hover {\n        ${Steps} {\n            visibility: visible;\n        }\n    }\n\n    &:last-child {\n        ${Steps} {\n            border-right: none;\n        }\n    }\n`;\n\nconst Input = styled.input`\n    flex: 1;\n    padding: 0 25px 0 6px;\n    margin: 0;\n    width: 50%;\n    min-height: 32px;\n    text-align: center;\n    border: none;\n\n    // @see https://stackoverflow.com/a/4298216/1138860\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n        /* display: none; <- Crashes Chrome on hover */\n        -webkit-appearance: none;\n        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    &:focus {\n        background: #eee;\n\n        + ${Steps} {\n            visibility: visible;\n        }\n    }\n`;\n\ninterface NumberInputProps {\n    date: Date;\n    mode: FormatType;\n    step?: number;\n    onChange(date: Date, mode: FormatType): void;\n    onSubmit(date: Date, mode: FormatType): void;\n    onCancel(date: undefined, mode: FormatType): void;\n}\n\ninterface NumberInputState {\n    value?: any;\n    focused?: boolean;\n}\n\nexport class NumberInput extends React.PureComponent<\n    NumberInputProps,\n    NumberInputState\n> {\n    private ref = React.createRef<HTMLInputElement>();\n\n    private get renderedValue() {\n        if (this.state.focused) {\n            return this.state.value;\n        } else {\n            return isFinite(this.state.value)\n                ? formatNumberRaw(this.state.value)\n                : '';\n        }\n    }\n\n    constructor(props: NumberInputProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onChange = this.onChange.bind(this);\n        this.onFocusIn = this.onFocusIn.bind(this);\n        this.onFocusOut = this.onFocusOut.bind(this);\n        this.onStepUp = this.onStepUp.bind(this);\n        this.onStepDown = this.onStepDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n    }\n\n    public static defaultProps: Partial<NumberInputProps> = {\n        step: 1\n    };\n\n    public componentDidMount() {\n        const { date } = this.props;\n\n        if (date) {\n            this.setState({ value: this.getDateValue(date) });\n        }\n    }\n\n    public componentDidUpdate(\n        prevProps: NumberInputProps,\n        prevState: NumberInputState\n    ) {\n        const { date, mode, onChange } = this.props;\n        const { value, focused } = this.state;\n\n        if (date && prevProps.date.getTime() !== date.getTime()) {\n            this.setState({ value: this.getDateValue(date) });\n        }\n\n        if (prevState.value !== value && value !== '' && focused) {\n            const newDate = this.manipulateDate(value);\n\n            onChange(newDate, mode);\n        }\n    }\n\n    public render() {\n        const { step, mode } = this.props;\n\n        return (\n            <InputContainer\n                className={`react-timebomb-number-input ${mode}`}\n                onMouseEnter={this.onFocusIn}\n                onMouseLeave={this.onFocusOut}\n            >\n                <Input\n                    data-react-timebomb-selectable\n                    type=\"number\"\n                    ref={this.ref}\n                    step={step}\n                    value={this.renderedValue}\n                    onChange={this.onChange}\n                    onFocus={this.onFocusIn}\n                    onBlur={this.onFocusOut}\n                    onKeyUp={this.onKeyUp}\n                />\n                <Steps>\n                    <Step\n                        data-react-timebomb-selectable\n                        tabIndex={-1}\n                        onClick={this.onStepUp}\n                    >\n                        ▲\n                    </Step>\n                    <Step\n                        data-react-timebomb-selectable\n                        tabIndex={-1}\n                        onClick={this.onStepDown}\n                    >\n                        ▼\n                    </Step>\n                </Steps>\n            </InputContainer>\n        );\n    }\n\n    private manipulateDate(value: string | number) {\n        const newDate = new Date(this.props.date);\n        const newValue = parseInt((value as any) || '0', 10);\n\n        switch (this.props.mode) {\n            case 'hour':\n                newDate.setHours(newValue);\n                break;\n            case 'minute':\n                newDate.setMinutes(newValue);\n                break;\n        }\n\n        return newDate;\n    }\n\n    private getDateValue(date: Date) {\n        switch (this.props.mode) {\n            case 'hour':\n                return date.getHours();\n            case 'minute':\n                return date.getMinutes();\n        }\n\n        return 0;\n    }\n\n    private onFocusIn() {\n        this.setState({ focused: true });\n    }\n\n    private onFocusOut() {\n        if (document.querySelector(':focus') !== this.ref.current) {\n            this.setState({ focused: false });\n        }\n    }\n\n    private onChange(e: React.SyntheticEvent<HTMLInputElement>) {\n        const { date } = this.props;\n        const { value } = e.currentTarget;\n\n        if (value === '') {\n            this.setState({ value });\n        } else if (date) {\n            const newDate = this.manipulateDate(value);\n\n            this.setState({ value: this.getDateValue(newDate) });\n        }\n    }\n\n    private onStepUp() {\n        const { date, step } = this.props;\n        const { value } = this.state;\n\n        if (date && value !== undefined) {\n            const newDate = this.manipulateDate(value + step!);\n\n            this.setState({ value: this.getDateValue(newDate) });\n        }\n    }\n\n    private onStepDown() {\n        const { date, step } = this.props;\n        const { value } = this.state;\n\n        if (date && value !== undefined) {\n            const newDate = this.manipulateDate(value - step!);\n\n            this.setState({ value: this.getDateValue(newDate) });\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLInputElement>) {\n        switch (e.keyCode) {\n            case keys.ENTER:\n                this.props.onSubmit(this.props.date, this.props.mode);\n                break;\n            case keys.ESC:\n                this.props.onCancel(undefined, this.props.mode);\n                break;\n        }\n    }\n}\n"]}