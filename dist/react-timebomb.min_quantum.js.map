{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/menu-title.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","onChangeFormatGroup","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","mobileWidth","MENU_WIDTH","MENU_HEIGHT","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","selectWeek","onOpen","menuWidth","Math","max","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","MenuTitle","onMonth","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","getFormatType","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps","button_1","menu_day_1","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","PureComponent","yearContainer","monthMatrixCache","Map","scrollToYear","delay","selected","querySelector","scrollIntoView","scrollBy","top","onYearContainer","onDayMouseEnter","onDayMouseLeave","weekdayNames","getWeekdayNames","monthNames","getMonthNames","now","monthMatrix","getDate","dateMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","weekStart","addDays","set","fullYears","year","getDateConfig","newYear","setFullYear","enabled","setSeconds","getSeconds","setMinutes","setHours","currentYear","Array","fill","_","i","filter","obj","reverse","minYear","array","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","month","str","hoverDay","sun","mon","tue","wed","thu","fri","sat","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","WeekNum","Day","onMouseEnter","onMouseLeave","isValid","e","getAttribute","currentTarget","el","util_1","show","prevDisabled","subtractDays","nextDisabled","lastDate","endOfMonth","arrow_button_1","Flex","Input","span","ClearButton","SmallButton","Placeholder","Icon","icon","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","inputs","selectElement","allSelected","formatGroup","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","formatGroups","reduce","memo","char","prevChar","substr","focused","document","iconClass","some","inp","parts","splitDate","forEach","innerText","focus","find","forceUpdate","ArrowButtonComp","ArrowButton","showPlaceholder","showClearer","timeOnly","data-role","contentEditable","group","separator","data-react-timebomb-selectable","data-placeholder","data-separator","data-group","onDoubleClick","nextSibling","previousSibling","sel","getSelection","hasSelection","focusOffset","baseOffset","numericValue","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","manipulateDate","shiftKey","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","blur","parentNode","target","fillZero","stopPropagation"],"mappings":"mFAAA,MAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBACAE,EAAAH,EAAAC,EAAA,cACAG,EAAAJ,EAAAC,EAAA,GACAI,EAAAL,EAAAC,EAAA,GACAK,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GAoBAO,EAAAR,EAAAC,EAAA,GAWIQ,EAAAC,mBAVAF,EAAAE,mBAWAD,EAAAE,mBAVAH,EAAAG,mBAWAF,EAAAG,mBAVAJ,EAAAI,mBAWAH,EAAAI,kBAVAL,EAAAK,kBAWAJ,EAAAK,8BAVAN,EAAAM,8BAEJ,MAAAC,EAAAf,EAAAC,EAAA,GAgBMe,EAAYd,EAAAe,QAAOC;;;;EAMnBC,EAAcjB,EAAAe,QAAOC;;;;;;;;;;kBAUTE,GAA6BA,EAAMC;;;;;;;;MAQ/CD,GACEA,EAAME,OACApB,EAAAqB;;;;;;;;;;gBAWA;EAGRC,EAAatB,EAAAe,QAAOQ;;;;;;EAQ1B,MAAaC,UAAsB3B,EAAM4B,UAyGrCC,YAAYR,GACRS,MAAMT,GAoRFU,KAAAC,WAAa,MACjB,IAAIC,EAEJ,MAAO,CAACC,EAAyBC,KAC7BC,aAAaH,GAEbA,EAAUI,WAAW,KACjB,MAAMC,MAAEA,EAAAC,YAAOA,EAAAC,SAAaA,GAAaT,KAAKV,MAEzCkB,IACDJ,GAAS,GAGT3B,EAAAiC,UAAUH,EAAOJ,KAIjBC,IACI3B,EAAAkC,QAAQR,GACRM,KAAYN,GAEZM,EAASN,IAIjBH,KAAKY,SAAS,CAAEC,gBAAiBC,QAAQX,OAC1C,KA1BU,GAlRjB,MAAMY,QAAEA,EAAAC,QAASA,EAAAC,YAASA,EAAAT,YAAaA,GAAgBlB,EAEvD,GAAIyB,GAAWC,GAAWvC,EAAAyC,SAASF,EAASD,GACxC,MAAM,IAAII,MAAM,sCAGpB,GAAIF,IAAgBT,EAChB,MAAM,IAAIW,MACN,0DAIRnB,KAAKoB,MAAQpB,KAAKqB,aAElBrB,KAAKsB,kBAAoBtB,KAAKsB,kBAAkBC,KAAKvB,MACrDA,KAAKwB,cAAgBxB,KAAKwB,cAAcD,KAAKvB,MAC7CA,KAAKyB,YAAczB,KAAKyB,YAAYF,KAAKvB,MACzCA,KAAK0B,UAAY1B,KAAK0B,UAAUH,KAAKvB,MACrCA,KAAK2B,WAAa3B,KAAK2B,WAAWJ,KAAKvB,MACvCA,KAAK4B,YAAc5B,KAAK4B,YAAYL,KAAKvB,MACzCA,KAAK6B,cAAgB7B,KAAK6B,cAAcN,KAAKvB,MAC7CA,KAAK8B,aAAe9B,KAAK8B,aAAaP,KAAKvB,MAC3CA,KAAK+B,QAAU/B,KAAK+B,QAAQR,KAAKvB,MACjCA,KAAKgC,YAAchC,KAAKgC,YAAYT,KAAKvB,MACzCA,KAAKiC,YAAcjC,KAAKiC,YAAYV,KAAKvB,MACzCA,KAAKkC,aAAelC,KAAKkC,aAAaX,KAAKvB,MAC3CA,KAAKmC,QAAUnC,KAAKmC,QAAQZ,KAAKvB,MACjCA,KAAKoC,QAAUpC,KAAKoC,QAAQb,KAAKvB,MACjCA,KAAKqC,oBAAsBrC,KAAKqC,oBAAoBd,KAAKvB,MA7HtDF,gCACHR,GAEA,MAAMgD,EAAShD,EAAMgD,QACfvB,QAAEA,EAAAC,QAASA,GAAY1B,EAE7B,MAAO,CACHyB,QAASA,EAAUtC,EAAA8D,WAAWxB,QAAWyB,EACzCxB,QAASA,EAAUvC,EAAAgE,SAASzB,QAAWwB,EACvCE,SAAUjE,EAAAkE,aAAaL,GACvBM,SAAUnE,EAAAoE,aAAaP,IASvBxC,uBACJgD,GAEA,IAAK9C,KAAK+C,oBAAqB,CAC3B,MAAMC,EAAcpD,EAAcqD,WAAa,GAE/CjD,KAAK+C,oBAAsB3E,EAAAe,QAAO2D;;;;;yBAKrBE;0BACCpD,EAAcsD;gCACRF,EAAc;+BACfpD,EAAcsD,YAAc;;qCAEtBF;;;;;cAQ7B,OAAOhD,KAAK+C,oBAGhBI,gBACI,MAAMC,EAAa,CAAC,kBAcpB,OAZIpD,KAAKV,MAAM6D,WACXC,EAAWC,KAAKrD,KAAKV,MAAM6D,WAG3BnD,KAAKV,MAAMgE,OACXF,EAAWC,KAAK,SAGhBrD,KAAKV,MAAMiE,UACXH,EAAWC,KAAK,YAGbD,EAAWI,KAAK,KAG3BC,uBACI,MAAMlD,MAAEA,EAAAQ,QAAOA,EAAAC,QAASA,GAAYhB,KAAKV,MAEzC,GAAIiB,EACA,OAAOA,EAGX,IAAIJ,EAAO,IAAIuD,KAQf,OANI1C,GAAWvC,EAAAyC,SAASF,EAASb,GAC7BA,EAAOa,EACAD,GAAWtC,EAAAkF,QAAQ5C,EAASZ,KACnCA,EAAOY,GAGJtC,EAAA8D,WAAWpC,GAGtBkB,mBACI,MAAO,CACHR,iBAAiB,EACjB+C,KAAM,MACNC,UAAW7D,KAAKV,MAAMiB,MAChB9B,EAAAqF,WAAW9D,KAAKV,MAAMiB,MAAOP,KAAKV,MAAMgD,aACxCE,EACNrC,KAAMH,KAAKyD,iBACXM,cAAe,GAsChBjE,mBACHkE,EACAC,GAEA,MAAMJ,UAAEA,GAAc7D,KAAKoB,OACrBb,MAAEA,EAAA+B,OAAOA,GAAWtC,KAAKV,MAE3B0E,EAAU1B,SAAWA,GAAU0B,EAAUzD,QAAUA,GACnDP,KAAKY,SAAS,CACViD,UAAWtD,EAAQ9B,EAAAqF,WAAWvD,EAAO+B,QAAWE,IAIpDyB,EAAUJ,YAAcA,GACxB7D,KAAKkE,oBAAmB,GAIxBpE,mBAAmBM,GACvB,MAAMyD,UAAEA,EAAAhD,gBAAWA,GAAoBb,KAAKoB,OACtCkB,OAAEA,GAAWtC,KAAKV,MAClB6E,EAAY1F,EAAA2F,aAAaP,EAAWvB,GAEtC6B,EACAnE,KAAKY,SAAS,CAAEC,iBAAiB,GAAQ,MACrBpC,EAAAkC,QAAQwD,GAClBA,EAAUE,MAAMC,GAAK7F,EAAA8F,UAAU,MAAOD,EAAGtE,KAAKV,QAC9Cb,EAAA8F,UAAU,MAAOJ,EAAWnE,KAAKV,QAGnCU,KAAKY,SAAS,CAAET,KAAMgE,GAAa,IAC/BnE,KAAKC,WAAWkE,EAAW/D,IAG/BJ,KAAKwE,UAAU,aAAcX,KAG9BA,EACP7D,KAAKwE,UAAU,cAAeX,IACtBpF,EAAAgG,YAAYZ,IAAchD,GAClCb,KAAKC,gBAAWuC,EAAWpC,GAI5BN,SACH,MAAM4E,YACFA,EAAAlE,YACAA,EAAAmE,iBACAA,EAAAC,WACAA,EAAA3D,YACAA,EAAAqB,OACAA,EAAAgB,MACAA,EAAAC,SACAA,EAAA/D,OACAA,EAAAqF,OACAA,GACA7E,KAAKV,OACHsD,SACFA,EAAAF,SACAA,EAAAmB,UACAA,EAAAD,KACAA,EAAAG,cACAA,EAAAhD,QACAA,EAAAC,QACAA,GACAhB,KAAKoB,MACHb,EAAQsD,EACRpF,EAAA2F,aAAaP,EAAWvB,GACxBtC,KAAKV,MAAMiB,MACXuE,EAAYC,KAAKC,IACnBpF,EAAcqD,WACdjD,KAAKV,MAAMwF,WAAa,GAEtBvF,EAAaK,EAAcsD,YAEjC,OACIjF,EAAAgH,cAAC5G,EAAA6G,OAAM,CACH3E,MAAOA,EACPmE,YAAaA,EACbpB,MAAOA,EACPuB,OAAQA,EACR1C,QAASnC,KAAKmC,SAEb,EAAGuC,YAAAA,EAAaS,KAAAA,EAAMC,SAAAA,EAAUC,MAAAA,EAAOvC,cAAAA,MACpC,MAAMwC,EAAWH,GAAQvC,IAAaW,EAUtC,OARAvD,KAAKoF,SAAWA,EAEZ5F,IACAsD,EAAgB9C,KAAKuF,uBACjBzC,IAKJ7E,EAAAgH,cAAC/F,EAAS,CAACsG,IAAKH,EAAOlC,UAAWnD,KAAKmD,WAClCnD,KAAKyF,YAAYlF,EAAOmE,EAAaS,GACrCG,EACGrH,EAAAgH,cAACnC,EAAa,CACVgC,UAAWA,EACXvF,WAAYA,GAEZtB,EAAAgH,cAAC5F,EAAW,CACR8D,UAAU,sBACV5D,WAAYA,EACZC,OAAQA,GAERvB,EAAAgH,cAAC1G,EAAAmH,UAAS,CACN9B,KAAMA,EACNzD,KAAMH,KAAKoB,MAAMjB,KACjBY,QAASA,EACTC,QAASA,EACT+C,cAAeA,EACf4B,QAAS3F,KAAK4B,YACdgE,OAAQ5F,KAAK2B,WACbK,YAAahC,KAAKgC,YAClBC,YAAajC,KAAKiC,YAClBF,QAAS/B,KAAK+B,UAElB9D,EAAAgH,cAAC3G,EAAAuH,KAAI,CACDnD,SAAUA,EACVE,SAAUA,EACVpC,YAAaA,EACbmE,iBAAkBA,EAClBC,WAAYA,EACZ3D,YAAaA,EACbd,KAAMH,KAAKoB,MAAMjB,KACjBI,MAAOA,EACPsD,UAAWA,EACXvB,OAAQA,EACRsB,KAAMA,EACNpE,OAAQA,EACRuB,QAASA,EACTC,QAASA,EACT+C,cAAeA,EACftC,YAAazB,KAAKyB,YAClBI,cAAe7B,KAAK6B,cACpBC,aAAc9B,KAAK8B,aACnBI,aAAclC,KAAKkC,aACnB4D,SAAU9F,KAAKwB,kBAK3BvD,EAAAgH,cAACvF,EAAU,CAACqG,KAAK,OAAOC,QAASZ,OASrDtF,YACJS,EACAmE,EACAS,GAEAT,EAAcS,OAAO3C,EAAYkC,EAEjC,MAAM3D,QACFA,EAAAC,QACAA,EAAAuC,SACAA,EAAAjB,OACAA,EAAArB,YACAA,EAAAzB,OACAA,EAAAyG,qBACAA,GACAjG,KAAKV,OACHsD,SAAEA,EAAAF,SAAUA,EAAA7B,gBAAUA,EAAA+C,KAAiBA,GAAS5D,KAAKoB,MAE3D,GAAIH,GAAexC,EAAAkC,QAAQJ,GAAQ,CAC/B,MAAM2F,EAAa3F,EACb9B,EAAAkC,QAAQJ,GACJA,EACA,CAACA,QACLiC,EAEN,OACIvE,EAAAgH,cAAChG,EAAAkH,WAAU,CACPhB,KAAMA,EACN5B,SAAUA,EACVmB,YAAaA,EACbnE,MAAO2F,EACPD,qBAAsBA,EACtB7D,QAASpC,KAAKoC,QACdgD,SAAUpF,KAAKoF,WAK3B,OACInH,EAAAgH,cAACzG,EAAA4H,MAAK,CACFxC,KAAMA,EACNL,SAAUA,EACV/D,OAAQA,EACRkF,YAAaA,EACbpC,OAAQA,EACR/B,MAAOA,EACPQ,QAASA,EACTC,QAASA,EACTH,gBAAiBA,EACjBsE,KAAMA,EACNvC,SAAUA,EACVF,SAAUA,EACVuD,qBAAsBA,EACtB7D,QAASpC,KAAKoC,QACdd,kBAAmBtB,KAAKsB,kBACxBe,oBAAqBrC,KAAKqC,oBAC1B+C,SAAUpF,KAAKoF,SACfU,SAAU9F,KAAKwB,cACf6E,YAAarG,KAAK0B,YAKtB5B,UACJrB,EAAA6H,iBAEAhG,WAAW,KACP7B,EAAA6H,iBAEAtG,KAAKY,SAASZ,KAAKqB,aAAc,KACzBrB,KAAKV,MAAM6C,SACXnC,KAAKV,MAAM6C,aAGpB,IAGCrC,UACJwD,EACA/C,GAEIP,KAAKoB,MAAMP,iBACXb,KAAKY,SAAS,CAAEC,iBAAiB,GAAS,KAClCb,KAAKV,MAAMiH,SACXvG,KAAKV,MAAMiH,QAAQjD,EAAO/C,KAoClCT,iBAAiBK,GACrB,OAAI1B,EAAAkC,QAAQR,GACY,IAAhBA,EAAKqG,OACDrG,EAAK,GAAKA,EAAK,GACR,EAEA,EAEY,IAAhBA,EAAKqG,OACL,EAMRxG,KAAKoB,MAAM2C,cAHP,EAMPjE,UACJE,KAAKY,SAAS,CAAEiD,eAAWrB,GAAa,KACpCxC,KAAKC,gBAAWuC,GAAW,KAI3B1C,kBAAkB+D,GACtB7D,KAAKY,SAAS,CAAEiD,UAAAA,IAGZ/D,oBAAoBwC,GACxBtC,KAAKY,SAAS,CAAEgD,KAAMtB,EAAS7D,EAAAgI,cAAcnE,QAAUE,IAGnD1C,gBACAE,KAAKoF,UACLpF,KAAKoF,WAET3G,EAAA6H,iBAEAtG,KAAKkE,oBAAmB,GAGpBpE,YAAY4G,GAChB,MAAMnG,MAAEA,EAAA+B,OAAOA,EAAAsC,WAAQA,EAAA3D,YAAYA,GAAgBjB,KAAKV,MAElDqH,EACFpG,aAAiBmD,KACXnD,EACA9B,EAAAkC,QAAQJ,GACRA,EAAM,QACNiC,EAEV,GAAIoC,EAAY,CACZ,MAAMzE,EAAO,CAAC1B,EAAAmI,YAAYF,GAAMjI,EAAAoI,UAAUH,IACpC7C,EAAYpF,EAAAqF,WAAW3D,EAAMmC,GAEnCtC,KAAKY,SAAS,CAAET,KAAAA,EAAM0D,UAAAA,QACnB,CACH,MAAM1D,EAAO1B,EAAAqI,QACTJ,EACAC,EAAYA,EAAUI,WAAa,EACnCJ,EAAYA,EAAUK,aAAe,GAGzC,GAAI/F,EAAa,CACb,MAAMgG,EACFxI,EAAAkC,QAAQX,KAAKoB,MAAMyC,YACa,IAAhC7D,KAAKoB,MAAMyC,UAAU2C,OACf,CACI/H,EAAA2F,aACIpE,KAAKoB,MAAMyC,UAAU,GACrBvB,GAEJnC,GAEJ,CAACA,GAEL4D,EAAgB/D,KAAKkH,iBAAiBD,GACtCpD,EAAYpF,EAAAqF,WAAWmD,EAAQE,KAAK1I,EAAA2I,WAAY9E,GAEtDtC,KAAKY,SAAS,CAAET,KAAM8G,EAASpD,UAAAA,EAAWE,cAAAA,QACvC,CACH,MAAMF,EAAYpF,EAAAqF,WAAW3D,EAAMmC,GAEnCtC,KAAKY,SAAS,CAAET,KAAAA,EAAM0D,UAAAA,MAK1B/D,YACJE,KAAKY,SAAS,CAAEgD,KAAM,QAGlB9D,aACJE,KAAKY,SAAS,CAAEgD,KAAM,SAGlB9D,cACJE,KAAKY,SAAS,CAAEgD,KAAM,UAGlB9D,cAAcK,GAClBH,KAAKyB,YAAYtB,GACjBH,KAAKY,SAAS,CAAEgD,KAAM,QAGlB9D,aAAaK,GACjBH,KAAKyB,YAAYtB,GACjBH,KAAKY,SAAS,CAAEgD,KAAM,QAGlB9D,UACJE,KAAKY,SAAS,CAAET,KAAMH,KAAKyD,mBAGvB3D,cACJ,MAAMuH,EAAc5I,EAAAkC,QAAQX,KAAKoB,MAAMjB,MACjCH,KAAKoB,MAAMjB,KAAKH,KAAKoB,MAAM2C,eAC3B/D,KAAKoB,MAAMjB,KAEjB,GAAIkH,EAAa,CACb,MAAMlH,EAAO,IAAIuD,KAAK2D,GAEtBlH,EAAKmH,SAASnH,EAAKoH,WAAa,GAEhCvH,KAAKY,SAAS,CAAET,KAAAA,KAIhBL,cACJ,MAAMuH,EAAc5I,EAAAkC,QAAQX,KAAKoB,MAAMjB,MACjCH,KAAKoB,MAAMjB,KAAKH,KAAKoB,MAAM2C,eAC3B/D,KAAKoB,MAAMjB,KAEjB,GAAIkH,EAAa,CACb,MAAMlH,EAAO,IAAIuD,KAAK2D,GAEtBlH,EAAKmH,SAASnH,EAAKoH,WAAa,GAEhCvH,KAAKY,SAAS,CAAET,KAAAA,KAIhBL,aAAa0H,GACjB,MAAMlF,OAAEA,GAAWtC,KAAKV,MACxB,IAAIiB,EAAQP,KAAKV,MAAMiB,OAAS,IAAImD,KAAK,cAEzC,GAAK8D,EAME,CACH,MAAMC,EAAWD,EAAKE,MAAM,KACtBC,EAAUlJ,EAAAkC,QAAQJ,GAClBA,EAAMqH,IAAItD,GACN7F,EAAAqI,QACIxC,EACAuD,SAASJ,EAAS,GAAI,IACtBI,SAASJ,EAAS,GAAI,MAG9BhJ,EAAAqI,QACIvG,EACAsH,SAASJ,EAAS,GAAI,IACtBI,SAASJ,EAAS,GAAI,KAG1B5D,EAAYpF,EAAAqF,WAAW6D,EAASrF,GAEtCtC,KAAKY,SAAS,CAAEiD,UAAAA,GAAa,IAAM7D,KAAKC,WAAW0H,GAAS,SAvBxDlJ,EAAAkC,QAAQJ,KACRA,EAAQA,EAAMqH,IAAIE,GAAKrJ,EAAA8D,WAAWuF,KAGtC9H,KAAKC,WAAWM,GAAO,IA/iBjBX,EAAAqD,WAAa,IACbrD,EAAAsD,YAAc,IAqBdtD,EAAAmI,aAA4C,CACtDzF,OAAQ,cA3BhB3D,EAAAiB,cAAAA,yECjGA,MAAA3B,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBAEAM,EAAAP,EAAAC,EAAA,GAcA6J,EAAA9J,EAAAC,EAAA,GACA8J,EAAA/J,EAAAC,EAAA,GAmCM+J,EAAwB9J,EAAAe,QAAOC;;cAEvBE,GACNA,EAAME,OAAS,OAAS;EAG1B2I,EAAkB/J,EAAAe,QAAOC;;;;;;;;;;;;iBAYdE,GACLA,EAAME,OAAS,kBAAoB;;;;;;;;;EAWzC4I,EAAiBhK,EAAAe,QAAOC;;;cAGhBE,GAAkCA,EAAME,OAAS,MAAQ;EAGjE6I,EAAgBjK,EAAAe,QAAOC;;;;;;;;;;;;;;;;;;;EAqBvBkJ,EAAUlK,EAAAe,QAAOC;;;;;;;;EAUjBmJ,EAAQnK,EAAAe,QAAOqJ;;;;;;;;;;;;;;;;;;UAkBXlJ,GACEA,EAAMsF,WACAxG,EAAAqB;;;;;;;;oBASA;;;;;;;;;;;EAalBd,EAAAkH,KAAA,cAA0B5H,EAAMwK,cAsI5B3I,YAAYR,GACRS,MAAMT,GA3HFU,KAAA0I,cAAuC,KACvC1I,KAAA2I,iBAAmB,IAAIC,IAoUvB5I,KAAA6I,aAAe,MACnB,IAAI3I,EAEJ,OAAO4I,IACHzI,aAAaH,GAEbA,EAAUI,WAAW,KACjB,GAAIN,KAAK0I,cAAe,CACpB,MAAMK,EAAW/I,KAAK0I,cAAcM,cAChC,aAGAD,IACAA,EAASE,iBACTjJ,KAAK0I,cAAcQ,SAAS,CAAEC,KAAM,QAG7CL,KAjBY,GAxMnB9I,KAAKoB,MAAQ,GAEbpB,KAAKyB,YAAczB,KAAKyB,YAAYF,KAAKvB,MACzCA,KAAK6B,cAAgB7B,KAAK6B,cAAcN,KAAKvB,MAC7CA,KAAK8B,aAAe9B,KAAK8B,aAAaP,KAAKvB,MAC3CA,KAAKoJ,gBAAkBpJ,KAAKoJ,gBAAgB7H,KAAKvB,MACjDA,KAAKqJ,gBAAkBrJ,KAAKqJ,gBAAgB9H,KAAKvB,MACjDA,KAAKsJ,gBAAkBtJ,KAAKsJ,gBAAgB/H,KAAKvB,MAEjDA,KAAKuJ,aAAe9K,EAAA+K,kBACpBxJ,KAAKyJ,WAAahL,EAAAiL,eAAc,GA/IpCC,UACI,OAAO,IAAIjG,KAGP5D,QAAQK,GACZ,OAAQ1B,EAAAkC,QAAQR,GAAQA,EAAKH,KAAKV,MAAMyE,eAAiB5D,EAM7DyJ,kBACI,MAAMzJ,EAAOH,KAAK6J,QAAQ7J,KAAKV,MAAMa,MAC/B2J,EAAY3J,EAAKoH,WACjBwC,EAAW5J,EAAK6J,cAGhBC,KAAcH,KAAaC,IAC3BG,EAASlK,KAAK2I,iBAAiBwB,IAAIF,GAEzC,GAAIC,EACA,OAAOA,EAIX,MAAME,EAAoB,GAE1B,IAAIC,EAAO5L,EAAA6L,aAAanK,GACpBoK,EAAO,EAEX,KACI9L,EAAAmI,YAAYyD,GAAM9C,aAAeuC,GACjCrL,EAAAoI,UAAUwD,GAAM9C,aAAeuC,GACjC,CACE,MAAMU,EAAY/L,EAAAmI,YACd,IAAIlD,KAAKqG,EAAUD,EAAoB,EAATS,IAAS,IAG3CH,EAAM/G,KAAK,CACPmH,EACA/L,EAAAgM,QAAQD,EAAW,GACnB/L,EAAAgM,QAAQD,EAAW,GACnB/L,EAAAgM,QAAQD,EAAW,GACnB/L,EAAAgM,QAAQD,EAAW,GACnB/L,EAAAgM,QAAQD,EAAW,GACnB/L,EAAAgM,QAAQD,EAAW,KAGvBH,EAAO5L,EAAAgM,QAAQJ,EAAM,GAKzB,OAFArK,KAAK2I,iBAAiB+B,IAAIT,EAAUG,GAE7BA,EAGXO,gBACI,MAAMpK,MAAEA,EAAAQ,QAAOA,EAAAC,QAASA,GAAYhB,KAAKV,MACnCqH,EAAY3G,KAAK6J,QAAQtJ,GACzBqK,EAAO5K,KAAK6J,QAAQ7J,KAAKV,MAAMa,MAAM6J,cAErCa,EAAgB,CAAC1K,EAAY2K,MAC/B3K,EAAO,IAAIuD,KAAKvD,IACX4K,YAAYD,GAEjB,MAAME,EAAUvM,EAAA8F,UAAU,OAAQpE,EAAMH,KAAKV,OACvCyJ,EAAW6B,IAASE,EAU1B,OARIvK,IACAJ,EAAK8K,WAAWtE,EAAUuE,cAC1B/K,EAAKgL,WAAWxE,EAAUK,cAC1B7G,EAAKiL,SAASzE,EAAUI,YACxB5G,EAAK2G,QAAQH,EAAUkD,WACvB1J,EAAKmH,SAASX,EAAUY,aAGrB,CAAEpH,KAAAA,EAAM6K,QAAAA,EAASjC,SAAAA,IAG5B,GAAIhI,IAAYC,EAAS,CACrB,MAAMqK,EAActK,EAAQiJ,cAE5B,OAAOsB,MAAM,KACRC,UAAK/I,GACLoF,IAAI,CAAC4D,EAAGC,IAAMZ,EAAc9J,EAASsK,EAAcI,IACnDC,OAAOC,GAAOA,EAAIX,SACpB,IAAKjK,GAAWC,EAAS,CAC5B,MAAMqK,EAAcrK,EAAQgJ,cAE5B,OAAOsB,MAAM,KACRC,UAAK/I,GACLoF,IAAI,CAAC4D,EAAGC,IAAMZ,EAAc7J,EAASqK,EAAcI,IACnDC,OAAOC,GAAOA,EAAIX,SAClBY,UACF,GAAI7K,GAAWC,EAAS,CAC3B,MAAM6K,EAAU9K,EAAQiJ,cAElB8B,EAIA,GAEN,IAAK,IAAIL,EAPOzK,EAAQgJ,cAOFyB,GAAKI,EAASJ,IAChCK,EAAMzI,KAAKwH,EAAc7J,EAASyK,IAGtC,OAAOK,EAAMF,UACV,CACH,MAAMjC,EAAM3J,KAAK2J,IACXtC,EAAcV,EAAYgD,EAAMhD,EAAYgD,EAC5C0B,EAAchE,EAAY2C,cAEhC,OAAOsB,MAAM,KACRC,UAAK/I,GACLoF,IAAI,CAAC4D,EAAGC,KACL,MAAMtL,EAAO,IAAIuD,KAAK2D,GAEtBlH,EAAK4K,YAAYM,EAAcI,GAE/B,MAAMT,EAAUvM,EAAA8F,UAAU,OAAQpE,EAAMH,KAAKV,OACvCyJ,EAAW6B,IAASzK,EAAK6J,cAE/B,MAAO,CAAE7J,KAAAA,EAAM6K,QAAAA,EAASjC,SAAAA,KAE3B2C,OAAOC,GAAOA,EAAIX,SAClBY,WAoBN9L,mBAAmBkE,GACjBvF,EAAAiC,UAAUsD,EAAU7D,KAAMH,KAAKV,MAAMa,OACtCH,KAAK6I,aAAa,IAInB/I,SACH,MAAM8D,KAAEA,EAAApE,OAAMA,EAAAoD,SAAQA,EAAApC,YAAUA,GAAgBR,KAAKV,MAErD,GAAIsD,EACA,OAAQgB,GACJ,IAAK,OACL,IAAK,QACD,OACI3F,EAAAgH,cAACiD,EAAqB,CAAC1I,OAAQA,GAC1BQ,KAAK+L,mBACL/L,KAAKgM,kBAGlB,IAAK,MACD,OACI/N,EAAAgH,cAACmD,EAAc,CAAC5I,OAAQA,GACnBQ,KAAKiM,cACLzL,GAAeR,KAAKkM,iBAMzC,OAAO,KAGHpM,iBACJ,OACI7B,EAAAgH,cAACoD,EAAa,CAAC7C,IAAKxF,KAAKoJ,gBAAiBjG,UAAU,SAC/CnD,KAAK2K,UACD/C,IAAI,EAAGzH,KAAAA,EAAM4I,SAAAA,MACV,MAAMoD,EAAWhM,EAAK6J,cAChBoC,EAAUjM,EAAKkM,cAErB,OACIpO,EAAAgH,cAAC+C,EAAAsE,OAAM,CACHC,IAAKH,EACLI,UAAW,EACXrJ,UAAW4F,EAAW,gBAAavG,EACnCuG,SAAUA,EAAQ0D,YACPL,EACXM,QAAS1M,KAAK8B,cAEbqK,KAIZP,WAKT9L,mBACJ,MAAMS,MAAEA,EAAAf,OAAOA,GAAWQ,KAAKV,MACzBqH,EAAY3G,KAAK6J,QAAQtJ,GACzBJ,EAAOH,KAAK6J,QAAQ7J,KAAKV,MAAMa,MAC/BwM,EAAQpM,GAASoG,EAAUY,WAC3BqD,EAAOrK,GAASoG,EAAUqD,cAEhC,OACI/L,EAAAgH,cAACkD,EAAe,CAAC3I,OAAQA,EAAQ2D,UAAU,UACtCnD,KAAKyJ,WAAW7B,IAAI,CAACgF,EAAKnB,KACvB,MAAM9D,EAAU,IAAIjE,KAAKvD,GAEzBwH,EAAQL,SAASmE,GAEjB,MAAMT,EAAUvM,EAAA8F,UAAU,QAASoD,EAAS3H,KAAKV,OAC3CyJ,EACF4D,IAAUhF,EAAQJ,YAClBqD,IAASjD,EAAQqC,cAErB,OACI/L,EAAAgH,cAAC+C,EAAAsE,OAAM,CACHC,IAAKK,EACLJ,UAAW,EACXrJ,UAAW4F,EAAW,gBAAavG,EACnCuG,SAAUA,EACVxF,UAAWyH,EAAOyB,YACP9E,EAAQ0E,cACnBK,QAAS1M,KAAK6B,eAEb+K,MAQjB9M,cACJ,MAAM6E,iBAAEA,EAAAC,WAAkBA,EAAApF,OAAYA,GAAWQ,KAAKV,OAChDuN,SAAEA,GAAa7M,KAAKoB,OACnB0L,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAAOpN,KAAKuJ,aAEjD,OACItL,EAAAgH,cAACsD,EAAK,CACFpF,UAAU,QACVyB,WAAYA,EACZpF,OAAQA,EACR6N,YAAa,EACbC,YAAa,GAEbrP,EAAAgH,cAAA,QAAA,KACIhH,EAAAgH,cAAA,KAAA,KACKN,GAAoB1G,EAAAgH,cAAA,KAAA,CAAI9B,UAAU,kBACnClF,EAAAgH,cAAA,KAAA,KAAK8H,GACL9O,EAAAgH,cAAA,KAAA,KAAK+H,GACL/O,EAAAgH,cAAA,KAAA,KAAKgI,GACLhP,EAAAgH,cAAA,KAAA,KAAKiI,GACLjP,EAAAgH,cAAA,KAAA,KAAKkI,GACLlP,EAAAgH,cAAA,KAAA,KAAKmI,GACLnP,EAAAgH,cAAA,KAAA,KAAK6H,KAGb7O,EAAAgH,cAAA,QAAA,KACKjF,KAAK4J,YAAYhC,IAAI2F,IAClB,MAAMC,EAAU/O,EAAAgP,cAAcF,EAAM,IAEpC,OACItP,EAAAgH,cAAA,KAAA,CAAIsH,IAAKiB,GACJ7I,GACG1G,EAAAgH,cAAA,KAAA,CAAI9B,UAAU,iBACVlF,EAAAgH,cAACgD,EAAAyF,QAAO,CACJhH,IAAK6G,EAAM,GACXb,QAAS1M,KAAKyB,aAEb+L,IAIZD,EAAM3F,IAAIzH,GACPlC,EAAAgH,cAAA,KAAA,CACI9B,UAAU,MACVoJ,IAAKpM,EAAKkM,eAEVpO,EAAAgH,cAACgD,EAAA0F,IAAG,CACAjH,IAAKvG,EACL0M,SAAUA,EACV1M,KAAMH,KAAKV,MAAMa,KACjBI,MAAOP,KAAKV,MAAMiB,MAClBQ,QAASf,KAAKV,MAAMyB,QACpBC,QAAShB,KAAKV,MAAM0B,QACpB4D,WAAY5E,KAAKV,MAAMsF,WACvB3D,YAAajB,KAAKV,MAAM2B,YACxByB,SAAU1C,KAAKV,MAAMoD,SACrBjB,YAAazB,KAAKyB,YAClBmM,aAAc5N,KAAKqJ,gBACnBwE,aAAc7N,KAAKsJ,yBAYnDxJ,gBACJ,MAAM+D,UAAEA,EAAAvB,OAAWA,GAAWtC,KAAKV,MAC7B6E,EAAY1F,EAAA2F,aAAaP,EAAWvB,GACpCwL,IAAU3J,IACV1F,EAAAkC,QAAQwD,GACJA,EAAUE,MAAMyD,GAAKrJ,EAAA8F,UAAU,MAAOuD,EAAG9H,KAAKV,QAC9Cb,EAAA8F,UAAU,MAAOJ,EAAWnE,KAAKV,QAG3C,OACIrB,EAAAgH,cAACqD,EAAO,KACJrK,EAAAgH,cAAC+C,EAAAsE,OAAM,CACHE,UAAW,EACXjJ,UAAWuK,EACXpB,QAAS,IAAM1M,KAAKV,MAAMwG,YAAU,OA6B5ChG,YAAYK,GAChB,MAAMsB,YAAEA,EAAAjB,YAAaA,EAAAsF,SAAaA,GAAa9F,KAAKV,MAEpDmC,EAAYtB,GAEPK,GACDsF,IAIAhG,cAAciO,GAClB,MAAM5N,EAAO,IAAIuD,KAAKjF,EAAAuP,aAAaD,EAAEE,cAAe,cAEpD3N,WAAW,IAAMN,KAAKV,MAAMuC,cAAc1B,GAAO,GAG7CL,aAAaiO,GACjB,MAAM5N,EAAO,IAAIuD,KAAKjF,EAAAuP,aAAaD,EAAEE,cAAe,cAEpD3N,WAAW,IAAMN,KAAKV,MAAMwC,aAAa3B,GAAO,GAG5CL,gBAAgBoO,GACpBlO,KAAK0I,cAAgBwF,EAErBlO,KAAK6I,aAAa,GAGd/I,gBAAgB4G,GAChB1G,KAAKV,MAAM2B,aACXjB,KAAKY,SAAS,CAAEiM,SAAUnG,IAI1B5G,kBACAE,KAAKV,MAAM2B,aACXjB,KAAKY,SAAS,CAAEiM,cAAUrK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4/DC5iBtC,MAAAvE,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBAEA6J,EAAA9J,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GAOAgQ,EAAAjQ,EAAAC,EAAA,QAeMe,EAAYd,EAAAe,QAAOC;eACVE,GAA+BA,EAAM8O,KAAO,OAAS;;;;;;;;EAUpEzP,EAAA+G,UAAA,cAA+BzH,EAAMwK,cAGjC4F,mBACI,MAAMtN,QAAEA,EAAAZ,KAASA,GAASH,KAAKV,MAE/B,SAAIyB,IAAWZ,IACJ1B,EAAA6P,aAAa7P,EAAA6L,aAAatK,KAAKG,MAAO,GAAKY,EAM1DwN,mBACI,MAAMvN,QAAEA,EAAAb,KAASA,GAASH,KAAKV,MAE/B,GAAI0B,GAAWb,EAAM,CACjB,MAAMqO,EAAWL,EAAAxN,QAAQR,GAAQA,EAAKA,EAAKqG,OAAS,GAAKrG,EAEzD,OAAO1B,EAAAgM,QAAQhM,EAAAgQ,WAAWD,GAAW,GAAKxN,EAG9C,OAAO,EAGXb,WACI,MAAMA,KAAEA,EAAA4D,cAAMA,GAAkB/D,KAAKV,MAErC,OAAQ6O,EAAAxN,QAAQR,GAAQA,EAAK4D,GAAiB5D,EAGlDL,YAAYR,GACRS,MAAMT,GAENU,KAAKyJ,WAAahL,EAAAiL,gBAGf5J,SACH,MAAM8D,KACFA,EAAA5B,YACAA,EAAAC,YACAA,EAAA0D,QACAA,EAAA5D,QACAA,EAAA6D,OACAA,GACA5F,KAAKV,MACH8O,EAAgB,QAATxK,EACPzD,EAAOH,KAAKG,KAElB,OACIlC,EAAAgH,cAAC/F,EAAS,CAACiE,UAAU,4BAA4BiL,KAAMA,GACnDnQ,EAAAgH,cAAA,MAAA,KACIhH,EAAAgH,cAAC+C,EAAAsE,OAAM,CACHnJ,UAAU,8BACVqJ,UAAW,EACXE,QAAS/G,GAET1H,EAAAgH,cAAA,IAAA,KAAIjF,KAAKyJ,WAAWtJ,EAAKoH,cAE7BtJ,EAAAgH,cAAC+C,EAAAsE,OAAM,CACHnJ,UAAU,6BACVqJ,UAAW,EACXE,QAAS9G,GAERzF,EAAK6J,gBAGd/L,EAAAgH,cAAA,MAAA,KACIhH,EAAAgH,cAAC+C,EAAAsE,OAAM,CACHnJ,UAAU,mCACVqJ,UAAW,EACXjJ,SAAUvD,KAAKqO,aACf3B,QAASzK,GAAW,KAIxBhE,EAAAgH,cAAC+C,EAAAsE,OAAM,CACHnJ,UAAU,oCACVqJ,UAAW,EACXE,QAAS3K,GAAO,KAIpB9D,EAAAgH,cAAC+C,EAAAsE,OAAM,CACHnJ,UAAU,mCACVqJ,UAAW,EACXjJ,SAAUvD,KAAKuO,aACf7B,QAAS1K,GAAW,gFC5H5C,MAAA/D,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBACAM,EAAAP,EAAAC,EAAA,GAcA6J,EAAA9J,EAAAC,EAAA,GACAuQ,EAAAxQ,EAAAC,EAAA,GAgCaQ,EAAAgQ,KAAOvQ,EAAAe,QAAOC;;;;;EAOdT,EAAAO,UAAYd,EAAAe,QAAOR,EAAAgQ;;;;;cAKlBrP,GACNA,EAAMiE,SAAW,cAAgB;;;;EAMzC,MAAMqL,EAAQxQ,EAAAe,QAAO0P;;;cAGPvP,GAAwBA,EAAMiE,SAAW,cAAgB;sBACjDjE,GACdA,EAAMiE,SAAW,OAAS;;;;;;;;;;;;;;;;;;;;;;;;EA0BrB5E,EAAAmQ,YAAc1Q,EAAAe,QAAO6I,EAAA+G;;EAIrBpQ,EAAAqQ,YAAc5Q,EAAAe,QAAO0P;;;EAKrBlQ,EAAAsQ,KAAO7Q,EAAAe,QAAO0P;;;;;oBAKPvP,GAA6BA,EAAM4P;;EAIvD,MAAMC,EAAY,CAAC1Q,EAAA2Q,KAAKC,UAAW5Q,EAAA2Q,KAAKE,OAAQ7Q,EAAA2Q,KAAKG,KAE/CC,EAAiB,CACnB/Q,EAAA2Q,KAAKK,MACLhR,EAAA2Q,KAAKM,WACLjR,EAAA2Q,KAAKO,YACLlR,EAAA2Q,KAAKQ,SACLnR,EAAA2Q,KAAKS,WACLpR,EAAA2Q,KAAKG,KAGT5Q,EAAAyH,MAAA,cAA2BnI,EAAMwK,cA2C7B3I,YAAYR,GACRS,MAAMT,GA3CFU,KAAA8P,OAA4B,GA0a5B9P,KAAAgG,QAAU,MACd,IAAI9F,EAEJ,OAAO6N,IACH1N,aAAaH,GAEb,MAAMP,EAAQoO,EAAEE,cAEhBxP,EAAAsR,cAAcpQ,GAEdO,EAAUI,WAAW,KACjB,IAAKN,KAAKoB,MAAM4O,YAAa,CACzB,MAAMC,EAAcxR,EAAAuP,aAAarO,EAAO,cAExCK,KAAKV,MAAM+C,oBAAoB4N,KAEpC,MAhBO,GA7XdjQ,KAAKoB,MAAQ,GAEbpB,KAAKkQ,YAAclQ,KAAKkQ,YAAY3O,KAAKvB,MACzCA,KAAKmQ,UAAYnQ,KAAKmQ,UAAU5O,KAAKvB,MACrCA,KAAKoQ,QAAUpQ,KAAKoQ,QAAQ7O,KAAKvB,MACjCA,KAAKgG,QAAUhG,KAAKgG,QAAQzE,KAAKvB,MACjCA,KAAK0M,QAAU1M,KAAK0M,QAAQnL,KAAKvB,MACjCA,KAAKqQ,WAAarQ,KAAKqQ,WAAW9O,KAAKvB,MACvCA,KAAKsQ,OAAStQ,KAAKsQ,OAAO/O,KAAKvB,MAC/BA,KAAKS,SAAWT,KAAKS,SAASc,KAAKvB,MACnCA,KAAKoC,QAAUpC,KAAKoC,QAAQb,KAAKvB,MACjCA,KAAKoF,SAAWpF,KAAKoF,SAAS7D,KAAKvB,MAtDvCuQ,mBACI,OAAOvQ,KAAKV,MAAMgD,OAAOoF,MAAM,IAAI8I,OAC/B,CAACC,EAAMC,KACH,MAAMC,EAAWF,EAAKA,EAAKjK,OAAS,GAQpC,OANImK,GAAYD,IAASC,EAASC,OAAO,EAAG,GACxCH,EAAKA,EAAKjK,OAAS,IAAMkK,EAEzBD,EAAO,IAAIA,EAAMC,GAGdD,GAEX,IAIRI,cACI,OAAOC,SAAS9H,cAAc,UAGlC+H,gBACI,MAAMrO,SAAEA,EAAAE,SAAUA,GAAa5C,KAAKV,MAEpC,OAAKsD,GAAYF,EACN,OAGJ,WAGXwM,WACI,OAAQlP,KAAK+Q,WACT,IAAK,WACD,MAAO,KACX,IAAK,OACD,MAAO,KAqBZjR,mBAAmBkE,GACtB,MAAMmB,KAAEA,EAAA5E,MAAMA,EAAA+B,OAAOA,EAAAsB,KAAQA,GAAS5D,KAAKV,MAG3C,IAFiBU,KAAK8P,OAAOkB,KAAKC,GAAOA,IAAQjR,KAAK6Q,UAG9C1L,EAAM,CACN,GAAInB,EAAUzD,QAAUA,GAAAA,EAAgB,CACpC,MAAM2Q,EAAQzS,EAAA0S,UAAU5Q,EAAO+B,GACzB3C,EAAQK,KAAK8P,OAAO,GAE1B9P,KAAK8P,OAAOsB,QACR,CAACzR,EAAO8L,IAAO9L,EAAM0R,UAAYH,EAAMzF,IAGvC9L,GACAA,EAAM2R,QAId,IAAKtN,EAAUmB,MAAQ5E,IAAUyD,EAAUzD,MAAO,CAC9C,MAAOZ,GAASK,KAAK8P,OAEjBnQ,GACAlB,EAAAsR,cAAcpQ,IAM9B,GAAIwF,GAAQnB,EAAUJ,OAASA,IAAS5D,KAAKoB,MAAM4O,YAAa,CAC5D,MAAMrQ,EAAQK,KAAK8P,OAAOyB,KAAKrD,IAC3B,MAAM5L,EAAS7D,EAAAuP,aAAaE,EAAI,cAGhC,OAFazP,EAAAgI,cAAcnE,KAEXsB,IAGpBnF,EAAAsR,cAAcpQ,GAGlB,IAAKwF,GAAQ5E,EAAO,CAChB,MAAM2Q,EAAQzS,EAAA0S,UAAU5Q,EAAO+B,GAE/BtC,KAAK8P,OAAOsB,QAAQ,CAACzR,EAAO8L,IAAO9L,EAAM0R,UAAYH,EAAMzF,IAG3DtG,GAAQnB,EAAUzD,QAAUA,GAC5BP,KAAK8P,OAAOsB,QAAQzR,GAAUA,EAAM0R,UAAY,IAG/ClM,GACDnF,KAAKY,SAAS,CAAEoP,aAAa,IAI9BlQ,oBACCE,KAAKV,MAAMiB,OACXP,KAAKwR,cAIN1R,SACH,MAAM4E,YACFA,EAAAnE,MACAA,EAAAqC,SACAA,EAAAF,SACAA,EAAAa,SACAA,EAAA4B,KACAA,GACAnF,KAAKV,MACHmS,EAAkBzR,KAAKV,MAAM2G,sBAAwByI,EAAAgD,YACrDC,EAAkBjN,IAAgBS,EAClCyM,EAAcrR,IAAUgD,EACxBsO,EAAWnP,IAAaE,EAE9B,OACI3E,EAAAgH,cAACtG,EAAAO,UAAS,CAAA4S,YACI,QACV3O,UAAU,wCACVI,SAAUA,EACVmJ,QAAS1M,KAAKoF,UAEdnH,EAAAgH,cAACtG,EAAAgQ,KAAI,KACD1Q,EAAAgH,cAACtG,EAAAsQ,KAAI,CACDC,KAAMlP,KAAKkP,KACX/L,iCAAkCnD,KAAK+Q,cAE3C9S,EAAAgH,cAACtG,EAAAgQ,KAAI,KACA3O,KAAKyF,cACLkM,GACG1T,EAAAgH,cAACtG,EAAAqQ,YAAW,CAAC7L,UAAU,8BAClBuB,KAKjBzG,EAAAgH,cAACtG,EAAAgQ,KAAI,KACAiD,GACG3T,EAAAgH,cAACtG,EAAAmQ,YAAW,CACR3L,UAAU,yBACVqJ,UAAW,EACXE,QAAS1M,KAAKoC,SAAO,MAK3ByP,GACE5T,EAAAgH,cAACwM,EAAe,CAAClO,SAAUA,EAAU4B,KAAMA,MAOvDrF,cACJ,MAAMqF,KAAEA,EAAA5B,SAAMA,EAAA/D,OAAUA,EAAAe,MAAQA,GAAUP,KAAKV,MACzCyS,GAAmBxO,IAAa/D,EAEtC,IAAK2F,IAAS5E,EACV,OAAO,KAGX,MAAMgQ,aAAEA,GAAiBvQ,KAEzB,OACI/B,EAAAgH,cAACtG,EAAAgQ,KAAI,KACA4B,EAAa3I,IAAI,CAACoK,EAAOvG,KACtB,GAAc,MAAVuG,GAA2B,MAAVA,GAA2B,MAAVA,EAClC,OAAO,KACJ,CACH,MAAMC,EAAY1B,EAAa9E,EAAI,GAEnC,OACIxN,EAAAgH,cAAC2J,EAAK,CAAAsD,kCAAA,EAEFH,gBAAiBA,EACjBxO,SAAUA,EAAQ4O,mBACAH,EAAKI,iBACPH,EAChB1F,IAAKyF,EAAKK,aACEL,EACZxM,IAAKxF,KAAKkQ,YACVC,UAAWnQ,KAAKmQ,UAChBC,QAASpQ,KAAKoQ,QACdpK,QAAShG,KAAKgG,QACdsK,OAAQtQ,KAAKsQ,OACb5D,QAAS1M,KAAK0M,QACd4F,cAAetS,KAAKqQ,WACpB5P,SAAUT,KAAKS,eASnCX,YAAYoO,GACZA,EACAlO,KAAK8P,OAAOzM,KAAK6K,GAEjBlO,KAAK8P,OAAS,GAIdhQ,UAAUiO,GACd,MAAMzM,kBACFA,EAAAgB,OACAA,EAAA/B,MACAA,EAAAM,gBACAA,GACAb,KAAKV,MACHK,EAAQoO,EAAEE,eACVoD,UAAEA,EAAAkB,YAAWA,EAAAC,gBAAaA,GAAoB7S,EAC9C8S,EAAMC,eACNC,EAAe7R,QAAQ2R,EAAIG,YAAcH,EAAII,YACnD,IAAIC,EAAejL,SAASwJ,EAAW,IAEvC,OAAQtD,EAAEgF,SACN,KAAKtU,EAAA2Q,KAAK4D,MACV,KAAKvU,EAAA2Q,KAAK6D,IACV,KAAKxU,EAAA2Q,KAAKC,UACV,KAAK5Q,EAAA2Q,KAAK8D,IACV,KAAKzU,EAAA2Q,KAAK+D,MAEN,YADApF,EAAEqF,iBAEN,KAAK3U,EAAA2Q,KAAKO,YAQN,OAPA5B,EAAEqF,sBAEEb,aAAuBc,gBACvBd,EAAYjB,QAEZ7S,EAAAsR,cAAcpQ,IAGtB,KAAKlB,EAAA2Q,KAAKM,WAQN,OAPA3B,EAAEqF,sBAEEZ,aAA2Ba,gBAC3Bb,EAAgBlB,QAEhB7S,EAAAsR,cAAcpQ,IAGtB,KAAKlB,EAAA2Q,KAAKQ,SACV,KAAKnR,EAAA2Q,KAAKS,WACN9B,EAAEqF,iBAEF,MAAME,EAAYvF,EAAEgF,UAAYtU,EAAA2Q,KAAKQ,SAMrC,GAJI2D,MAAMT,KACNA,EAAe,GAGfU,SAASV,GAAe,CACxB,MAAM7C,EAAcxR,EAAAuP,aAAarO,EAAO,cAClC8T,EAAahV,EAAAgI,cAAcwJ,GAEjC,GAAKpP,GAgBD,GAAIN,GAASkT,EAAY,CACrB,MAAMC,EAAYJ,EAAY,MAAQ,WAEhC3L,EAAUlJ,EAAAkV,eACZpT,EACAkT,EACAC,EACA3F,EAAE6F,UAQN,GANgBnV,EAAA8F,UACZ,MACAoD,EACA3H,KAAKV,OAGI,CACT,MAAMuU,EAAYpV,EAAA0S,UAAUxJ,EAASrF,GAErCtC,KAAK8P,OAAOlI,IACR,CAACqJ,EAAKxF,IAAOwF,EAAII,UAAYwC,EAAUpI,UAnCjC,CAClB,MAAMqI,EAAM/F,EAAE6F,SAAW,GAAK,EACxBG,EACFjB,GAAgBQ,EAAYQ,GAAOA,GACjCE,EAAQvV,EAAAwV,oBACVF,EACA9D,GAGA+D,IACArU,EAAM0R,UACe,iBAAV2C,EACDA,EACAvV,EAAAyV,aAAaH,IA4B/BtV,EAAAsR,cAAcpQ,GACd2B,EAAkB7C,EAAA0V,UAAUnU,KAAK8P,OAAQxN,IAE7C,OAGR,MAAM8R,EAAY3V,EAAAuP,aAAarO,EAAO,cAChC+Q,EAAOjS,EAAA4V,mBAAmBtG,EAAEgF,SAC5BuB,EAAajD,IAAcsB,EAAetB,EAAYX,EAAOA,EAEnE,GAAIvB,EAAUoF,SAASxG,EAAEgF,UAAYhF,EAAEyG,SAAWzG,EAAE0G,QAChD,OAGJ,MAAMT,EAAQvV,EAAAwV,oBAAoBK,EAAYF,GAEzCJ,EAEuB,iBAAVA,IACdjG,EAAEqF,iBAEFzT,EAAM0R,UAAY2C,GAJlBjG,EAAEqF,kBAeDT,GAAgBtB,EAAU7K,QAAU4N,EAAU5N,QAC/CuH,EAAEqF,iBAIFtT,QAAQiO,GACZ,MAAMzM,kBAAEA,EAAAgB,OAAmBA,EAAAwD,SAAQA,EAAAV,SAAUA,GAAapF,KAAKV,MACzDK,EAAQoO,EAAEE,eACVoD,UAAEA,EAAAkB,YAAWA,EAAAC,gBAAaA,GAAoB7S,EAEpD,GAAIoO,EAAEgF,UAAYtU,EAAA2Q,KAAK4D,MAOnB,OANAjF,EAAEqF,iBAEEpT,KAAK6Q,SACL7Q,KAAK6Q,QAAQ6D,YAEjB5O,IAIAiI,EAAEgF,UAAYtU,EAAA2Q,KAAK6D,IAKnBjT,KAAKoB,MAAM4O,aACPjC,EAAEgF,UAAYtU,EAAA2Q,KAAKC,WAAatB,EAAEgF,UAAYtU,EAAA2Q,KAAKE,SAEnDtP,KAAK8P,OAAOsB,QAAQlD,GAAOA,EAAGmD,UAAY,IAE1C5S,EAAAsR,cAAc/P,KAAK8P,OAAO,KAG9B9P,KAAKY,SAAS,CAAEoP,aAAa,KAIxBjC,EAAEgF,UAAYtU,EAAA2Q,KAAKC,UACpBgC,EACA1R,EAAM0R,UAAY,GACXmB,aAA2Ba,iBAClC5U,EAAAsR,cAAcyC,IAMlBnB,EAAW7K,QAAU/H,EAAAuP,aAAarO,EAAO,cAAc6G,SAClDgJ,EAAe+E,SAASxG,EAAEgF,UAC/BhF,EAAEgF,UAAYtU,EAAA2Q,KAAK8D,KACnBnF,EAAEgF,UAAYtU,EAAA2Q,KAAK+D,SAEdZ,EAEMA,aAAuBc,iBAC9B5U,EAAAsR,cAAcwC,GAFd9T,EAAAsR,cAAcpQ,GAKlB2B,EAAkB7C,EAAA0V,UAAUnU,KAAK8P,OAAQxN,KArCzC8C,IAyCAtF,QAAQiO,GACZtP,EAAAsR,cAAchC,EAAEE,eAGZnO,WAAWiO,GACf,MAAMpO,EAAQoO,EAAEE,cAEZtO,EAAMgV,YAAc3U,KAAK8P,OAAOkB,KAAK9C,GAAMpN,QAAQoN,EAAGmD,cACtD5S,EAAAsR,cAAc/P,KAAK8P,OAAO,IAC1BrR,EAAAsR,cAAcpQ,EAAMgV,YACpB3U,KAAKY,SAAS,CAAEoP,aAAa,GAAQhQ,KAAKV,MAAM+G,cAwBhDvG,OAAOiO,GACX,MAAMpO,EAAQoO,EAAE6G,OACVrU,EAAQZ,EAAM0R,UACd+C,EAAY3V,EAAAuP,aAAarO,EAAO,cAGhCkV,EAAW,KACb,MAAMxD,MAAgB9Q,IAEtBZ,EAAM0R,UAAYA,GAGtB,OARmB5S,EAAAgI,cAAc2N,IAS7B,IAAK,MACa,MAAV7T,GAA2B,MAAVA,GAA2B,MAAVA,GAClCsU,IAEJ,MACJ,IAAK,QACa,MAAVtU,GACAsU,IAMZvU,WAAW,KACP,MAAMuQ,QAAEA,GAAY7Q,KAGhBA,KAAKV,MAAM6F,MACX0L,IACCpS,EAAAuP,aAAa6C,EAAS,mCAEvB7Q,KAAKV,MAAM8F,YAEhB,GAGCtF,SAASiO,GACb,MAAMzL,OAAEA,EAAAhB,kBAAQA,GAAsBtB,KAAKV,MACrCK,EAAQoO,EAAEE,eACVoD,UAAEA,EAAAkB,YAAWA,GAAgB5S,EAEnC2B,EAAkB7C,EAAA0V,UAAUnU,KAAK8P,OAAQxN,IAErC+O,EAAU7K,QAAU/H,EAAAuP,aAAarO,EAAO,cAAc6G,QAClD+L,aAAuBc,iBACvBd,EAAYjB,QAKhBxR,QAAQiO,GACZA,EAAE+G,kBAEF9U,KAAKV,MAAM8C,UAGPtC,SAASiO,GACb,MAAM5I,KAAEA,EAAA5B,SAAMA,EAAA6B,SAAUA,GAAapF,KAAKV,MAEtCiE,GAICvD,KAAK8P,OAAOkB,KAAKC,GAAOA,IAAQlD,EAAE6G,SAAYzP,GAC/CC","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n} from './typings';\nimport { ValueMulti } from './value-multi';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  max-height: 100%;\n                  font-size: 16px;\n\n                  /* TODO: add this to Button-component */\n                  button {\n                      font-size: 16px;\n                      margin-right: 6px;\n                      padding: 6px 12px;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentClass<MenuContainerProps, any>\n    ) {\n        if (!this.MobileMenuContainer) {\n            const mobileWidth = ReactTimebomb.MENU_WIDTH + 40;\n\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 50% !important;\n                top: 50% !important;\n                max-width: 96%;\n                width: ${mobileWidth}px !important;\n                height: ${ReactTimebomb.MENU_HEIGHT}px !important;\n                margin-left: -${mobileWidth / 2}px;\n                margin-top: -${ReactTimebomb.MENU_HEIGHT / 2}px;\n\n                @media (max-width: ${mobileWidth}px) {\n                    left: 0 !important;\n                    margin-left: 0;\n                    max-width: 100% !important;\n                }\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'day',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    getAttribute,\n    isArray,\n    dateEqual,\n    getWeekdayNames\n} from './utils';\nimport { Button } from './button';\nimport { Day, WeekNum } from './menu-day';\nimport { ReactTimebombDate } from './typings';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface MenuState {\n    hoverDay?: Date;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n    mobile?: boolean;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0 0 10px;\n    height: ${(props: { mobile?: boolean }) => (props.mobile ? '100' : 'auto')};\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    height: 100%;\n    font-size: inherit;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n            width: 14.285714286%;\n        }\n\n        td {\n            width: 14.285714286%;\n        }\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps, MenuState> {\n    private weekdayNames!: string[];\n    private monthNames!: string[];\n\n    private get now(): Date {\n        return new Date();\n    }\n\n    private getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[this.props.selectedRange] : date)!;\n    }\n\n    private yearContainer: HTMLDivElement | null = null;\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const date = this.getDate(this.props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { value, minDate, maxDate } = this.props;\n        const valueDate = this.getDate(value);\n        const year = this.getDate(this.props.date).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, this.props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = this.now;\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onYearContainer = this.onYearContainer.bind(this);\n        this.onDayMouseEnter = this.onDayMouseEnter.bind(this);\n        this.onDayMouseLeave = this.onDayMouseLeave.bind(this);\n\n        this.weekdayNames = getWeekdayNames();\n        this.monthNames = getMonthNames(true);\n    }\n\n    public componentDidUpdate(prevProps: MenuProps) {\n        if (!dateEqual(prevProps.date, this.props.date)) {\n            this.scrollToYear(64);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { mode, mobile, showDate, showConfirm } = this.props;\n\n        if (showDate) {\n            switch (mode) {\n                case 'year':\n                case 'month':\n                    return (\n                        <MonthAndYearContainer mobile={mobile}>\n                            {this.renderMenuMonths()}\n                            {this.renderMenuYear()}\n                        </MonthAndYearContainer>\n                    );\n                case 'day':\n                    return (\n                        <MonthContainer mobile={mobile}>\n                            {this.renderMonth()}\n                            {showConfirm && this.renderConfirm()}\n                        </MonthContainer>\n                    );\n            }\n        }\n\n        return null;\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { value, mobile } = this.props;\n        const valueDate = this.getDate(value);\n        const date = this.getDate(this.props.date);\n        const month = value && valueDate.getMonth();\n        const year = value && valueDate.getFullYear();\n\n        return (\n            <MonthsContainer mobile={mobile} className=\"months\">\n                {this.monthNames.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek, mobile } = this.props;\n        const { hoverDay } = this.state;\n        const [sun, mon, tue, wed, thu, fri, sat] = this.weekdayNames;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                mobile={mobile}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>{mon}</th>\n                        <th>{tue}</th>\n                        <th>{wed}</th>\n                        <th>{thu}</th>\n                        <th>{fri}</th>\n                        <th>{sat}</th>\n                        <th>{sun}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">\n                                        <WeekNum\n                                            day={dates[0]}\n                                            onClick={this.onSelectDay}\n                                        >\n                                            {weekNum}\n                                        </WeekNum>\n                                    </td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            day={date}\n                                            hoverDay={hoverDay}\n                                            date={this.props.date}\n                                            value={this.props.value}\n                                            minDate={this.props.minDate}\n                                            maxDate={this.props.maxDate}\n                                            selectWeek={this.props.selectWeek}\n                                            selectRange={this.props.selectRange}\n                                            showTime={this.props.showTime}\n                                            onSelectDay={this.onSelectDay}\n                                            onMouseEnter={this.onDayMouseEnter}\n                                            onMouseLeave={this.onDayMouseLeave}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isArray(validDate)\n                ? validDate.every(v => isEnabled('day', v, this.props))\n                : isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private scrollToYear = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (delay: number) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                if (this.yearContainer) {\n                    const selected = this.yearContainer.querySelector(\n                        '.selected'\n                    );\n\n                    if (selected) {\n                        selected.scrollIntoView();\n                        this.yearContainer.scrollBy({ top: -10 });\n                    }\n                }\n            }, delay);\n        };\n    })();\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        this.yearContainer = el;\n\n        this.scrollToYear(0);\n    }\n\n    private onDayMouseEnter(day: Date) {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: day });\n        }\n    }\n\n    private onDayMouseLeave() {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: undefined });\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { Button } from './button';\nimport {\n    subtractDays,\n    startOfMonth,\n    endOfMonth,\n    addDays,\n    getMonthNames\n} from './utils';\nimport { isArray } from 'util';\n\ninterface MenuTitleProps {\n    date: ReactTimebombState['date'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    onPrevMonth(): void;\n    onNextMonth(): void;\n    onReset(): void;\n    onMonth(): void;\n    onYear(): void;\n}\n\nconst Container = styled.div`\n    display: ${(props: { show: boolean }) => (props.show ? 'flex' : 'none')};\n    align-items: center;\n    width: 100%;\n    padding: 10px 10px 15px;\n    justify-content: space-between;\n    min-height: 66px;\n    box-sizing: border-box;\n    white-space: nowrap;\n`;\n\nexport class MenuTitle extends React.PureComponent<MenuTitleProps> {\n    private monthNames!: string[];\n\n    private get prevDisabled(): boolean {\n        const { minDate, date } = this.props;\n\n        if (minDate && date) {\n            return subtractDays(startOfMonth(this.date), 1) < minDate;\n        }\n\n        return false;\n    }\n\n    private get nextDisabled(): boolean {\n        const { maxDate, date } = this.props;\n\n        if (maxDate && date) {\n            const lastDate = isArray(date) ? date[date.length - 1] : date;\n\n            return addDays(endOfMonth(lastDate), 1) > maxDate;\n        }\n\n        return false;\n    }\n\n    private get date() {\n        const { date, selectedRange } = this.props;\n\n        return (isArray(date) ? date[selectedRange] : date)!;\n    }\n\n    constructor(props: MenuTitleProps) {\n        super(props);\n\n        this.monthNames = getMonthNames();\n    }\n\n    public render(): React.ReactNode {\n        const {\n            mode,\n            onNextMonth,\n            onPrevMonth,\n            onMonth,\n            onReset,\n            onYear\n        } = this.props;\n        const show = mode === 'day';\n        const date = this.date;\n\n        return (\n            <Container className=\"react-timebomb-menu-title\" show={show}>\n                <div>\n                    <Button\n                        className=\"react-timebomb-button-month\"\n                        tabIndex={-1}\n                        onClick={onMonth}\n                    >\n                        <b>{this.monthNames[date.getMonth()]}</b>\n                    </Button>\n                    <Button\n                        className=\"react-timebomb-button-year\"\n                        tabIndex={-1}\n                        onClick={onYear}\n                    >\n                        {date.getFullYear()}\n                    </Button>\n                </div>\n                <div>\n                    <Button\n                        className=\"react-timebomb-button-month-prev\"\n                        tabIndex={-1}\n                        disabled={this.prevDisabled}\n                        onClick={onPrevMonth}\n                    >\n                        ◀\n                    </Button>\n                    <Button\n                        className=\"react-timebomb-button-month-reset\"\n                        tabIndex={-1}\n                        onClick={onReset}\n                    >\n                        ○\n                    </Button>\n                    <Button\n                        className=\"react-timebomb-button-month-next\"\n                        tabIndex={-1}\n                        disabled={this.nextDisabled}\n                        onClick={onNextMonth}\n                    >\n                        ▶\n                    </Button>\n                </div>\n            </Container>\n        );\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled,\n    selectElement\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { SmallButton } from './button';\nimport { ArrowButton } from './arrow-button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format, mode } = this.props;\n        const hasFocus = this.inputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.inputs[0];\n\n                    this.inputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const [input] = this.inputs;\n\n                    if (input) {\n                        selectElement(input);\n                    }\n                }\n            }\n        }\n\n        if (open && prevProps.mode !== mode && !this.state.allSelected) {\n            const input = this.inputs.find(el => {\n                const format = getAttribute(el, 'data-group');\n                const type = getFormatType(format);\n\n                return type === mode;\n            });\n\n            selectElement(input);\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n        }\n\n        if (open && prevProps.value && !value) {\n            this.inputs.forEach(input => (input.innerText = ''));\n        }\n\n        if (!open) {\n            this.setState({ allSelected: false });\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp disabled={disabled} open={open} />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = e.shiftKey ? 10 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        // TODO: this doesn't work quite how suppossed to\n        // if (this.state.allSelected) {\n        //     const char = stringFromCharCode(e.keyCode);\n        //     this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n        //     this.inputs[0].innerText = char;\n        // }\n\n        // validate group\n        if (!hasSelection && innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}