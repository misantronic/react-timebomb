{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","DEFAULT_FORMAT","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","showTime","Boolean","format","test","super","value","this","state","allowValidation","mode","valueText","dateFormat","undefined","date","startOfDay","Date","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onToday","onNextMonth","onPrevMonth","onSelectTime","prevProps","prevState","setState","valueTextDidUpdate","validDate","validateDate","isDisabled","emitError","emitChange","isUndefined","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","minDate","maxDate","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","className","MenuTitle","onMonths","onYear","Menu","onSubmit","Fragment","onClose","type","onFocus","Value","clearSelection","setTimeout","formattedDate","error","onError","getTime","onChange","day","setDate","getHours","getMinutes","now","setMonth","getMonth","time","splitted","split","newDate","parseInt","button_1","Flex","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","css","Day","current","selected","today","disabled","PureComponent","monthMatrix","dateMonth","dateYear","getFullYear","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","push","addDays","style","display","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","currentDate","currentYear","year","Array","fill","map","_","i","setFullYear","endOfYear","Button","key","tabIndex","data-date","toString","onClick","months","getMonthNames","month","str","cellSpacing","cellPadding","dates","getWeekOfYear","j","renderDay","num","getDate","isToday","e","currentTarget","getAttribute","Input","span","button","ClearButton","Placeholder","Icon","WHITELIST_KEYS","keys","BACKSPACE","DELETE","TAB","searchInputs","onSearchRef","onKeyDown","onKeyUp","onClear","formatGroups","reduce","memo","char","prevChar","length","substr","focused","document","querySelector","some","inp","parts","splitDate","forEach","innerText","focus","selectText","showPlaceholder","data-role","renderValue","group","separator","contentEditable","data-placeholder","data-separator","data-group","el","range","createRange","sel","getSelection","selectNodeContents","removeAllRanges","addRange","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","keyCode","ENTER","ESC","preventDefault","ARROW_RIGHT","HTMLSpanElement","ARROW_LEFT","ARROW_UP","ARROW_DOWN","isArrowUp","isNaN","isFinite","formatGroup","formatType","getFormatType","direction","manipulateDate","dateParts","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataValue","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","blur","forbiddenKeys","SHIFT","setAttribute","stopPropagation","target"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isDisabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst DEFAULT_FORMAT = 'YYYY-MM-DD';\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    opacity: 0;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(\n                props.format && /H|h|m|k|a|S|s/.test(props.format)\n            )\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        this.state = {\n            allowValidation: false,\n            mode: 'month',\n            valueText: value ? dateFormat(value, format) : undefined,\n            date: value || startOfDay(new Date())\n        };\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onToday = this.onToday.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate();\n        }\n    }\n\n    private valueTextDidUpdate(): void {\n        const { valueText, allowValidation } = this.state;\n        const { format = DEFAULT_FORMAT } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const disabled = isDisabled(validDate, this.props);\n\n                if (disabled) {\n                    this.emitError('outOfRange', valueText!);\n                } else {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate)\n                    );\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            value,\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format = DEFAULT_FORMAT\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 300;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n\n        return (\n            <Select<Date> value={value} placeholder={placeholder}>\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => (\n                    <Container ref={onRef as any} className=\"react-timebomb\">\n                        {open ? (\n                            <MenuContainer\n                                menuWidth={menuWidth}\n                                menuHeight={menuHeight}\n                            >\n                                <MenuWrapper menuHeight={menuHeight}>\n                                    <MenuTitle\n                                        mode={mode}\n                                        date={this.state.date}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onMonths={this.onModeMonths}\n                                        onYear={this.onModeYear}\n                                        onNextMonth={this.onNextMonth}\n                                        onPrevMonth={this.onPrevMonth}\n                                        onToday={this.onToday}\n                                    />\n                                    <Menu\n                                        showTime={showTime}\n                                        showConfirm={showConfirm}\n                                        showCalendarWeek={showCalendarWeek}\n                                        selectWeek={selectWeek}\n                                        date={this.state.date}\n                                        value={value}\n                                        valueText={valueText}\n                                        format={format}\n                                        mode={mode}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onSelectDay={this.onSelectDay}\n                                        onSelectMonth={this.onSelectMonth}\n                                        onSelectYear={this.onSelectYear}\n                                        onSelectTime={this.onSelectTime}\n                                        onToggle={onToggle}\n                                        onSubmit={this.onValueSubmit}\n                                    />\n                                </MenuWrapper>\n                            </MenuContainer>\n                        ) : (\n                            <>\n                                {this.onClose()}\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            </>\n                        )}\n                        <Value\n                            placeholder={open ? undefined : placeholder}\n                            format={format}\n                            value={value}\n                            valueText={valueText}\n                            minDate={minDate}\n                            maxDate={maxDate}\n                            allowValidation={allowValidation}\n                            open={open}\n                            onChangeValueText={this.onChangeValueText}\n                            onToggle={onToggle}\n                            onSubmit={this.onValueSubmit}\n                        />\n                    </Container>\n                )}\n            </Select>\n        );\n    }\n\n    private onClose(): null {\n        clearSelection();\n\n        setTimeout(() => {\n            const { format = DEFAULT_FORMAT } = this.props;\n            const validDate = validateDate(this.state.valueText, format);\n            const isValid = validDate\n                ? !isDisabled(validDate, this.props)\n                : validDate;\n\n            if (!isValid && this.props.value) {\n                const formattedDate = dateFormat(this.props.value, format);\n\n                if (this.state.valueText !== formattedDate) {\n                    this.setState({ valueText: formattedDate });\n                }\n            }\n        }, 0);\n\n        return null;\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.props.onError && this.state.allowValidation) {\n            this.props.onError(error, value);\n        }\n    }\n\n    private emitChange(date?: Date): void {\n        const { value } = this.props;\n\n        if (value && date && value.getTime() === date.getTime()) {\n            return;\n        }\n\n        this.props.onChange(date);\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(valueText: string): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(onToggle: () => void): void {\n        onToggle();\n        clearSelection();\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format = DEFAULT_FORMAT } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format);\n\n        this.setState({ date, valueText }, () => this.emitChange(date));\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onToday(): void {\n        const now = startOfDay(new Date());\n\n        this.setState({ date: now });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format = DEFAULT_FORMAT } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value));\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format);\n\n            this.setState({ valueText }, () => this.emitChange(newDate));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isDisabled,\n    validateDate,\n    isToday,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    endOfYear\n} from './utils';\nimport { Button } from './button';\n\ninterface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    format: string;\n    onToggle(): void;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(onToggle: () => void): void;\n}\n\ninterface DayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: center;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        line-height: 3.13;\n        border: none;\n        margin: 0;\n        padding: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nconst Day = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: DayProps) => (props.current ? '#000' : '#aaa')};\n    background-color: ${(props: DayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: DayProps) => (props.selected ? 'bold' : 'normal')};\n    pointer-events: ${(props: DayProps) => (props.disabled ? 'none' : 'auto')};\n    user-select: none;\n    opacity: ${(props: DayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: DayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private get monthMatrix(): (Date[])[] {\n        const { date } = this.props;\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showConfirm } = this.props;\n\n        switch (mode) {\n            case 'year':\n            case 'months':\n                return (\n                    <div style={{ display: 'flex' }}>\n                        {this.renderMenuMonths()}\n                        {this.renderMenuYear()}\n                    </div>\n                );\n            case 'month':\n                return (\n                    <MonthContainer>\n                        {this.renderMonth()}\n                        {showConfirm && this.renderConfirm()}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        const { date: currentDate } = this.props;\n        const currentYear = this.now.getFullYear();\n        const year = currentDate.getFullYear();\n\n        return (\n            <YearContainer className=\"years\">\n                {Array(100)\n                    .fill(undefined)\n                    .map((_, i) => {\n                        const newDate = new Date(currentDate);\n\n                        newDate.setFullYear(currentYear - i);\n\n                        const disabled = isDisabled(\n                            endOfYear(newDate),\n                            this.props\n                        );\n                        const selected = year === newDate.getFullYear();\n\n                        return (\n                            <Button\n                                key={i}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                disabled={disabled}\n                                data-date={newDate.toString()}\n                                onClick={this.onSelectYear}\n                            >\n                                {currentYear - i}\n                            </Button>\n                        );\n                    })}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { date, value } = this.props;\n        const months = getMonthNames(true);\n        const month = value && value.getMonth();\n        const year = value && value.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    // TODO: funktioniet nicht ganz rund\n                    const disabled = isDisabled(newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={disabled}\n                            data-date={newDate.toString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { monthMatrix } = this;\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {monthMatrix.map((dates, i) => (\n                        <tr key={i}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    {getWeekOfYear(dates[0])}\n                                </td>\n                            )}\n                            {dates.map((date, j) => (\n                                <td className=\"day\" key={j}>\n                                    {this.renderDay(date)}\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderDay(day: Date): React.ReactNode {\n        const num = day.getDate();\n        const { value, date, selectWeek } = this.props;\n        let selected =\n            value &&\n            day.getDate() === value.getDate() &&\n            day.getMonth() === value.getMonth();\n        const current = day.getMonth() === date.getMonth();\n        const disabled = isDisabled(day, this.props);\n        const today = isToday(day);\n\n        if (selectWeek && value) {\n            selected = getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return (\n            <Day\n                data-date={day.toString()}\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={disabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {num}\n            </Day>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={validDate === null}\n                    onClick={() => this.props.onSubmit(this.props.onToggle)}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private onSelectDay(e: React.SyntheticEvent<HTMLDivElement>): void {\n        const date = new Date(e.currentTarget.getAttribute('data-date')!);\n\n        this.props.onSelectDay(date);\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isDisabled\n} from './utils';\nimport { ReactTimebombProps } from './typings';\n\ninterface ValueProps {\n    open?: boolean;\n    value?: Date;\n    valueText?: string;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    allowValidation?: boolean;\n    onToggle(): void;\n    onChangeValueText(valueText: string): void;\n    onSubmit(onToggle: () => void): void;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nconst Button = styled.button`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ClearButton = styled(Button)`\n    font-size: 18px;\n`;\n\nconst Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nconst Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '📅';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nexport class Value extends React.PureComponent<ValueProps> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (prevProps.value !== value && value) {\n                const parts = splitDate(value, format);\n                const input = this.searchInputs[0];\n\n                this.searchInputs.forEach(\n                    (input, i) => (input.innerText = parts[i])\n                );\n\n                if (input) {\n                    input.focus();\n                }\n            }\n\n            if ((open && !prevProps.open) || value !== prevProps.value) {\n                const input = this.searchInputs[0];\n\n                if (input) {\n                    if (input.innerText === '') {\n                        input.focus();\n                    } else {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <Button tabIndex={-1} className=\"react-timebomb-arrow\">\n                        {open ? '▲' : '▼'}\n                    </Button>\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef as any}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onClick={this.onFocus}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el?: HTMLSpanElement): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const nextValue = numericValue + (isArrowUp ? 1 : -1);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction\n                            );\n                            const disabled = isDisabled(newDate, this.props);\n\n                            if (!disabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group')!;\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, allowValidation } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        if (e.keyCode === keys.ENTER || e.keyCode === keys.ESC) {\n            if (this.focused) {\n                this.focused.blur();\n            }\n            this.props.onSubmit(this.props.onToggle);\n\n            return;\n        }\n\n        const forbiddenKeys = [\n            keys.SHIFT,\n            keys.ARROW_LEFT,\n            keys.ARROW_RIGHT,\n            keys.ARROW_UP,\n            keys.ARROW_DOWN,\n            keys.TAB\n        ];\n\n        // focus next\n        if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !forbiddenKeys.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', innerText);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onChangeValueText('');\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (\n            this.searchInputs.some(inp => inp === e.target) === false ||\n            !open\n        ) {\n            onToggle();\n        }\n    }\n}\n"]}