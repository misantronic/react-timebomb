{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","DEFAULT_FORMAT","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","showTime","Boolean","format","test","className","classNames","this","push","join","defaultDateValue","value","minDate","maxDate","date","Date","isBefore","isAfter","startOfDay","super","Error","state","allowValidation","mode","valueText","dateFormat","undefined","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onToday","onNextMonth","onPrevMonth","onSelectTime","prevProps","prevState","setState","valueTextDidUpdate","commit","validDate","validateDate","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","Value","onSubmit","MenuTitle","onMonths","onYear","Menu","Fragment","onClose","type","onFocus","clearSelection","setTimeout","formattedDate","dateEqual","error","onError","onChange","day","setDate","getHours","getMinutes","now","setMonth","getMonth","time","splitted","split","newDate","parseInt","button_1","Flex","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","css","Day","current","selected","today","disabled","PureComponent","monthMatrix","dateMonth","dateYear","getFullYear","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","addDays","fullYears","year","currentYear","Array","fill","map","_","i","setFullYear","enabled","filter","obj","reverse","minYear","array","currentDate","style","display","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","onYearContainer","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","months","getMonthNames","month","str","cellSpacing","cellPadding","dates","getWeekOfYear","j","renderDay","num","getDate","isToday","e","currentTarget","getAttribute","el","querySelector","scrollIntoView","scrollBy","top","Input","span","ArrowButton","ClearButton","Placeholder","Icon","WHITELIST_KEYS","keys","BACKSPACE","DELETE","TAB","searchInputs","onSearchRef","onKeyDown","onKeyUp","onBlur","onClear","formatGroups","reduce","memo","char","prevChar","length","substr","focused","document","some","inp","parts","splitDate","forEach","innerText","focus","selectText","showPlaceholder","data-role","renderValue","group","separator","contentEditable","data-placeholder","data-separator","data-group","data-react-timebomb-selectable","range","createRange","sel","getSelection","selectNodeContents","removeAllRanges","addRange","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","keyCode","ENTER","ESC","preventDefault","ARROW_RIGHT","HTMLSpanElement","ARROW_LEFT","ARROW_UP","ARROW_DOWN","isArrowUp","isNaN","isFinite","formatGroup","formatType","getFormatType","direction","manipulateDate","dateParts","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataValue","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","blur","forbiddenKeys","SHIFT","setAttribute","target","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst DEFAULT_FORMAT = 'YYYY-MM-DD';\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(\n                props.format && /H|h|m|k|a|S|s/.test(props.format)\n            )\n        };\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { value, minDate, maxDate, format = DEFAULT_FORMAT } = this.props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        this.state = {\n            allowValidation: false,\n            mode: 'month',\n            valueText: value ? dateFormat(value, format) : undefined,\n            date: this.defaultDateValue\n        };\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onToday = this.onToday.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format = DEFAULT_FORMAT } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format = DEFAULT_FORMAT\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 320;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format)\n            : this.props.value;\n\n        return (\n            <Select<Date> value={value} placeholder={placeholder}>\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            <Value\n                                placeholder={open ? undefined : placeholder}\n                                format={format}\n                                value={value}\n                                valueText={valueText}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowValidation={allowValidation}\n                                open={open}\n                                onChangeValueText={this.onChangeValueText}\n                                onToggle={onToggle}\n                                onSubmit={this.onValueSubmit}\n                            />\n                            {open ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper menuHeight={menuHeight}>\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onToday={this.onToday}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <>\n                                    {this.onClose()}\n                                    <BlindInput\n                                        type=\"text\"\n                                        onFocus={onToggle}\n                                    />\n                                </>\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private onClose(): null {\n        clearSelection();\n\n        setTimeout(() => {\n            const { format = DEFAULT_FORMAT, value } = this.props;\n            const validDate = validateDate(this.state.valueText, format);\n            const isValid = validDate\n                ? isEnabled('day', validDate, this.props)\n                : validDate;\n\n            if (!isValid && value) {\n                const formattedDate = dateFormat(value, format);\n\n                if (this.state.valueText !== formattedDate) {\n                    this.onChangeValueText(formattedDate);\n                    return;\n                }\n            }\n\n            if (!dateEqual(value, validDate)) {\n                if (value) {\n                    const formattedDate = dateFormat(value, format);\n\n                    this.onChangeValueText(formattedDate);\n                } else if (this.state.valueText !== undefined) {\n                    this.onChangeValueText(undefined);\n                }\n            }\n        }, 0);\n\n        return null;\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange(date: Date | undefined, commit: boolean): void {\n        const { value, showConfirm, onChange } = this.props;\n\n        if (!showConfirm) {\n            commit = true;\n        }\n\n        if (dateEqual(value, date)) {\n            return;\n        }\n\n        if (commit) {\n            onChange(date);\n        }\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(\n        valueText: string | undefined,\n        commit = false\n    ): void {\n        this.setState({ valueText }, () => {\n            if (commit) {\n                this.emitChange(undefined, true);\n            }\n        });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format = DEFAULT_FORMAT } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format);\n\n        this.setState({ date, valueText });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onToday(): void {\n        const now = startOfDay(new Date());\n\n        this.setState({ date: now });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format = DEFAULT_FORMAT } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value), false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    isToday,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    dateEqual\n} from './utils';\nimport { Button } from './button';\n\ninterface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface DayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: center;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        line-height: 3.13;\n        border: none;\n        margin: 0;\n        padding: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nconst Day = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: DayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: ${(props: DayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: DayProps) => (props.selected ? 'bold' : 'normal')};\n    pointer-events: ${(props: DayProps) => (props.disabled ? 'none' : 'auto')};\n    user-select: none;\n    opacity: ${(props: DayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: DayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private get monthMatrix(): (Date[])[] {\n        const { date } = this.props;\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { minDate, maxDate } = this.props;\n        const year = this.props.date.getFullYear();\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(minDate);\n\n                    date.setFullYear(currentYear + i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(maxDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                const date = new Date(maxDate);\n\n                date.setFullYear(i);\n\n                const enabled = isEnabled('year', date, this.props);\n                const selected = year === date.getFullYear();\n\n                array.push({ date, enabled, selected });\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showConfirm } = this.props;\n\n        switch (mode) {\n            case 'year':\n            case 'months':\n                return (\n                    <div style={{ display: 'flex' }}>\n                        {this.renderMenuMonths()}\n                        {this.renderMenuYear()}\n                    </div>\n                );\n            case 'month':\n                return (\n                    <MonthContainer>\n                        {this.renderMonth()}\n                        {showConfirm && this.renderConfirm()}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { date, value } = this.props;\n        const months = getMonthNames(true);\n        const month = value && value.getMonth();\n        const year = value && value.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { monthMatrix } = this;\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {monthMatrix.map((dates, i) => (\n                        <tr key={i}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    {getWeekOfYear(dates[0])}\n                                </td>\n                            )}\n                            {dates.map((date, j) => (\n                                <td className=\"day\" key={j}>\n                                    {this.renderDay(date)}\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderDay(day: Date): React.ReactNode {\n        const num = day.getDate();\n        const { value, date, selectWeek } = this.props;\n        let selected = dateEqual(value, day);\n        const current = day.getMonth() === date.getMonth();\n        const enabled = isEnabled('day', day, this.props);\n        const today = isToday(day);\n\n        if (selectWeek && value) {\n            selected = getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return (\n            <Day\n                data-date={day.toISOString()}\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={!enabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {num}\n            </Day>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={validDate === null}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private onSelectDay(e: React.SyntheticEvent<HTMLDivElement>): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n        const date = new Date(e.currentTarget.getAttribute('data-date')!);\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        if (el) {\n            const selected = el.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n                el.scrollBy({ top: -10 });\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled\n} from './utils';\nimport { ReactTimebombProps } from './typings';\nimport { Button } from './button';\n\ninterface ValueProps {\n    open?: boolean;\n    value?: Date;\n    valueText?: string;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    allowValidation?: boolean;\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onSubmit(): void;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ClearButton = styled(ArrowButton)`\n    font-size: 18px;\n`;\n\nconst Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nconst Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '📅';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nexport class Value extends React.PureComponent<ValueProps> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (prevProps.value !== value && value) {\n                const parts = splitDate(value, format);\n                const input = this.searchInputs[0];\n\n                this.searchInputs.forEach(\n                    (input, i) => (input.innerText = parts[i])\n                );\n\n                if (input) {\n                    input.focus();\n                }\n            }\n\n            if ((open && !prevProps.open) || value !== prevProps.value) {\n                const input = this.searchInputs[0];\n\n                if (input) {\n                    if (input.innerText === '') {\n                        input.focus();\n                    } else {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <ArrowButton tabIndex={-1} className=\"react-timebomb-arrow\">\n                        {open ? '▲' : '▼'}\n                    </ArrowButton>\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onFocus}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const nextValue = numericValue + (isArrowUp ? 1 : -1);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, allowValidation } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            this.props.onSubmit();\n\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            this.props.onToggle();\n\n            return;\n        }\n\n        const forbiddenKeys = [\n            keys.SHIFT,\n            keys.ARROW_LEFT,\n            keys.ARROW_RIGHT,\n            keys.ARROW_UP,\n            keys.ARROW_DOWN,\n            keys.TAB\n        ];\n\n        // focus next\n        if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !forbiddenKeys.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', innerText);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                focused &&\n                !focused.getAttribute('data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onChangeValueText(undefined, true);\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}