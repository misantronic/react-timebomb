{"version":3,"sources":["src/index.tsx","src/typings.ts"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","ReactTimebombClearComponentProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","console","error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onChangeMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onMenuRef","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","some","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","timeStep","onOpen","menuWidth","Math","max","MENU_WIDTH","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","onClick","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","clearComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","day","valueDate","startOfWeek","endOfWeek","addDays","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","newDate","map","e","target","HTMLDivElement","classList","contains","el","getBoundingClientRect","height","defaultProps","button_1","ArrowButtonProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType,\n    addDays\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps,\n    ReactTimebombClearComponentProps,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps,\n    ReactTimebombClearComponentProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentClass<MenuContainerProps, any>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0,\n            menuHeight: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            console.error(\n                '[react-timebomb]: minDate must appear before maxDate'\n            );\n        }\n\n        if (selectRange === true && !showConfirm) {\n            console.error(\n                '[react-timebomb]: when setting `selectRange = true` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onMenuRef = this.onMenuRef.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.some(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = this.state.menuHeight || ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n                    const className = [this.className];\n\n                    if (showMenu) {\n                        className.push('open');\n                    }\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={className.join(' ')}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                    onClick={\n                                        mobile\n                                            ? this.onMobileMenuContainerClick\n                                            : undefined\n                                    }\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                        ref={this.onMenuRef}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId,\n            clearComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    iconComponent={iconComponent}\n                    arrowButtonId={arrowButtonId}\n                    arrowButtonComponent={arrowButtonComponent}\n                    clearComponent={clearComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                clearComponent={clearComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectRange === 'week') {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n            return;\n        } else if (typeof selectRange === 'number') {\n            const date = [day, addDays(day, selectRange - 1)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n            return;\n        }\n\n        const date = setDate(\n            day,\n            valueDate ? valueDate.getHours() : 0,\n            valueDate ? valueDate.getMinutes() : 0\n        );\n\n        if (selectRange) {\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(\n                              this.state.valueText[0],\n                              format!\n                          ) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n            this.setState({ date: dateArr, valueText, selectedRange });\n        } else {\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: Date, mode: FormatType, commit = false): void {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        this.setState({ mode, valueText }, () =>\n            this.emitChange(newDate, commit)\n        );\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n\n    private onMenuRef(el: HTMLDivElement | null) {\n        if (el) {\n            this.setState({ menuHeight: el.getBoundingClientRect().height });\n        } else {\n            this.setState({ menuHeight: 0 });\n        }\n    }\n}\n","import { ArrowButtonProps } from './components/button';\n\nexport type ReactTimebombDate = Date | undefined | Date[];\n\ntype ReactComponent<P = {}> =\n    | React.ComponentClass<P>\n    | React.StatelessComponent<P>;\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectRange?: 'week' | number | boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: any;\n    mobile?: boolean;\n    arrowButtonId?: string;\n    arrowButtonComponent?: ReactComponent<ArrowButtonProps>;\n    clearComponent?: ReactComponent<ClearComponentProps>;\n    iconComponent?: ReactComponent<IconProps> | null;\n    timeStep?: number;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode?: FormatType;\n    showDate?: boolean;\n    showTime?: boolean;\n    selectedRange: number;\n    menuHeight: number;\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\nexport type FormatType =\n    | 'day'\n    | 'month'\n    | 'year'\n    | 'hour'\n    | 'minute'\n    | 'second';\n\nexport interface IconProps {\n    showDate?: boolean;\n    showTime?: boolean;\n}\n\nexport interface ClearComponentProps {\n    disabled?: boolean;\n    onClick(e: React.MouseEvent<HTMLButtonElement>): void;\n}\n\nexport { ClearComponentProps as ReactTimebombClearComponentProps };\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n"]}