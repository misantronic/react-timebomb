{"version":3,"sources":["src/menu.tsx"],"names":["React","$fsx","r","styled_components_1","utils_1","button_1","Flex","default","div","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","props","selectWeek","css","Day","current","selected","today","disabled","exports","Menu","PureComponent","now","Date","monthMatrix","date","this","dateMonth","getMonth","dateYear","getFullYear","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","push","addDays","fullYears","minDate","maxDate","year","currentYear","Array","fill","undefined","map","_","i","setFullYear","enabled","isEnabled","filter","obj","reverse","minYear","array","currentDate","[object Object]","super","onSelectDay","bind","onSelectMonth","onSelectYear","mode","showConfirm","createElement","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","ref","onYearContainer","className","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","value","months","getMonthNames","month","str","newDate","setMonth","showCalendarWeek","cellSpacing","cellPadding","dates","getWeekOfYear","j","renderDay","day","num","getDate","dateEqual","isToday","valueText","format","validDate","validateDate","isValid","onSubmit","e","currentTarget","getAttribute","setTimeout","el","querySelector","scrollIntoView","scrollBy","top"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    isToday,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    dateEqual\n} from './utils';\nimport { Button } from './button';\n\ninterface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface DayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: 220px;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 46px;\n        border: none;\n        margin: 0 0 4px;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nconst Day = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: DayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: ${(props: DayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: DayProps) => (props.selected ? 'bold' : 'normal')};\n    pointer-events: ${(props: DayProps) => (props.disabled ? 'none' : 'auto')};\n    user-select: none;\n    opacity: ${(props: DayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: DayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private get monthMatrix(): (Date[])[] {\n        const { date } = this.props;\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { minDate, maxDate } = this.props;\n        const year = this.props.date.getFullYear();\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(minDate);\n\n                    date.setFullYear(currentYear + i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(maxDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                const date = new Date(maxDate);\n\n                date.setFullYear(i);\n\n                const enabled = isEnabled('year', date, this.props);\n                const selected = year === date.getFullYear();\n\n                array.push({ date, enabled, selected });\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showConfirm } = this.props;\n\n        switch (mode) {\n            case 'year':\n            case 'months':\n                return (\n                    <MonthAndYearContainer>\n                        {this.renderMenuMonths()}\n                        {this.renderMenuYear()}\n                    </MonthAndYearContainer>\n                );\n            case 'month':\n                return (\n                    <MonthContainer>\n                        {this.renderMonth()}\n                        {showConfirm && this.renderConfirm()}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { date, value } = this.props;\n        const months = getMonthNames(true);\n        const month = value && value.getMonth();\n        const year = value && value.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { monthMatrix } = this;\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {monthMatrix.map((dates, i) => (\n                        <tr key={i}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    {getWeekOfYear(dates[0])}\n                                </td>\n                            )}\n                            {dates.map((date, j) => (\n                                <td className=\"day\" key={j}>\n                                    {this.renderDay(date)}\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderDay(day: Date): React.ReactNode {\n        const num = day.getDate();\n        const { value, date, selectWeek } = this.props;\n        let selected = dateEqual(value, day);\n        const current = day.getMonth() === date.getMonth();\n        const enabled = isEnabled('day', day, this.props);\n        const today = isToday(day);\n\n        if (selectWeek && value) {\n            selected = getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return (\n            <Day\n                data-date={day.toISOString()}\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={!enabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {num}\n            </Day>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private onSelectDay(e: React.SyntheticEvent<HTMLDivElement>): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n        const date = new Date(e.currentTarget.getAttribute('data-date')!);\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        if (el) {\n            const selected = el.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n                el.scrollBy({ top: -10 });\n            }\n        }\n    }\n}\n"]}