{"version":3,"sources":["src/index.tsx","src/value/value.tsx","src/typings.ts","src/value/value-multi.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","ReactTimebombClearComponentProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","menuRef","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","console","error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onChangeMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onMenuRef","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","some","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","timeStep","onOpen","menuWidth","Math","max","MENU_WIDTH","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","onClick","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","clearComponent","labelComponent","isMulti","componentValue","ValueComponent","ValueMulti","Value","onAllSelect","clearSelection","onError","length","getBoundingClientRect","height","setMenuHeight","day","valueDate","startOfWeek","endOfWeek","addDays","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","newDate","map","e","target","HTMLDivElement","classList","contains","el","defaultProps","button_1","Flex","Input","span","ClearButton","SmallButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","getIcon","DefaultClearComponent","tabIndex","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","PureComponent","inputs","currentTarget","selectElement","allSelected","formatGroup","getAttribute","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","formatGroups","split","reduce","memo","char","prevChar","substr","formatSplitExpr","test","focused","document","querySelector","hasFocus","inp","allowTextSelection","parts","splitDate","forEach","i","innerText","focus","find","forceUpdate","ArrowButtonComp","ArrowButton","ClearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","data-role","id","LabelComponent","contentEditable","Object","assign","group","g","separator","data-react-timebomb-selectable","data-placeholder","data-separator","replaceSpaceWithNbsp","key","data-group","onDoubleClick","nextSibling","previousSibling","numericFormat","formatIsActualNumber","sel","getSelection","hasSelection","focusOffset","anchorOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","manipulateDate","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","firstInput","validatedChar","blur","parentNode","dataGroup","filledValue","fillZero","stopPropagation","ArrowButtonProps","Fragment","useEffect","body","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType,\n    addDays\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps,\n    ReactTimebombClearComponentProps,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps,\n    ReactTimebombClearComponentProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number | 'none';\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentType<MenuContainerProps>;\n\n    private menuRef: HTMLDivElement | null = null;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentType<MenuContainerProps>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0,\n            menuHeight: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            console.error(\n                '[react-timebomb]: minDate must appear before maxDate'\n            );\n        }\n\n        if (selectRange === true && !showConfirm) {\n            console.error(\n                '[react-timebomb]: when setting `selectRange = true` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onMenuRef = this.onMenuRef.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.some(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = this.state.menuHeight || ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n                    const className = [this.className];\n\n                    if (showMenu) {\n                        className.push('open');\n                    }\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={className.join(' ')}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                    onClick={\n                                        mobile\n                                            ? this.onMobileMenuContainerClick\n                                            : undefined\n                                    }\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                        ref={this.onMenuRef}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId,\n            clearComponent,\n            labelComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n        const isMulti = selectRange || isArray(value);\n        const componentValue: any = isMulti\n            ? value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined\n            : value;\n        const ValueComponent = isMulti ? ValueMulti : Value;\n\n        return (\n            <ValueComponent\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={componentValue}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                clearComponent={clearComponent}\n                labelComponent={labelComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private setMenuHeight() {\n        if (this.menuRef) {\n            this.setState({\n                menuHeight: this.menuRef.getBoundingClientRect().height\n            });\n        } else {\n            this.setState({ menuHeight: 0 });\n        }\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState(\n            {\n                menuHeight: 'none',\n                mode: format ? getFormatType(format) : undefined\n            },\n            () => this.setMenuHeight()\n        );\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectRange === 'week') {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n            return;\n        } else if (typeof selectRange === 'number') {\n            const date = [day, addDays(day, selectRange - 1)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n            return;\n        }\n\n        const date = setDate(\n            day,\n            valueDate ? valueDate.getHours() : 0,\n            valueDate ? valueDate.getMinutes() : 0\n        );\n\n        if (selectRange) {\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(\n                              this.state.valueText[0],\n                              format!\n                          ) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n            this.setState({ date: dateArr, valueText, selectedRange });\n        } else {\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: Date, mode: FormatType, commit = false): void {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        this.setState({ mode, valueText }, () =>\n            this.emitChange(newDate, commit)\n        );\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n\n    private onMenuRef(el: HTMLDivElement | null) {\n        this.menuRef = el;\n\n        this.setMenuHeight();\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton, SmallButton } from '../components/button';\nimport { ClearComponentProps, IconProps, ValueProps } from '../typings';\nimport {\n    clearSelection,\n    fillZero,\n    formatIsActualNumber,\n    formatNumber,\n    formatSplitExpr,\n    getAttribute,\n    getFormatType,\n    isEnabled,\n    joinDates,\n    keys,\n    manipulateDate,\n    replaceSpaceWithNbsp,\n    selectElement,\n    splitDate,\n    stringFromCharCode,\n    validateFormatGroup\n} from '../utils';\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = (props: ClearComponentProps) => (\n    <ClearButton\n        className=\"react-timebomb-clearer\"\n        tabIndex={-1}\n        disabled={props.disabled}\n        onClick={props.onClick}\n    >\n        <ClearButtonX>×</ClearButtonX>\n    </ClearButton>\n);\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        setTimeout(() => {\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n                        const input = this.inputs[0];\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (input && allowTextSelection) {\n                            input.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            const [input] = this.inputs;\n\n                            if (input) {\n                                selectElement(input);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearComponent\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        />\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const LabelComponent = this.props.labelComponent;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...this.props} />;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = sel\n            ? Boolean(sel.focusOffset - sel.anchorOffset)\n            : false;\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n","import { ArrowButtonProps } from './components/button';\n\nexport type ReactTimebombDate = Date | undefined | Date[];\n\ntype ReactComponent<P = {}> =\n    | React.ComponentClass<P>\n    | React.StatelessComponent<P>;\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectRange?: 'week' | number | boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: any;\n    mobile?: boolean;\n    arrowButtonId?: string;\n    arrowButtonComponent?: ReactComponent<ArrowButtonProps>;\n    clearComponent?: ReactComponent<ClearComponentProps>;\n    iconComponent?: ReactComponent<IconProps> | null;\n    labelComponent?: ReactComponent<ValueProps | MultiValueProps>;\n    timeStep?: number;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode?: FormatType;\n    showDate?: boolean;\n    showTime?: boolean;\n    selectedRange: number;\n    menuHeight: number | 'none';\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\nexport type FormatType =\n    | 'day'\n    | 'month'\n    | 'year'\n    | 'hour'\n    | 'minute'\n    | 'second';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    clearComponent: ReactTimebombProps['clearComponent'];\n    arrowButtonId: ReactTimebombProps['arrowButtonId'];\n    iconComponent: ReactTimebombProps['iconComponent'];\n    labelComponent: ReactTimebombProps['labelComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    timeStep: ReactTimebombProps['timeStep'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\nexport type MultiValueProps = Omit<ValueProps, 'value'> & {\n    value: undefined | Date[];\n};\n\nexport interface IconProps {\n    showDate?: boolean;\n    showTime?: boolean;\n}\n\nexport interface ClearComponentProps {\n    disabled?: boolean;\n    onClick(e: React.MouseEvent<HTMLButtonElement>): void;\n}\n\nexport { ClearComponentProps as ReactTimebombClearComponentProps };\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n","import * as React from 'react';\nimport { ArrowButton } from '../components/button';\nimport { MultiValueProps } from '../typings';\nimport { dateFormat, keys } from '../utils';\nimport {\n    Container,\n    DefaultClearComponent,\n    Flex,\n    Icon,\n    Placeholder\n} from './value';\n\nconst DefaultIcon = () => <Icon className=\"react-timebomb-icon\" icon=\"📅\" />;\n\nfunction Value(props: MultiValueProps) {\n    const { value } = props;\n    const LabelComponent = props.labelComponent;\n\n    if (!value) {\n        return null;\n    }\n\n    if (LabelComponent) {\n        return <LabelComponent {...props} />;\n    }\n\n    return <>{value.map(d => dateFormat(d, 'DD.MM.YYYY')).join(' – ')}</>;\n}\n\nexport function ValueMulti(props: MultiValueProps) {\n    const {\n        placeholder,\n        value,\n        open,\n        disabled,\n        arrowButtonId,\n        iconComponent,\n        onToggle\n    } = props;\n    const ArrowButtonComp = props.arrowButtonComponent || ArrowButton;\n    const ClearComponent = props.clearComponent || DefaultClearComponent;\n    const showPlaceholder = placeholder && !open;\n    const IconComponent =\n        iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n    React.useEffect(() => {\n        document.body.addEventListener('keyup', onKeyUp);\n\n        return () => {\n            document.body.removeEventListener('keyup', onKeyUp);\n        };\n    }, []);\n\n    function onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        props.onClear();\n    }\n\n    function onKeyUp(e: KeyboardEvent) {\n        switch (e.keyCode) {\n            case keys.ESC:\n                if (open) {\n                    onToggle();\n                }\n                break;\n        }\n    }\n\n    return (\n        <Container\n            data-role=\"value\"\n            className=\"react-slct-value react-timebomb-value\"\n            disabled={disabled}\n            onClick={disabled ? undefined : onToggle}\n        >\n            <Flex>\n                {IconComponent && <IconComponent />}\n                <Flex>\n                    <Value {...props} />\n                    {showPlaceholder && (\n                        <Placeholder className=\"react-timebomb-placeholder\">\n                            {placeholder}\n                        </Placeholder>\n                    )}\n                </Flex>\n            </Flex>\n            <Flex>\n                {value && (\n                    <ClearComponent disabled={disabled} onClick={onClear} />\n                )}\n                <ArrowButtonComp\n                    id={arrowButtonId}\n                    disabled={disabled}\n                    open={open}\n                />\n            </Flex>\n        </Container>\n    );\n}\n"]}