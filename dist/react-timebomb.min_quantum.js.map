{"version":3,"sources":["src/index.tsx","src/menu/index.tsx","src/menu/table.tsx","src/typings.ts"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onChangeMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onMenuRef","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","some","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","selectWeek","timeStep","onOpen","menuWidth","Math","max","MENU_WIDTH","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","onClick","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","newDate","map","e","target","HTMLDivElement","classList","contains","el","getBoundingClientRect","height","defaultProps","button_1","table_1","mobile_1","time_1","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","MobileMenuTable","MenuTable","getDate","MenuMonths","monthNames","useState","getMonthNames","month","year","getFullYear","getAttribute","currentTarget","str","i","enabled","selected","Button","key","tabIndex","data-date","toISOString","MenuYear","yearContainer","setYearContainer","scrollToYear","querySelector","scrollIntoView","scrollBy","top","useEffect","getDateConfig","newYear","setFullYear","setSeconds","getSeconds","setMinutes","setHours","currentYear","Array","fill","_","filter","obj","reverse","minYear","array","now","getFullYears","fullYear","dateStr","MenuConfirm","isValid","every","v","MonthWrapper","GestureWrapper","allowNext","addDays","endOfMonth","allowPrev","subtractDays","startOfMonth","direction","addMonths","subtractMonths","Object","assign","MenuTime","topDivider","onCancel","day_1","Table","table","hoverDay","setHoverDay","weekdayNames","getWeekdayNames","sun","mon","tue","wed","thu","fri","sat","c","monthMatrix","useMemo","dateMonth","dateYear","weeks","base","week","weekStart","getCacheKey","onDayMouseEnter","onDayMouseLeave","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","WeekNum","Day","onMouseEnter","onMouseLeave","ArrowButtonProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentClass<MenuContainerProps, any>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0,\n            menuHeight: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onMenuRef = this.onMenuRef.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.some(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = this.state.menuHeight || ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                    onClick={\n                                        mobile\n                                            ? this.onMobileMenuContainerClick\n                                            : undefined\n                                    }\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                        ref={this.onMenuRef}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    iconComponent={iconComponent}\n                    arrowButtonId={arrowButtonId}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n            return;\n        }\n\n        const date = setDate(\n            day,\n            valueDate ? valueDate.getHours() : 0,\n            valueDate ? valueDate.getMinutes() : 0\n        );\n\n        if (selectRange) {\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(\n                              this.state.valueText[0],\n                              format!\n                          ) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n            this.setState({ date: dateArr, valueText, selectedRange });\n        } else {\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: Date, mode: FormatType, commit = false): void {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        this.setState({ mode, valueText }, () =>\n            this.emitChange(newDate, commit)\n        );\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n\n    private onMenuRef(el: HTMLDivElement | null) {\n        if (el) {\n            this.setState({ menuHeight: el.getBoundingClientRect().height });\n        } else {\n            this.setState({ menuHeight: 0 });\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '../';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getAttribute,\n    isArray,\n    addMonths,\n    subtractMonths,\n    startOfMonth,\n    subtractDays,\n    addDays,\n    endOfMonth\n} from '../utils';\nimport { Button } from '../components/button';\nimport { ReactTimebombDate, FormatType } from '../typings';\nimport { MenuTable } from './table';\nimport { GestureWrapper, GestureDirection } from './mobile';\nimport { MenuTime } from './time';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    timeStep: ReactTimebombProps['timeStep'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    /** month was selected, value will change to `date` */\n    onSelectMonth(date: Date): void;\n    /** month was selected but value will not change to `date` */\n    onChangeMonth(date: Date): void;\n    onSelectTime(date: Date, mode: FormatType): void;\n    onSubmitTime(date: Date | undefined, mode: FormatType): void;\n    onSubmit(): void;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0;\n    height: ${(props: { mobile?: boolean }) => (props.mobile ? '100' : 'auto')};\n    overflow: hidden;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst MobileMenuTable = styled(MenuTable)`\n    width: 33.3%;\n`;\n\nfunction getDate(\n    date: ReactTimebombDate,\n    selectedRange: ReactTimebombState['selectedRange']\n) {\n    return (isArray(date) ? date[selectedRange] : date)!;\n}\n\nfunction MenuMonths(props: MenuProps) {\n    const { value, mobile, selectedRange } = props;\n    const [monthNames] = React.useState(getMonthNames(true));\n    const valueDate = getDate(value, selectedRange);\n    const date = getDate(props.date, selectedRange);\n    const month = value && valueDate.getMonth();\n    const year = value && valueDate.getFullYear();\n\n    function onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onSelectMonth(date), 0);\n    }\n\n    return (\n        <MonthsContainer mobile={mobile} className=\"months\">\n            {monthNames.map((str, i) => {\n                const newDate = new Date(date);\n\n                newDate.setMonth(i);\n\n                const enabled = isEnabled('month', newDate, props);\n                const selected =\n                    month === newDate.getMonth() &&\n                    year === newDate.getFullYear();\n\n                return (\n                    <Button\n                        key={str}\n                        tabIndex={-1}\n                        className={selected ? 'selected' : undefined}\n                        selected={selected}\n                        disabled={!enabled}\n                        mobile={props.mobile}\n                        data-date={newDate.toISOString()}\n                        onClick={onSelectMonth}\n                    >\n                        {str}\n                    </Button>\n                );\n            })}\n        </MonthsContainer>\n    );\n}\n\nfunction MenuYear(props: MenuProps) {\n    const { value, minDate, maxDate } = props;\n    const [\n        yearContainer,\n        setYearContainer\n    ] = React.useState<HTMLDivElement | null>(null);\n\n    React.useEffect(scrollToYear, [props.date]);\n\n    function scrollToYear() {\n        if (yearContainer) {\n            const selected = yearContainer.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n\n                if (yearContainer.scrollBy) {\n                    yearContainer.scrollBy({ top: -10 });\n                }\n            }\n        }\n    }\n\n    function getFullYears() {\n        const valueDate = getDate(value, props.selectedRange);\n        const year = getDate(props.date, props.selectedRange).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = new Date();\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    function onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onSelectYear(date), 0);\n    }\n\n    function onYearContainer(el: HTMLDivElement | null) {\n        setYearContainer(el);\n        scrollToYear();\n    }\n\n    return (\n        <YearContainer ref={onYearContainer} className=\"years\">\n            {getFullYears()\n                .map(({ date, selected }) => {\n                    const fullYear = date.getFullYear();\n                    const dateStr = date.toISOString();\n\n                    return (\n                        <Button\n                            key={dateStr}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            mobile={props.mobile}\n                            data-date={dateStr}\n                            onClick={onSelectYear}\n                        >\n                            {fullYear}\n                        </Button>\n                    );\n                })\n                .reverse()}\n        </YearContainer>\n    );\n}\n\nfunction MenuConfirm(props: MenuProps) {\n    const { valueText, format } = props;\n    const validDate = validateDate(valueText, format);\n    const isValid = validDate\n        ? isArray(validDate)\n            ? validDate.every(v => isEnabled('day', v, props))\n            : isEnabled('day', validDate, props)\n        : false;\n\n    return (\n        <Confirm>\n            <Button\n                tabIndex={-1}\n                disabled={!isValid}\n                mobile={props.mobile}\n                onClick={() => props.onSubmit()}\n            >\n                Ok\n            </Button>\n        </Confirm>\n    );\n}\n\nfunction MonthWrapper(props: MenuProps) {\n    const { minDate, maxDate, mobile } = props;\n\n    function allowPrev() {\n        let date = props.date;\n\n        if (!minDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (subtractDays(startOfMonth(date), 1) < minDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function allowNext() {\n        let date = props.date;\n\n        if (!maxDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (addDays(endOfMonth(date), 1) > maxDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function onChangeMonth(direction: GestureDirection) {\n        const { onChangeMonth } = props;\n        const date = getDate(props.date, props.selectedRange);\n\n        switch (direction) {\n            case 'next':\n                onChangeMonth(addMonths(date, 1));\n                break;\n            case 'prev':\n                onChangeMonth(subtractMonths(date, 1));\n                break;\n        }\n    }\n\n    if (mobile) {\n        return (\n            <GestureWrapper\n                allowNext={allowNext()}\n                allowPrev={allowPrev()}\n                onChangeMonth={onChangeMonth}\n            >\n                <MobileMenuTable\n                    date={subtractMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    selectWeek={props.selectWeek}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={subtractMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={props.date}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    selectWeek={props.selectWeek}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={props.value}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={addMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    selectWeek={props.selectWeek}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={addMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n            </GestureWrapper>\n        );\n    }\n\n    return (\n        <MenuTable\n            date={props.date}\n            minDate={props.minDate}\n            maxDate={props.maxDate}\n            mobile={props.mobile}\n            selectRange={props.selectRange}\n            selectedRange={props.selectedRange}\n            selectWeek={props.selectWeek}\n            showCalendarWeek={props.showCalendarWeek}\n            showConfirm={props.showConfirm}\n            showTime={props.showTime}\n            value={props.value}\n            onSubmit={props.onSubmit}\n            onSelectDay={props.onSelectDay}\n        />\n    );\n}\n\nexport function Menu(props: MenuProps) {\n    const { mode, mobile, showDate, showConfirm, showTime } = props;\n\n    if (showDate || showTime) {\n        switch (mode) {\n            case 'year':\n            case 'month':\n                return (\n                    <MonthAndYearContainer mobile={mobile}>\n                        <MenuMonths {...props} />\n                        <MenuYear {...props} />\n                    </MonthAndYearContainer>\n                );\n            case 'day':\n            case 'hour':\n            case 'minute':\n            case 'second':\n                return (\n                    <MonthContainer mobile={mobile}>\n                        {showDate && <MonthWrapper {...props} />}\n                        {showTime && (\n                            <MenuTime\n                                date={props.date}\n                                timeStep={props.timeStep}\n                                topDivider={props.showDate}\n                                onChange={props.onSelectTime}\n                                onSubmit={props.onSubmitTime}\n                                onCancel={props.onSubmitTime}\n                            />\n                        )}\n                        {showConfirm && <MenuConfirm {...props} />}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    return null;\n}\n","import * as React from 'react';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombDate\n} from '../typings';\nimport {\n    startOfMonth,\n    startOfWeek,\n    endOfWeek,\n    addDays,\n    getWeekdayNames,\n    getWeekOfYear,\n    isArray\n} from '../utils';\nimport styled, { css } from 'styled-components';\nimport { WeekNum, Day } from './day';\n\ninterface MenuTableProps {\n    className?: string;\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    onSelectDay(date: Date): void;\n    onSubmit(): void;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n    mobile?: boolean;\n}\n\nconst Table = styled.table`\n    width: 100%;\n    height: 100%;\n    font-size: inherit;\n    user-select: none;\n    padding: 5px 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n            width: 14.285714286%;\n        }\n\n        td {\n            width: 14.285714286%;\n        }\n    }\n`;\n\nexport function MenuTable(props: MenuTableProps) {\n    const {\n        showCalendarWeek,\n        selectRange,\n        selectedRange,\n        selectWeek,\n        mobile,\n        showConfirm,\n        onSubmit\n    } = props;\n    const [hoverDay, setHoverDay] = React.useState<Date | undefined>(undefined);\n    const [weekdayNames] = React.useState(getWeekdayNames());\n    const [sun, mon, tue, wed, thu, fri, sat] = weekdayNames;\n    const className = ['month', props.className]\n        .filter(c => Boolean(c))\n        .join(' ');\n\n    const monthMatrix = React.useMemo(() => {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }, [getCacheKey()]);\n\n    function getCacheKey() {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        return `${dateMonth}-${dateYear}`;\n    }\n\n    function getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[selectedRange] : date)!;\n    }\n\n    function onSelectDay(date: Date): void {\n        props.onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    function onDayMouseEnter(day: Date) {\n        if (selectRange) {\n            setHoverDay(day);\n        }\n    }\n\n    function onDayMouseLeave() {\n        if (selectRange) {\n            setHoverDay(undefined);\n        }\n    }\n\n    return (\n        <Table\n            className={className}\n            selectWeek={selectWeek}\n            mobile={mobile}\n            cellSpacing={0}\n            cellPadding={0}\n        >\n            <thead>\n                <tr>\n                    {showCalendarWeek && <th className=\"calendar-week\" />}\n                    <th>{mon}</th>\n                    <th>{tue}</th>\n                    <th>{wed}</th>\n                    <th>{thu}</th>\n                    <th>{fri}</th>\n                    <th>{sat}</th>\n                    <th>{sun}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {monthMatrix.map(dates => {\n                    const weekNum = getWeekOfYear(dates[0]);\n\n                    return (\n                        <tr key={weekNum}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    <WeekNum\n                                        day={dates[0]}\n                                        onClick={onSelectDay}\n                                    >\n                                        {weekNum}\n                                    </WeekNum>\n                                </td>\n                            )}\n                            {dates.map(date => (\n                                <td className=\"day\" key={date.toISOString()}>\n                                    <Day\n                                        day={date}\n                                        hoverDay={hoverDay}\n                                        date={props.date}\n                                        value={props.value}\n                                        minDate={props.minDate}\n                                        maxDate={props.maxDate}\n                                        selectWeek={props.selectWeek}\n                                        selectRange={props.selectRange}\n                                        showTime={props.showTime}\n                                        onSelectDay={onSelectDay}\n                                        onMouseEnter={onDayMouseEnter}\n                                        onMouseLeave={onDayMouseLeave}\n                                    />\n                                </td>\n                            ))}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </Table>\n    );\n}\n","import { ArrowButtonProps } from './components/button';\n\nexport type ReactTimebombDate = Date | undefined | Date[];\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectWeek?: boolean;\n    selectRange?: boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: any;\n    mobile?: boolean;\n    arrowButtonComponent?: React.ComponentType<ArrowButtonProps>;\n    arrowButtonId?: string;\n    iconComponent?: React.ComponentType<IconProps> | null;\n    timeStep?: number;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode?: FormatType;\n    showDate?: boolean;\n    showTime?: boolean;\n    selectedRange: number;\n    menuHeight: number;\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\nexport type FormatType =\n    | 'day'\n    | 'month'\n    | 'year'\n    | 'hour'\n    | 'minute'\n    | 'second';\n\nexport interface IconProps {\n    showDate?: boolean;\n    showTime?: boolean;\n}\n\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n"]}