{"version":3,"sources":["src/value.tsx"],"names":["React","$fsx","r","styled_components_1","utils_1","button_1","arrow_button_1","exports","Flex","default","div","Container","props","disabled","Input","span","ClearButton","SmallButton","Placeholder","Icon","icon","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","Value","PureComponent","[object Object]","super","this","inputs","state","onSearchRef","bind","onKeyDown","onKeyUp","onFocus","onClick","onDblClick","onBlur","onChange","onClear","onToggle","formatGroups","format","split","reduce","memo","char","prevChar","length","substr","focused","document","querySelector","iconClass","showTime","showDate","prevProps","open","value","some","inp","parts","splitDate","input","forEach","i","innerText","focus","selectText","setState","allSelected","forceUpdate","placeholder","ArrowButtonComp","arrowButtonComponent","ArrowButton","showPlaceholder","timeOnly","createElement","data-role","className","renderValue","tabIndex","map","group","separator","data-react-timebomb-selectable","contentEditable","data-placeholder","data-separator","key","data-group","ref","onDoubleClick","el","range","createRange","sel","getSelection","selectNodeContents","removeAllRanges","addRange","push","e","onChangeValueText","allowValidation","currentTarget","nextSibling","previousSibling","hasSelection","Boolean","focusOffset","baseOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatGroup","getAttribute","formatType","getFormatType","direction","newDate","manipulateDate","shiftKey","isEnabled","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","onSubmit","blur","parentNode","target","fillZero","setTimeout","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { SmallButton } from './button';\nimport { ArrowButton } from './arrow-button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.inputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.inputs[0];\n\n                    this.inputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const [input] = this.inputs;\n\n                    if (input) {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n        }\n\n        if (open && !value) {\n            this.inputs.forEach(input => (input.innerText = ''));\n        }\n\n        if (!open) {\n            this.setState({ allSelected: false });\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp disabled={disabled} open={open} />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={!disabled}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = e.shiftKey ? 10 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        // TODO: this doesn't work quite how suppossed to\n        // if (this.state.allSelected) {\n        //     const char = stringFromCharCode(e.keyCode);\n        //     this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n        //     this.inputs[0].innerText = char;\n        // }\n\n        // validate group\n        if (!hasSelection && innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                this.selectText(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                this.selectText(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            this.selectText(this.inputs[0]);\n            this.selectText(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true });\n        }\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}