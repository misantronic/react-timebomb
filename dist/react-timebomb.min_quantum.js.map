{"version":3,"sources":["src/menu/day.tsx"],"names":["React","$fsx","r","utils_1","styled_components_1","Flex","default","div","StyledDay","props","current","selected","disabled","exports","Day","day","date","value","selectRange","hover","hoverDays","minDate","maxDate","showTime","enabled","setEnabled","useState","today","setToday","useMemo","dayMonth","getMonth","isArray","some","d","dayWeekOfYear","getWeekOfYear","v","length","firstHover","lastHover","isEnabled","dateEqual","useEffect","isToday","getTime","createElement","className","classes","push","join","getClassNames","onClick","onSelectDay","onMouseEnter","onMouseLeave","getDate","WeekNum","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n    getWeekOfYear,\n    dateEqual,\n    isEnabled,\n    isToday,\n    isArray\n} from '../utils';\nimport styled from 'styled-components';\nimport { MenuProps } from '.';\n\ninterface DayProps {\n    day: Date;\n    hoverDays: Date[];\n    hover: boolean;\n    value: MenuProps['value'];\n    date: MenuProps['date'];\n    selectRange: MenuProps['selectRange'];\n    minDate: MenuProps['minDate'];\n    maxDate: MenuProps['maxDate'];\n    showTime: MenuProps['showTime'];\n    onSelectDay: MenuProps['onSelectDay'];\n    onMouseEnter(day: Date): void;\n    onMouseLeave(day: Date): void;\n}\n\ninterface StyledDayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst StyledDay = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: StyledDayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: transparent;\n    font-weight: ${(props: StyledDayProps) =>\n        props.selected ? 'bold' : 'normal'};\n    pointer-events: ${(props: StyledDayProps) =>\n        props.disabled ? 'none' : 'auto'};\n    user-select: none;\n    opacity: ${(props: StyledDayProps) => (props.disabled ? 0.3 : 1)};\n\n    &.today {\n        background-color: rgba(172, 206, 247, 0.4);\n    }\n\n    &.hover {\n        background-color: #eee;\n    }\n\n    &.selected {\n        background-color: #ddd;\n    }\n`;\n\nexport function Day(props: DayProps) {\n    const {\n        day,\n        date,\n        value,\n        selectRange,\n        hover,\n        hoverDays,\n        minDate,\n        maxDate,\n        showTime\n    } = props;\n    const [enabled, setEnabled] = React.useState(true);\n    const [today, setToday] = React.useState(false);\n    const current = React.useMemo(getCurrent, [date, day, showTime]);\n    const selected = React.useMemo(getSelected, [\n        day,\n        value,\n        selectRange,\n        hoverDays\n    ]);\n\n    React.useEffect(() => {\n        setToday(isToday(day));\n    }, [day.getTime()]);\n\n    React.useEffect(() => {\n        setEnabled(isEnabled('day', day, props));\n    }, [\n        minDate ? minDate.getTime() : minDate,\n        maxDate ? maxDate.getTime() : maxDate\n    ]);\n\n    function getSelected() {\n        if (value) {\n            if (selectRange === 'week') {\n                const dayWeekOfYear = getWeekOfYear(day);\n\n                if (isArray(value)) {\n                    return value.some(v => getWeekOfYear(v) === dayWeekOfYear);\n                }\n\n                return getWeekOfYear(value) === dayWeekOfYear;\n            }\n\n            if (selectRange && isArray(value)) {\n                const [minDate, maxDate] = value;\n\n                if (value.length === 1 && hoverDays.length) {\n                    const firstHover = hoverDays[0];\n                    const lastHover = hoverDays[hoverDays.length - 1];\n\n                    return isEnabled('day', day, {\n                        minDate: minDate < firstHover ? minDate : firstHover,\n                        maxDate: minDate > lastHover ? minDate : lastHover\n                    });\n                }\n\n                if (value.length === 2) {\n                    return isEnabled('day', day, {\n                        minDate,\n                        maxDate\n                    });\n                }\n            }\n        }\n\n        return dateEqual(value, day, showTime);\n    }\n\n    function getCurrent() {\n        const dayMonth = day.getMonth();\n\n        if (isArray(date)) {\n            return date.some(d => d.getMonth() === dayMonth);\n        }\n\n        if (date) {\n            return dayMonth === date.getMonth();\n        }\n\n        return false;\n    }\n\n    function onSelectDay() {\n        props.onSelectDay(day);\n    }\n\n    function onMouseEnter() {\n        props.onMouseEnter(day);\n    }\n\n    function onMouseLeave() {\n        props.onMouseLeave(day);\n    }\n\n    function getClassNames() {\n        const classes = ['value'];\n\n        if (selected) {\n            classes.push('selected');\n        }\n\n        if (today) {\n            classes.push('today');\n        }\n\n        if (hover) {\n            classes.push('hover');\n        }\n\n        return classes.join(' ');\n    }\n\n    return (\n        <StyledDay\n            className={getClassNames()}\n            selected={selected}\n            current={current}\n            disabled={!enabled}\n            onClick={onSelectDay}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n        >\n            {day.getDate()}\n        </StyledDay>\n    );\n}\n\ninterface WeekNumProps {\n    day: Date;\n    children: React.ReactNode;\n    onClick(day: Date): void;\n}\n\nexport function WeekNum(props: WeekNumProps) {\n    function onClick() {\n        props.onClick(props.day);\n    }\n\n    return <div onClick={onClick}>{props.children}</div>;\n}\n"]}