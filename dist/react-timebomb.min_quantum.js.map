{"version":3,"sources":["src/index.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","onChangeFormatGroup","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","selectWeek","onOpen","menuWidth","Math","max","MENU_WIDTH","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","onClick","MenuTitle","onMonth","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","e","target","HTMLDivElement","classList","contains","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n} from './typings';\nimport { ValueMulti } from './value-multi';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 234;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentClass<MenuContainerProps, any>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu =\n                        open &&\n                        showDate &&\n                        !disabled &&\n                        mode !== 'hour' &&\n                        mode !== 'minute' &&\n                        mode !== 'second';\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                    onClick={\n                                        mobile\n                                            ? this.onMobileMenuContainerClick\n                                            : undefined\n                                    }\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n"]}