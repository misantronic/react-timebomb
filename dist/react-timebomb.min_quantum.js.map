{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/menu-title.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","minDate","maxDate","isBefore","Error","this","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","showTime","Boolean","test","format","className","classNames","push","join","defaultDateValue","value","date","Date","isAfter","startOfDay","allowValidation","mode","valueText","dateFormat","undefined","prevProps","prevState","setState","valueTextDidUpdate","commit","validDate","validateDate","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","Value","onSubmit","MenuTitle","onMonths","onYear","Menu","type","onFocus","clearSelection","setTimeout","error","onError","onChange","dateEqual","day","setDate","getHours","getMinutes","setMonth","getMonth","time","splitted","split","newDate","parseInt","defaultProps","button_1","Flex","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","css","StyledDay","current","selected","today","disabled","Day","PureComponent","getWeekOfYear","enabled","isToday","onClick","getDate","monthMatrixCache","Map","now","monthMatrix","dateMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","addDays","set","fullYears","year","currentYear","Array","fill","map","_","i","setFullYear","filter","obj","reverse","minYear","array","currentDate","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","onYearContainer","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","months","getMonthNames","month","str","cellSpacing","cellPadding","dates","weekNum","Object","assign","isValid","e","currentTarget","getAttribute","el","querySelector","scrollIntoView","scrollBy","top","show","prevDisabled","subtractDays","nextDisabled","endOfMonth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(/H|h|m|k|a|S|s/.test(props.format!))\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'month',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 320;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<Date>\n                value={value}\n                placeholder={placeholder}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            <Value\n                                placeholder={open ? undefined : placeholder}\n                                format={format!}\n                                value={value}\n                                valueText={valueText}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowValidation={allowValidation}\n                                open={open}\n                                onChangeValueText={this.onChangeValueText}\n                                onToggle={onToggle}\n                                onSubmit={this.onValueSubmit}\n                            />\n                            {open ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper menuHeight={menuHeight}>\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState);\n        }, 16);\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange(date: Date | undefined, commit: boolean): void {\n        const { value, showConfirm, onChange } = this.props;\n\n        if (!showConfirm) {\n            commit = true;\n        }\n\n        if (dateEqual(value, date)) {\n            return;\n        }\n\n        if (commit) {\n            onChange(date);\n        }\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(\n        valueText: string | undefined,\n        commit = false\n    ): void {\n        this.setState({ valueText }, () => {\n            if (commit) {\n                this.emitChange(undefined, true);\n            }\n        });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format!);\n\n        this.setState({ date, valueText });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value), false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    isToday,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    dateEqual\n} from './utils';\nimport { Button } from './button';\n\ninterface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface StyledDayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: 220px;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 46px;\n        border: none;\n        margin: 0 0 4px;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nconst StyledDay = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: StyledDayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: ${(props: StyledDayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: StyledDayProps) =>\n        props.selected ? 'bold' : 'normal'};\n    pointer-events: ${(props: StyledDayProps) =>\n        props.disabled ? 'none' : 'auto'};\n    user-select: none;\n    opacity: ${(props: StyledDayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: StyledDayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\ninterface DayProps extends MenuProps {\n    day: Date;\n}\n\nclass Day extends React.PureComponent<DayProps> {\n    constructor(props: DayProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n    }\n\n    private get selected() {\n        const { value, selectWeek, day } = this.props;\n\n        if (selectWeek && value) {\n            return getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return dateEqual(value, day);\n    }\n\n    public render() {\n        const { day, date } = this.props;\n        const current = day.getMonth() === date.getMonth();\n        const enabled = isEnabled('day', day, this.props);\n        const today = isToday(day);\n        const selected = this.selected;\n\n        return (\n            <StyledDay\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={!enabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {day.getDate()}\n            </StyledDay>\n        );\n    }\n\n    private onSelectDay() {\n        this.props.onSelectDay(this.props.day);\n    }\n}\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const { date } = this.props;\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { minDate, maxDate } = this.props;\n        const year = this.props.date.getFullYear();\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(minDate);\n\n                    date.setFullYear(currentYear + i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(maxDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                const date = new Date(maxDate);\n\n                date.setFullYear(i);\n\n                const enabled = isEnabled('year', date, this.props);\n                const selected = year === date.getFullYear();\n\n                array.push({ date, enabled, selected });\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showConfirm } = this.props;\n\n        switch (mode) {\n            case 'year':\n            case 'months':\n                return (\n                    <MonthAndYearContainer>\n                        {this.renderMenuMonths()}\n                        {this.renderMenuYear()}\n                    </MonthAndYearContainer>\n                );\n            case 'month':\n                return (\n                    <MonthContainer>\n                        {this.renderMonth()}\n                        {showConfirm && this.renderConfirm()}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { date, value } = this.props;\n        const months = getMonthNames(true);\n        const month = value && value.getMonth();\n        const year = value && value.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">{weekNum}</td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            {...this.props}\n                                            day={date}\n                                            onSelectDay={this.onSelectDay}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        if (el) {\n            const selected = el.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n                el.scrollBy({ top: -10 });\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { Button } from './button';\nimport {\n    subtractDays,\n    startOfMonth,\n    endOfMonth,\n    addDays,\n    getMonthNames\n} from './utils';\n\ninterface MenuTitleProps {\n    date: Date;\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    mode: ReactTimebombState['mode'];\n    onPrevMonth(): void;\n    onNextMonth(): void;\n    onReset(): void;\n    onMonths(): void;\n    onYear(): void;\n}\n\nconst Container = styled.div`\n    display: ${(props: { show: boolean }) => (props.show ? 'flex' : 'none')};\n    align-items: center;\n    width: 100%;\n    padding: 10px 10px 15px;\n    justify-content: space-between;\n    min-height: 21px;\n    box-sizing: border-box;\n`;\n\nexport class MenuTitle extends React.PureComponent<MenuTitleProps> {\n    private get prevDisabled(): boolean {\n        const { minDate, date } = this.props;\n\n        if (minDate) {\n            return subtractDays(startOfMonth(date), 1) < minDate;\n        }\n\n        return false;\n    }\n\n    private get nextDisabled(): boolean {\n        const { maxDate, date } = this.props;\n\n        if (maxDate) {\n            return addDays(endOfMonth(date), 1) > maxDate;\n        }\n\n        return false;\n    }\n\n    public render(): React.ReactNode {\n        const {\n            date,\n            mode,\n            onNextMonth,\n            onPrevMonth,\n            onMonths,\n            onReset,\n            onYear\n        } = this.props;\n        const months = getMonthNames();\n        const show = mode === 'month';\n\n        return (\n            <Container show={show}>\n                <div>\n                    <Button tabIndex={-1} onClick={onMonths}>\n                        <b>{months[date.getMonth()]}</b>\n                    </Button>\n                    <Button tabIndex={-1} onClick={onYear}>\n                        {date.getFullYear()}\n                    </Button>\n                </div>\n                <div>\n                    <Button\n                        tabIndex={-1}\n                        disabled={this.prevDisabled}\n                        onClick={onPrevMonth}\n                    >\n                        ◀\n                    </Button>\n                    <Button tabIndex={-1} onClick={onReset}>\n                        ○\n                    </Button>\n                    <Button\n                        tabIndex={-1}\n                        disabled={this.nextDisabled}\n                        onClick={onNextMonth}\n                    >\n                        ▶\n                    </Button>\n                </div>\n            </Container>\n        );\n    }\n}\n"]}