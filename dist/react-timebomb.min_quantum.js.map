{"version":3,"sources":["src/index.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","minDate","maxDate","selectRange","showConfirm","isBefore","Error","this","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","format","showTime","isTimeFormat","showDate","isDateFormat","className","classNames","push","error","join","defaultDateValue","value","date","Date","isAfter","startOfDay","allowValidation","mode","valueText","dateFormat","undefined","selectedRange","prevProps","prevState","setState","valueTextDidUpdate","commit","validDate","validateDate","isArray","every","d","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showCalendarWeek","selectWeek","MENU_HEIGHT","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","showMenu","ref","renderValue","Math","max","MENU_WIDTH","MenuTitle","onMonths","onYear","Menu","onSubmit","type","onFocus","multiValue","ValueMulti","Value","clearSelection","setTimeout","onError","onChange","dateEqual","Boolean","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate\n} from './typings';\nimport { ValueMulti } from './value-multi';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n\n        return {\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'month',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange\n        } = this.state;\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate;\n\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={Math.max(\n                                        ReactTimebomb.MENU_WIDTH,\n                                        menuWidth || 0\n                                    )}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const { minDate, maxDate, format, selectRange } = this.props;\n        const { showDate, showTime, allowValidation } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                    open={open}\n                    placeholder={placeholder}\n                    value={multiValue}\n                />\n            );\n        }\n\n        return (\n            <Value\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState);\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange(date: ReactTimebombDate, commit: boolean): void {\n        const { value, showConfirm, onChange } = this.props;\n\n        if (!showConfirm) {\n            commit = true;\n        }\n\n        if (dateEqual(value, date)) {\n            return;\n        }\n\n        if (commit) {\n            if (isArray(date)) {\n                onChange(...date);\n            } else {\n                onChange(date);\n            }\n        }\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n"]}