{"version":3,"sources":["src/menu.tsx","src/utils.ts","src/menu-title.tsx"],"names":["React","$fsx","r","styled_components_1","utils_1","button_1","menu_day_1","MonthAndYearContainer","default","div","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","props","selectWeek","css","exports","Menu","PureComponent","[object Object]","super","this","yearContainer","monthMatrixCache","Map","scrollToYear","timeout","delay","clearTimeout","setTimeout","selected","querySelector","scrollIntoView","scrollBy","top","state","onSelectDay","bind","onSelectMonth","onSelectYear","onYearContainer","onDayMouseEnter","onDayMouseLeave","weekdayNames","getWeekdayNames","monthNames","getMonthNames","now","Date","date","isArray","selectedRange","monthMatrix","getDate","dateMonth","getMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","push","addDays","set","fullYears","minDate","maxDate","year","currentYear","Array","fill","undefined","map","_","i","setFullYear","enabled","isEnabled","filter","obj","reverse","minYear","array","currentDate","prevProps","dateEqual","mode","showDate","showConfirm","createElement","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","ref","className","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","value","valueDate","month","str","newDate","setMonth","disabled","showCalendarWeek","hoverDay","sun","mon","tue","wed","thu","fri","sat","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","WeekNum","day","Day","selectRange","showTime","onMouseEnter","onMouseLeave","valueText","format","validDate","validateDate","isValid","every","v","onSubmit","e","getAttribute","currentTarget","el","setState","moment_1","momentImport","moment","formatSplit","dateFormat","getFormatType","test","instance","toDate","d","Boolean","length","validateFormatGroup","input","isFinite","int","parseInt","char","String","strLen","startsWith","ALLOWED_CHARS","startOfDay","setHours","num","add","val","stringFromCharCode","keyCode","charCode","Math","floor","fromCharCode","includes","formatNumber","number","splitDate","split","joinDates","parts","strParts","part","HTMLElement","innerText","splittedFormat","join","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","clearSelection","sel","getSelection","empty","removeAllRanges","isoWeek","startOf","endOf","endOfDay","subtractDays","manipulateDate","subtract","isSame","isBefore","inp","isAfter","dateA","isSameOrAfter","context","attr","isDateFormat","isTimeFormat","a","b","getTime","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","DOT","COMMA","util_1","Container","show","MenuTitle","prevDisabled","nextDisabled","lastDate","endOfMonth","onNextMonth","onPrevMonth","onMonth","onReset","onYear"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    getAttribute,\n    isArray,\n    dateEqual,\n    getWeekdayNames\n} from './utils';\nimport { Button } from './button';\nimport { Day, WeekNum } from './menu-day';\nimport { ReactTimebombDate } from './typings';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface MenuState {\n    hoverDay?: Date;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: 220px;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 46px;\n        border: none;\n        margin: 0 0 4px;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps, MenuState> {\n    private weekdayNames!: string[];\n    private monthNames!: string[];\n\n    private get now(): Date {\n        return new Date();\n    }\n\n    private getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[this.props.selectedRange] : date)!;\n    }\n\n    private yearContainer: HTMLDivElement | null = null;\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const date = this.getDate(this.props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { minDate, maxDate } = this.props;\n        const year = this.getDate(this.props.date).getFullYear();\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(minDate);\n\n                    date.setFullYear(currentYear + i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(maxDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                const date = new Date(maxDate);\n\n                date.setFullYear(i);\n\n                const enabled = isEnabled('year', date, this.props);\n                const selected = year === date.getFullYear();\n\n                array.push({ date, enabled, selected });\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onYearContainer = this.onYearContainer.bind(this);\n        this.onDayMouseEnter = this.onDayMouseEnter.bind(this);\n        this.onDayMouseLeave = this.onDayMouseLeave.bind(this);\n\n        this.weekdayNames = getWeekdayNames();\n        this.monthNames = getMonthNames(true);\n    }\n\n    public componentDidUpdate(prevProps: MenuProps) {\n        if (!dateEqual(prevProps.date, this.props.date)) {\n            this.scrollToYear(64);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showDate, showConfirm } = this.props;\n\n        if (showDate) {\n            switch (mode) {\n                case 'year':\n                case 'month':\n                    return (\n                        <MonthAndYearContainer>\n                            {this.renderMenuMonths()}\n                            {this.renderMenuYear()}\n                        </MonthAndYearContainer>\n                    );\n                case 'day':\n                    return (\n                        <MonthContainer>\n                            {this.renderMonth()}\n                            {showConfirm && this.renderConfirm()}\n                        </MonthContainer>\n                    );\n            }\n        }\n\n        return null;\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { value } = this.props;\n        const valueDate = this.getDate(value);\n        const date = this.getDate(this.props.date);\n        const month = value && valueDate.getMonth();\n        const year = value && valueDate.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {this.monthNames.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek } = this.props;\n        const { hoverDay } = this.state;\n        const [sun, mon, tue, wed, thu, fri, sat] = this.weekdayNames;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>{mon}</th>\n                        <th>{tue}</th>\n                        <th>{wed}</th>\n                        <th>{thu}</th>\n                        <th>{fri}</th>\n                        <th>{sat}</th>\n                        <th>{sun}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">\n                                        <WeekNum\n                                            day={dates[0]}\n                                            onClick={this.onSelectDay}\n                                        >\n                                            {weekNum}\n                                        </WeekNum>\n                                    </td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            day={date}\n                                            hoverDay={hoverDay}\n                                            date={this.props.date}\n                                            value={this.props.value}\n                                            minDate={this.props.minDate}\n                                            maxDate={this.props.maxDate}\n                                            selectWeek={this.props.selectWeek}\n                                            selectRange={this.props.selectRange}\n                                            showTime={this.props.showTime}\n                                            onSelectDay={this.onSelectDay}\n                                            onMouseEnter={this.onDayMouseEnter}\n                                            onMouseLeave={this.onDayMouseLeave}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isArray(validDate)\n                ? validDate.every(v => isEnabled('day', v, this.props))\n                : isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private scrollToYear = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (delay: number) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                if (this.yearContainer) {\n                    const selected = this.yearContainer.querySelector(\n                        '.selected'\n                    );\n\n                    if (selected) {\n                        selected.scrollIntoView();\n                        this.yearContainer.scrollBy({ top: -10 });\n                    }\n                }\n            }, delay);\n        };\n    })();\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        this.yearContainer = el;\n\n        this.scrollToYear(0);\n    }\n\n    private onDayMouseEnter(day: Date) {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: day });\n        }\n    }\n\n    private onDayMouseLeave() {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: undefined });\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\nimport { ReactTimebombDate, FormatType } from './typings';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\nconst formatSplit = /[.|:|-|\\\\|_|\\s]/;\n\nexport function dateFormat(\n    date: ReactTimebombDate,\n    format: string\n): string | string[] {\n    if (isArray(date)) {\n        return date.map(date => moment(date).format(format));\n    } else {\n        return moment(date).format(format);\n    }\n}\n\nexport function validateDate(\n    date: string | string[] | undefined,\n    format: string\n): ReactTimebombDate {\n    if (isArray(date)) {\n        const dates = date\n            .map(date => {\n                const instance = moment(date, format, true);\n\n                return instance.isValid() ? instance.toDate() : undefined;\n            })\n            .filter(d => Boolean(d)) as Date[];\n\n        return dates.length === 0 ? undefined : dates;\n    } else {\n        const instance = moment(date, format, true);\n\n        return instance.isValid() ? instance.toDate() : undefined;\n    }\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/d/i.test(format)) {\n        return 'day';\n    }\n\n    if (/M/.test(format)) {\n        return 'month';\n    }\n\n    if (/y/i.test(format)) {\n        return 'year';\n    }\n\n    if (/h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n        const type = getFormatType(format);\n\n        switch (type) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nconst ALLOWED_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n    const char = String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n\n    if (ALLOWED_CHARS.includes(char)) {\n        return char;\n    }\n\n    return '';\n}\n\nexport function formatNumber(number: Number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    return (dateFormat(date, format) as string).split(formatSplit);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplit);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract',\n    shift = false\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractHours(date, shift ? 10 : 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractMinutes(date, shift ? 10 : 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractSeconds(date, shift ? 10 : 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function dateEqual(\n    dateA?: ReactTimebombDate,\n    dateB?: ReactTimebombDate,\n    considerTime = false\n) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    if (considerTime) {\n        if (isArray(dateA)) {\n            dateA = dateA.map(startOfDay);\n        } else {\n            dateA = startOfDay(dateA);\n        }\n\n        if (isArray(dateB)) {\n            dateB = dateB.map(startOfDay);\n        } else {\n            dateB = startOfDay(dateB);\n        }\n    }\n\n    if (isArray(dateA) && isArray(dateB)) {\n        return dateA.every((date, i) => {\n            const dBi = dateB![i];\n\n            if (date && dBi) {\n                return date.getTime() === dBi.getTime();\n            }\n\n            return false;\n        });\n    } else if (isArray(dateA) && dateB instanceof Date) {\n        return dateA.some(d => d.getTime() === (dateB as Date).getTime());\n    } else if (isArray(dateB) && dateA instanceof Date) {\n        return dateB.some(d => d.getTime() === (dateA as Date).getTime());\n    } else if (!isArray(dateA) && !isArray(dateB)) {\n        return dateA.getTime() === dateB.getTime();\n    }\n\n    return false;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function getWeekdayNames() {\n    return moment.weekdaysShort();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport function isDateFormat(format: string) {\n    return Boolean(/D|M|Y/.test(format));\n}\n\nexport function isTimeFormat(format: string) {\n    return Boolean(/H|h|m|k|a|S|s/.test(format));\n}\n\nexport function sortDates(a: Date, b: Date) {\n    return a.getTime() - b.getTime();\n}\n\nexport function isArray(val: any): val is any[] {\n    return Array.isArray(val);\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    DOT: 190,\n    COMMA: 188\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { Button } from './button';\nimport {\n    subtractDays,\n    startOfMonth,\n    endOfMonth,\n    addDays,\n    getMonthNames\n} from './utils';\nimport { isArray } from 'util';\n\ninterface MenuTitleProps {\n    date: ReactTimebombState['date'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    onPrevMonth(): void;\n    onNextMonth(): void;\n    onReset(): void;\n    onMonth(): void;\n    onYear(): void;\n}\n\nconst Container = styled.div`\n    display: ${(props: { show: boolean }) => (props.show ? 'flex' : 'none')};\n    align-items: center;\n    width: 100%;\n    padding: 10px 10px 15px;\n    justify-content: space-between;\n    min-height: 21px;\n    box-sizing: border-box;\n`;\n\nexport class MenuTitle extends React.PureComponent<MenuTitleProps> {\n    private monthNames!: string[];\n\n    private get prevDisabled(): boolean {\n        const { minDate, date } = this.props;\n\n        if (minDate && date) {\n            return subtractDays(startOfMonth(this.date), 1) < minDate;\n        }\n\n        return false;\n    }\n\n    private get nextDisabled(): boolean {\n        const { maxDate, date } = this.props;\n\n        if (maxDate && date) {\n            const lastDate = isArray(date) ? date[date.length - 1] : date;\n\n            return addDays(endOfMonth(lastDate), 1) > maxDate;\n        }\n\n        return false;\n    }\n\n    private get date() {\n        const { date, selectedRange } = this.props;\n\n        return (isArray(date) ? date[selectedRange] : date)!;\n    }\n\n    constructor(props: MenuTitleProps) {\n        super(props);\n\n        this.monthNames = getMonthNames();\n    }\n\n    public render(): React.ReactNode {\n        const {\n            mode,\n            onNextMonth,\n            onPrevMonth,\n            onMonth,\n            onReset,\n            onYear\n        } = this.props;\n        const show = mode === 'day';\n        const date = this.date;\n\n        return (\n            <Container show={show}>\n                <div>\n                    <Button tabIndex={-1} onClick={onMonth}>\n                        <b>{this.monthNames[date.getMonth()]}</b>\n                    </Button>\n                    <Button tabIndex={-1} onClick={onYear}>\n                        {date.getFullYear()}\n                    </Button>\n                </div>\n                <div>\n                    <Button\n                        tabIndex={-1}\n                        disabled={this.prevDisabled}\n                        onClick={onPrevMonth}\n                    >\n                        ◀\n                    </Button>\n                    <Button tabIndex={-1} onClick={onReset}>\n                        ○\n                    </Button>\n                    <Button\n                        tabIndex={-1}\n                        disabled={this.nextDisabled}\n                        onClick={onNextMonth}\n                    >\n                        ▶\n                    </Button>\n                </div>\n            </Container>\n        );\n    }\n}\n"]}