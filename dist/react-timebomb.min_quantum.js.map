{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/menu-title.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","DEFAULT_FORMAT","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","showTime","Boolean","format","test","className","classNames","this","push","join","defaultDateValue","value","minDate","maxDate","date","Date","isBefore","isAfter","startOfDay","super","Error","state","allowValidation","mode","valueText","dateFormat","undefined","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onToday","onNextMonth","onPrevMonth","onSelectTime","prevProps","prevState","setState","valueTextDidUpdate","validDate","validateDate","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","Value","onSubmit","MenuTitle","onMonths","onYear","Menu","Fragment","onClose","type","onFocus","clearSelection","setTimeout","formattedDate","error","onError","getTime","onChange","day","setDate","getHours","getMinutes","now","setMonth","getMonth","time","splitted","split","newDate","parseInt","button_1","Flex","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","css","Day","current","selected","today","disabled","PureComponent","monthMatrix","dateMonth","dateYear","getFullYear","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","addDays","fullYears","year","currentYear","Array","fill","map","_","i","setFullYear","enabled","filter","obj","reverse","minYear","array","currentDate","style","display","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","onYearContainer","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","months","getMonthNames","month","str","cellSpacing","cellPadding","dates","getWeekOfYear","j","renderDay","num","getDate","isToday","e","currentTarget","getAttribute","el","querySelector","scrollIntoView","scrollBy","top","show","prevDisabled","subtractDays","nextDisabled","endOfMonth","Input","span","ArrowButton","ClearButton","Placeholder","Icon","WHITELIST_KEYS","keys","BACKSPACE","DELETE","TAB","searchInputs","onSearchRef","onKeyDown","onKeyUp","onBlur","onClear","formatGroups","reduce","memo","char","prevChar","length","substr","focused","document","some","inp","parts","splitDate","forEach","innerText","focus","selectText","showPlaceholder","data-role","renderValue","group","separator","contentEditable","data-placeholder","data-separator","data-group","data-react-timebomb-selectable","range","createRange","sel","getSelection","selectNodeContents","removeAllRanges","addRange","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","keyCode","ENTER","ESC","preventDefault","ARROW_RIGHT","HTMLSpanElement","ARROW_LEFT","ARROW_UP","ARROW_DOWN","isArrowUp","isNaN","isFinite","formatGroup","formatType","getFormatType","direction","manipulateDate","dateParts","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataValue","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","blur","forbiddenKeys","SHIFT","setAttribute","target","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst DEFAULT_FORMAT = 'YYYY-MM-DD';\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(\n                props.format && /H|h|m|k|a|S|s/.test(props.format)\n            )\n        };\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { value, minDate, maxDate, format = DEFAULT_FORMAT } = this.props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        this.state = {\n            allowValidation: false,\n            mode: 'month',\n            valueText: value ? dateFormat(value, format) : undefined,\n            date: this.defaultDateValue\n        };\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onToday = this.onToday.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate();\n        }\n    }\n\n    private valueTextDidUpdate(): void {\n        const { valueText, allowValidation } = this.state;\n        const { format = DEFAULT_FORMAT } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            value,\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format = DEFAULT_FORMAT\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 320;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n\n        return (\n            <Select<Date> value={value} placeholder={placeholder}>\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => (\n                    <Container ref={onRef} className={this.className}>\n                        <Value\n                            placeholder={open ? undefined : placeholder}\n                            format={format}\n                            value={value}\n                            valueText={valueText}\n                            minDate={minDate}\n                            maxDate={maxDate}\n                            allowValidation={allowValidation}\n                            open={open}\n                            onChangeValueText={this.onChangeValueText}\n                            onToggle={onToggle}\n                            onSubmit={this.onValueSubmit}\n                        />\n                        {open ? (\n                            <MenuContainer\n                                menuWidth={menuWidth}\n                                menuHeight={menuHeight}\n                            >\n                                <MenuWrapper menuHeight={menuHeight}>\n                                    <MenuTitle\n                                        mode={mode}\n                                        date={this.state.date}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onMonths={this.onModeMonths}\n                                        onYear={this.onModeYear}\n                                        onNextMonth={this.onNextMonth}\n                                        onPrevMonth={this.onPrevMonth}\n                                        onToday={this.onToday}\n                                    />\n                                    <Menu\n                                        showTime={showTime}\n                                        showConfirm={showConfirm}\n                                        showCalendarWeek={showCalendarWeek}\n                                        selectWeek={selectWeek}\n                                        date={this.state.date}\n                                        value={value}\n                                        valueText={valueText}\n                                        format={format}\n                                        mode={mode}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onSelectDay={this.onSelectDay}\n                                        onSelectMonth={this.onSelectMonth}\n                                        onSelectYear={this.onSelectYear}\n                                        onSelectTime={this.onSelectTime}\n                                        onToggle={onToggle}\n                                        onSubmit={this.onValueSubmit}\n                                    />\n                                </MenuWrapper>\n                            </MenuContainer>\n                        ) : (\n                            <>\n                                {this.onClose()}\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            </>\n                        )}\n                    </Container>\n                )}\n            </Select>\n        );\n    }\n\n    private onClose(): null {\n        clearSelection();\n\n        setTimeout(() => {\n            const { format = DEFAULT_FORMAT } = this.props;\n            const validDate = validateDate(this.state.valueText, format);\n            const isValid = validDate\n                ? isEnabled('day', validDate, this.props)\n                : validDate;\n\n            if (!isValid && this.props.value) {\n                const formattedDate = dateFormat(this.props.value, format);\n\n                if (this.state.valueText !== formattedDate) {\n                    this.setState({ valueText: formattedDate });\n                }\n            }\n        }, 0);\n\n        return null;\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.props.onError && this.state.allowValidation) {\n            this.props.onError(error, value);\n        }\n    }\n\n    private emitChange(date?: Date): void {\n        const { value } = this.props;\n\n        if (value && date && value.getTime() === date.getTime()) {\n            return;\n        }\n\n        this.props.onChange(date);\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(valueText: string): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(onToggle: () => void): void {\n        onToggle();\n        clearSelection();\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format = DEFAULT_FORMAT } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format);\n\n        this.setState({ date, valueText }, () => this.emitChange(date));\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onToday(): void {\n        const now = startOfDay(new Date());\n\n        this.setState({ date: now });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format = DEFAULT_FORMAT } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value));\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format);\n\n            this.setState({ valueText }, () => this.emitChange(newDate));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    isToday,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek\n} from './utils';\nimport { Button } from './button';\n\ninterface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    format: string;\n    onToggle(): void;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(onToggle: () => void): void;\n}\n\ninterface DayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: center;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        line-height: 3.13;\n        border: none;\n        margin: 0;\n        padding: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nconst Day = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: DayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: ${(props: DayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: DayProps) => (props.selected ? 'bold' : 'normal')};\n    pointer-events: ${(props: DayProps) => (props.disabled ? 'none' : 'auto')};\n    user-select: none;\n    opacity: ${(props: DayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: DayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private get monthMatrix(): (Date[])[] {\n        const { date } = this.props;\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { minDate, maxDate } = this.props;\n        const year = this.props.date.getFullYear();\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(minDate);\n\n                    date.setFullYear(currentYear + i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(maxDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                const date = new Date(maxDate);\n\n                date.setFullYear(i);\n\n                const enabled = isEnabled('year', date, this.props);\n                const selected = year === date.getFullYear();\n\n                array.push({ date, enabled, selected });\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showConfirm } = this.props;\n\n        switch (mode) {\n            case 'year':\n            case 'months':\n                return (\n                    <div style={{ display: 'flex' }}>\n                        {this.renderMenuMonths()}\n                        {this.renderMenuYear()}\n                    </div>\n                );\n            case 'month':\n                return (\n                    <MonthContainer>\n                        {this.renderMonth()}\n                        {showConfirm && this.renderConfirm()}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { date, value } = this.props;\n        const months = getMonthNames(true);\n        const month = value && value.getMonth();\n        const year = value && value.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { monthMatrix } = this;\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {monthMatrix.map((dates, i) => (\n                        <tr key={i}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    {getWeekOfYear(dates[0])}\n                                </td>\n                            )}\n                            {dates.map((date, j) => (\n                                <td className=\"day\" key={j}>\n                                    {this.renderDay(date)}\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderDay(day: Date): React.ReactNode {\n        const num = day.getDate();\n        const { value, date, selectWeek } = this.props;\n        let selected =\n            value &&\n            day.getDate() === value.getDate() &&\n            day.getMonth() === value.getMonth();\n        const current = day.getMonth() === date.getMonth();\n        const enabled = isEnabled('day', day, this.props);\n        const today = isToday(day);\n\n        if (selectWeek && value) {\n            selected = getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return (\n            <Day\n                data-date={day.toISOString()}\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={!enabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {num}\n            </Day>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={validDate === null}\n                    onClick={() => this.props.onSubmit(this.props.onToggle)}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private onSelectDay(e: React.SyntheticEvent<HTMLDivElement>): void {\n        const { onSelectDay, showConfirm, onSubmit, onToggle } = this.props;\n        const date = new Date(e.currentTarget.getAttribute('data-date')!);\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit(onToggle);\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        if (el) {\n            const selected = el.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n                el.scrollBy({ top: -10 });\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { Button } from './button';\nimport {\n    subtractDays,\n    startOfMonth,\n    endOfMonth,\n    addDays,\n    getMonthNames\n} from './utils';\n\ninterface MenuTitleProps {\n    date: Date;\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    mode: ReactTimebombState['mode'];\n    onPrevMonth(): void;\n    onNextMonth(): void;\n    onToday(): void;\n    onMonths(): void;\n    onYear(): void;\n}\n\nconst Container = styled.div`\n    display: ${(props: { show: boolean }) => (props.show ? 'flex' : 'none')};\n    align-items: center;\n    width: 100%;\n    padding: 10px 10px 15px;\n    justify-content: space-between;\n    min-height: 21px;\n    box-sizing: border-box;\n`;\n\nexport class MenuTitle extends React.PureComponent<MenuTitleProps> {\n    private get prevDisabled(): boolean {\n        const { minDate, date } = this.props;\n\n        if (minDate) {\n            return subtractDays(startOfMonth(date), 1) < minDate;\n        }\n\n        return false;\n    }\n\n    private get nextDisabled(): boolean {\n        const { maxDate, date } = this.props;\n\n        if (maxDate) {\n            return addDays(endOfMonth(date), 1) > maxDate;\n        }\n\n        return false;\n    }\n\n    public render(): React.ReactNode {\n        const {\n            date,\n            mode,\n            onNextMonth,\n            onPrevMonth,\n            onMonths,\n            onToday,\n            onYear\n        } = this.props;\n        const months = getMonthNames();\n        const show = mode === 'month';\n\n        return (\n            <Container show={show}>\n                <div>\n                    <Button tabIndex={-1} onClick={onMonths}>\n                        <b>{months[date.getMonth()]}</b>\n                    </Button>\n                    <Button tabIndex={-1} onClick={onYear}>\n                        {date.getFullYear()}\n                    </Button>\n                </div>\n                <div>\n                    <Button\n                        tabIndex={-1}\n                        disabled={this.prevDisabled}\n                        onClick={onPrevMonth}\n                    >\n                        ◀\n                    </Button>\n                    <Button tabIndex={-1} onClick={onToday}>\n                        ○\n                    </Button>\n                    <Button\n                        tabIndex={-1}\n                        disabled={this.nextDisabled}\n                        onClick={onNextMonth}\n                    >\n                        ▶\n                    </Button>\n                </div>\n            </Container>\n        );\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled\n} from './utils';\nimport { ReactTimebombProps } from './typings';\nimport { Button } from './button';\n\ninterface ValueProps {\n    open?: boolean;\n    value?: Date;\n    valueText?: string;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    allowValidation?: boolean;\n    onToggle(): void;\n    onChangeValueText(valueText: string): void;\n    onSubmit(onToggle: () => void): void;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ClearButton = styled(ArrowButton)`\n    font-size: 18px;\n`;\n\nconst Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nconst Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '📅';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nexport class Value extends React.PureComponent<ValueProps> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (prevProps.value !== value && value) {\n                const parts = splitDate(value, format);\n                const input = this.searchInputs[0];\n\n                this.searchInputs.forEach(\n                    (input, i) => (input.innerText = parts[i])\n                );\n\n                if (input) {\n                    input.focus();\n                }\n            }\n\n            if ((open && !prevProps.open) || value !== prevProps.value) {\n                const input = this.searchInputs[0];\n\n                if (input) {\n                    if (input.innerText === '') {\n                        input.focus();\n                    } else {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <ArrowButton tabIndex={-1} className=\"react-timebomb-arrow\">\n                        {open ? '▲' : '▼'}\n                    </ArrowButton>\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onFocus}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const nextValue = numericValue + (isArrowUp ? 1 : -1);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, allowValidation } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        if (e.keyCode === keys.ENTER || e.keyCode === keys.ESC) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            this.props.onSubmit(this.props.onToggle);\n\n            return;\n        }\n\n        const forbiddenKeys = [\n            keys.SHIFT,\n            keys.ARROW_LEFT,\n            keys.ARROW_RIGHT,\n            keys.ARROW_UP,\n            keys.ARROW_DOWN,\n            keys.TAB\n        ];\n\n        // focus next\n        if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !forbiddenKeys.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', innerText);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                focused &&\n                !focused.getAttribute('data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onChangeValueText('');\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}