{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","minDate","maxDate","isBefore","Error","this","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","showTime","Boolean","test","format","className","classNames","push","error","join","defaultDateValue","value","date","Date","isAfter","startOfDay","allowValidation","mode","valueText","dateFormat","undefined","prevProps","prevState","setState","valueTextDidUpdate","commit","validDate","validateDate","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","MENU_HEIGHT","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","Value","onSubmit","Math","max","MENU_WIDTH","MenuTitle","onMonths","onYear","Menu","type","onFocus","clearSelection","setTimeout","onError","onChange","dateEqual","day","setDate","getHours","getMinutes","setMonth","getMonth","time","splitted","split","newDate","parseInt","defaultProps","button_1","Flex","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","css","StyledDay","current","selected","today","disabled","Day","PureComponent","getWeekOfYear","enabled","isToday","onClick","getDate","monthMatrixCache","Map","now","monthMatrix","dateMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","addDays","set","fullYears","year","currentYear","Array","fill","map","_","i","setFullYear","filter","obj","reverse","minYear","array","currentDate","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","onYearContainer","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","months","getMonthNames","month","str","cellSpacing","cellPadding","dates","weekNum","Object","assign","isValid","e","getAttribute","currentTarget","el","querySelector","scrollIntoView","scrollBy","top","Input","span","ArrowButton","ClearButton","Placeholder","Icon","WHITELIST_KEYS","keys","BACKSPACE","DELETE","TAB","searchInputs","onSearchRef","onKeyDown","onKeyUp","onBlur","onClear","formatGroups","reduce","memo","char","prevChar","length","substr","focused","document","some","inp","parts","splitDate","forEach","innerText","focus","selectText","showPlaceholder","data-role","renderValue","group","separator","contentEditable","data-placeholder","data-separator","data-group","data-react-timebomb-selectable","range","createRange","sel","getSelection","selectNodeContents","removeAllRanges","addRange","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","keyCode","ENTER","ESC","preventDefault","ARROW_RIGHT","HTMLSpanElement","ARROW_LEFT","ARROW_UP","ARROW_DOWN","isArrowUp","isNaN","isFinite","formatGroup","formatType","getFormatType","direction","manipulateDate","dateParts","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataValue","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","blur","forbiddenKeys","SHIFT","setAttribute","target","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(/H|h|m|k|a|S|s/.test(props.format!))\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'month',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format,\n            error\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<Date>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            <Value\n                                placeholder={open ? undefined : placeholder}\n                                format={format!}\n                                value={value}\n                                valueText={valueText}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowValidation={allowValidation}\n                                open={open}\n                                onChangeValueText={this.onChangeValueText}\n                                onToggle={onToggle}\n                                onSubmit={this.onValueSubmit}\n                            />\n                            {open ? (\n                                <MenuContainer\n                                    menuWidth={Math.max(\n                                        ReactTimebomb.MENU_WIDTH,\n                                        menuWidth || 0\n                                    )}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState);\n        }, 16);\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange(date: Date | undefined, commit: boolean): void {\n        const { value, showConfirm, onChange } = this.props;\n\n        if (!showConfirm) {\n            commit = true;\n        }\n\n        if (dateEqual(value, date)) {\n            return;\n        }\n\n        if (commit) {\n            onChange(date);\n        }\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(\n        valueText: string | undefined,\n        commit = false\n    ): void {\n        this.setState({ valueText }, () => {\n            if (commit) {\n                this.emitChange(undefined, true);\n            }\n        });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format!);\n\n        this.setState({ date, valueText });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value), false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    isToday,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    dateEqual,\n    getAttribute\n} from './utils';\nimport { Button } from './button';\n\ninterface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface StyledDayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: 220px;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 46px;\n        border: none;\n        margin: 0 0 4px;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nconst StyledDay = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: StyledDayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: ${(props: StyledDayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: StyledDayProps) =>\n        props.selected ? 'bold' : 'normal'};\n    pointer-events: ${(props: StyledDayProps) =>\n        props.disabled ? 'none' : 'auto'};\n    user-select: none;\n    opacity: ${(props: StyledDayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: StyledDayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\ninterface DayProps extends MenuProps {\n    day: Date;\n}\n\nclass Day extends React.PureComponent<DayProps> {\n    constructor(props: DayProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n    }\n\n    private get selected() {\n        const { value, selectWeek, day } = this.props;\n\n        if (selectWeek && value) {\n            return getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return dateEqual(value, day);\n    }\n\n    public render() {\n        const { day, date } = this.props;\n        const current = day.getMonth() === date.getMonth();\n        const enabled = isEnabled('day', day, this.props);\n        const today = isToday(day);\n        const selected = this.selected;\n\n        return (\n            <StyledDay\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={!enabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {day.getDate()}\n            </StyledDay>\n        );\n    }\n\n    private onSelectDay() {\n        this.props.onSelectDay(this.props.day);\n    }\n}\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const { date } = this.props;\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { minDate, maxDate } = this.props;\n        const year = this.props.date.getFullYear();\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(minDate);\n\n                    date.setFullYear(currentYear + i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(maxDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                const date = new Date(maxDate);\n\n                date.setFullYear(i);\n\n                const enabled = isEnabled('year', date, this.props);\n                const selected = year === date.getFullYear();\n\n                array.push({ date, enabled, selected });\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showConfirm } = this.props;\n\n        switch (mode) {\n            case 'year':\n            case 'months':\n                return (\n                    <MonthAndYearContainer>\n                        {this.renderMenuMonths()}\n                        {this.renderMenuYear()}\n                    </MonthAndYearContainer>\n                );\n            case 'month':\n                return (\n                    <MonthContainer>\n                        {this.renderMonth()}\n                        {showConfirm && this.renderConfirm()}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { date, value } = this.props;\n        const months = getMonthNames(true);\n        const month = value && value.getMonth();\n        const year = value && value.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">{weekNum}</td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            {...this.props}\n                                            day={date}\n                                            onSelectDay={this.onSelectDay}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        if (el) {\n            const selected = el.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n                el.scrollBy({ top: -10 });\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled\n} from './utils';\nimport { ReactTimebombProps } from './typings';\nimport { Button } from './button';\n\ninterface ValueProps {\n    open?: boolean;\n    value?: Date;\n    valueText?: string;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    allowValidation?: boolean;\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onSubmit(): void;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n`;\n\nconst Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ClearButton = styled(ArrowButton)`\n    font-size: 18px;\n`;\n\nconst Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nconst Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '📅';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nexport class Value extends React.PureComponent<ValueProps> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.searchInputs[0];\n\n                    this.searchInputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const input = this.searchInputs[0];\n\n                    if (input) {\n                        if (input.innerText === '') {\n                            input.focus();\n                        } else {\n                            this.selectText(input);\n                        }\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <ArrowButton tabIndex={-1} className=\"react-timebomb-arrow\">\n                        {open ? '▲' : '▼'}\n                    </ArrowButton>\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onFocus}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const nextValue = numericValue + (isArrowUp ? 1 : -1);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, allowValidation } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            this.props.onSubmit();\n\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            this.props.onToggle();\n\n            return;\n        }\n\n        const forbiddenKeys = [\n            keys.SHIFT,\n            keys.ARROW_LEFT,\n            keys.ARROW_RIGHT,\n            keys.ARROW_UP,\n            keys.ARROW_DOWN,\n            keys.TAB\n        ];\n\n        // focus next\n        if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !forbiddenKeys.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', innerText);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onChangeValueText(undefined, true);\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}