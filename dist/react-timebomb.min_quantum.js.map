{"version":3,"sources":["src/index.tsx","src/components/button.tsx","src/value/value.tsx","src/typings.ts","src/value/value-multi.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onChangeMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onMenuRef","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","selectWeek","timeStep","onOpen","menuWidth","Math","max","MENU_WIDTH","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","onClick","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","arrowButtonComponent","arrowButtonId","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","newDate","map","e","target","HTMLDivElement","classList","contains","el","getBoundingClientRect","height","defaultProps","StyledButton","button","selected","Button","Object","assign","data-react-timebomb-selectable","data-role","SmallButton","ArrowButton","id","tabIndex","button_1","Flex","Input","span","ClearButton","ClearButtonX","Placeholder","Icon","icon","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","PureComponent","inputs","currentTarget","selectElement","allSelected","formatGroup","getAttribute","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","formatGroups","split","reduce","memo","char","prevChar","substr","formatSplitExpr","test","focused","document","querySelector","iconClass","hasFocus","some","inp","allowTextSelection","parts","splitDate","forEach","i","innerText","focus","find","forceUpdate","ArrowButtonComp","showPlaceholder","showClearer","timeOnly","contentEditable","group","g","separator","data-placeholder","data-separator","replaceSpaceWithNbsp","key","data-group","onDoubleClick","nextSibling","previousSibling","numericFormat","formatIsActualNumber","sel","getSelection","hasSelection","focusOffset","baseOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","manipulateDate","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","firstInput","validatedChar","blur","parentNode","dataGroup","filledValue","fillZero","stopPropagation","ArrowButtonProps","body","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentClass<MenuContainerProps, any>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0,\n            menuHeight: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onMenuRef = this.onMenuRef.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = this.state.menuHeight || ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                    onClick={\n                                        mobile\n                                            ? this.onMobileMenuContainerClick\n                                            : undefined\n                                    }\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                        ref={this.onMenuRef}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            arrowButtonComponent,\n            arrowButtonId\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonId={arrowButtonId}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n            return;\n        }\n\n        const date = setDate(\n            day,\n            valueDate ? valueDate.getHours() : 0,\n            valueDate ? valueDate.getMinutes() : 0\n        );\n\n        if (selectRange) {\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(\n                              this.state.valueText[0],\n                              format!\n                          ) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n            this.setState({ date: dateArr, valueText, selectedRange });\n        } else {\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: Date, mode: FormatType, commit = false): void {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        this.setState({ mode, valueText }, () =>\n            this.emitChange(newDate, commit)\n        );\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n\n    private onMenuRef(el: HTMLDivElement | null) {\n        if (el) {\n            this.setState({ menuHeight: el.getBoundingClientRect().height });\n        } else {\n            this.setState({ menuHeight: 0 });\n        }\n    }\n}\n","// @ts-ignore\nimport * as React from 'react';\nimport styled, { css } from 'styled-components';\n\nexport interface ButtonProps {\n    selected?: boolean;\n    mobile?: boolean;\n}\n\nconst StyledButton = styled.button`\n    margin-right: 5px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n    padding: 3px 6px;\n    height: 21px;\n    box-sizing: border-box;\n    background: ${(props: ButtonProps) => (props.selected ? '#ccc' : '#fff')};\n\n    ${(props: ButtonProps) =>\n        props.mobile\n            ? css`\n                  font-size: 16px;\n                  margin-right: 6px;\n                  padding: 6px 12px;\n                  height: auto;\n                  min-height: 21px;\n              `\n            : ''}\n\n    &:focus {\n        outline: none;\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    &:not(:disabled) {\n        cursor: pointer;\n    }\n\n    &:not(:disabled):hover {\n        background-color: ${(props: ButtonProps) =>\n            props.selected ? '#ccc' : '#efefef'};\n    }\n\n    &:last-child {\n        margin-right: 0;\n    }\n`;\n\nexport const Button = (props: ButtonProps & React.ButtonHTMLAttributes<{}>) => (\n    <StyledButton\n        data-react-timebomb-selectable\n        data-role=\"button\"\n        type=\"button\"\n        {...props}\n    />\n);\n\nexport const SmallButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover:not(:disabled) {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport interface ArrowButtonProps {\n    open?: boolean;\n    disabled?: boolean;\n    id?: string;\n}\n\nexport const ArrowButton = (props: ArrowButtonProps) => (\n    <SmallButton\n        className=\"react-timebomb-arrow\"\n        id={props.id}\n        disabled={props.disabled}\n        tabIndex={-1}\n    >\n        {props.open ? '▲' : '▼'}\n    </SmallButton>\n);\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled,\n    selectElement,\n    fillZero,\n    clearSelection,\n    formatSplitExpr,\n    formatIsActualNumber,\n    replaceSpaceWithNbsp\n} from '../utils';\nimport { ReactTimebombProps, ReactTimebombState } from '../typings';\nimport { ArrowButton, SmallButton } from '../components/button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    arrowButtonId: ReactTimebombProps['arrowButtonId'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    timeStep: ReactTimebombProps['timeStep'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        setTimeout(() => {\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n                        const input = this.inputs[0];\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (input && allowTextSelection) {\n                            input.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            const [input] = this.inputs;\n\n                            if (input) {\n                                selectElement(input);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            <ClearButtonX>×</ClearButtonX>\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n","import { ArrowButtonProps } from './components/button';\n\nexport type ReactTimebombDate = Date | undefined | Date[];\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectWeek?: boolean;\n    selectRange?: boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: any;\n    mobile?: boolean;\n    arrowButtonComponent?: React.ComponentType<ArrowButtonProps>;\n    arrowButtonId?: string;\n    timeStep?: number;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode?: FormatType;\n    showDate?: boolean;\n    showTime?: boolean;\n    selectedRange: number;\n    menuHeight: number;\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\nexport type FormatType =\n    | 'day'\n    | 'month'\n    | 'year'\n    | 'hour'\n    | 'minute'\n    | 'second';\n\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n","import * as React from 'react';\nimport {\n    Container,\n    Flex,\n    Icon,\n    ValueProps,\n    Placeholder,\n    ClearButton\n} from './value';\nimport { dateFormat, keys } from '../utils';\nimport { ArrowButton } from '../components/button';\n\ninterface MultiValueProps {\n    value: undefined | Date[];\n    placeholder: ValueProps['placeholder'];\n    open: ValueProps['open'];\n    arrowButtonComponent: ValueProps['arrowButtonComponent'];\n    arrowButtonId: ValueProps['arrowButtonId'];\n    disabled: ValueProps['disabled'];\n    onToggle(): void;\n    onClear(): void;\n}\n\nexport class ValueMulti extends React.PureComponent<MultiValueProps> {\n    constructor(props: MultiValueProps) {\n        super(props);\n\n        this.onClear = this.onClear.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n    }\n\n    public componentDidMount() {\n        document.body.addEventListener('keyup', this.onKeyUp);\n    }\n\n    public componentWillUnmount() {\n        document.body.removeEventListener('keyup', this.onKeyUp);\n    }\n\n    public render() {\n        const {\n            placeholder,\n            value,\n            open,\n            disabled,\n            arrowButtonId,\n            onToggle\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={disabled ? undefined : onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" icon=\"📅\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            disabled={disabled}\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <ArrowButtonComp\n                        id={arrowButtonId}\n                        disabled={disabled}\n                        open={open}\n                    />\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue() {\n        const { value } = this.props;\n\n        if (!value) {\n            return null;\n        }\n\n        return value.map(d => dateFormat(d, 'DD.MM.YYYY')).join(' – ');\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onKeyUp(e: KeyboardEvent) {\n        const { open, onToggle } = this.props;\n\n        switch (e.keyCode) {\n            case keys.ESC:\n                if (open) {\n                    onToggle();\n                }\n                break;\n        }\n    }\n}\n"]}