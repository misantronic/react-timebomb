{"version":3,"sources":["src/menu/index.tsx","src/menu/table.tsx","src/menu/day.tsx"],"names":["React","$fsx","r","styled_components_1","button_1","utils_1","mobile_1","table_1","time_1","MonthAndYearContainer","default","div","props","mobile","MonthsContainer","MonthContainer","YearContainer","Confirm","MobileMenuTable","MenuTable","getDate","date","selectedRange","isArray","MenuMonths","value","monthNames","useState","getMonthNames","valueDate","month","getMonth","year","getFullYear","onSelectMonth","e","Date","getAttribute","currentTarget","setTimeout","createElement","className","map","str","i","newDate","setMonth","enabled","isEnabled","selected","Button","key","tabIndex","undefined","disabled","data-date","toISOString","onClick","MenuYear","minDate","maxDate","yearContainer","setYearContainer","scrollToYear","querySelector","scrollIntoView","scrollBy","top","onSelectYear","useEffect","ref","el","getDateConfig","newYear","setFullYear","setSeconds","getSeconds","setMinutes","getMinutes","setHours","getHours","setDate","currentYear","Array","fill","_","filter","obj","reverse","minYear","array","push","now","currentDate","getFullYears","fullYear","dateStr","MenuConfirm","valueText","format","validDate","validateDate","isValid","every","v","onSubmit","MonthWrapper","GestureWrapper","allowNext","addDays","endOfMonth","allowPrev","subtractDays","startOfMonth","onChangeMonth","direction","addMonths","subtractMonths","selectRange","showCalendarWeek","showConfirm","showTime","onSelectDay","onHoverDays","exports","Menu","mode","showDate","ConfirmComponent","confirmComponent","Object","assign","MenuTime","timeStep","topDivider","onChange","onSelectTime","onSubmitTime","onCancel","day_1","Table","table","hoverDays","setHoverDays","current","weekdayNames","useRef","getWeekdayNames","sun","mon","tue","wed","thu","fri","sat","c","Boolean","join","monthMatrix","useMemo","dateMonth","dateYear","weeks","base","week","startOfWeek","endOfWeek","weekStart","getCacheKey","onDayMouseEnter","day","days","firstDay","onDayMouseLeave","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","selectedWeek","config","dayWeekOfYear","some","length","firstHover","lastHover","dateEqual","getSelected","includes","WeekNum","hover","hoverDay","Day","onMouseEnter","onMouseLeave","Flex","StyledDay","setEnabled","today","setToday","dayMonth","d","isToday","getTime","classes","getClassNames","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState } from '../';\nimport { Button } from '../components/button';\nimport { ReactTimebombDate, ReactTimebombMenuProps } from '../typings';\nimport {\n    addDays,\n    addMonths,\n    endOfMonth,\n    getAttribute,\n    getMonthNames,\n    isArray,\n    isEnabled,\n    startOfMonth,\n    subtractDays,\n    subtractMonths,\n    validateDate\n} from '../utils';\nimport { GestureDirection, GestureWrapper } from './mobile';\nimport { MenuTable } from './table';\nimport { MenuTime } from './time';\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0;\n    height: 100%;\n    overflow: hidden;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst MobileMenuTable = styled(MenuTable)`\n    width: 33.3%;\n`;\n\nfunction getDate(\n    date: ReactTimebombDate,\n    selectedRange: ReactTimebombState['selectedRange']\n) {\n    return (isArray(date) ? date[selectedRange] : date)!;\n}\n\nfunction MenuMonths(props: ReactTimebombMenuProps) {\n    const { value, mobile, selectedRange } = props;\n    const [monthNames] = React.useState(getMonthNames(true));\n    const valueDate = getDate(value, selectedRange);\n    const date = getDate(props.date, selectedRange);\n    const month = value && valueDate.getMonth();\n    const year = value && valueDate.getFullYear();\n\n    function onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onSelectMonth(date), 0);\n    }\n\n    return (\n        <MonthsContainer mobile={mobile} className=\"months\">\n            {monthNames.map((str, i) => {\n                const newDate = new Date(date);\n\n                newDate.setMonth(i);\n\n                const enabled = isEnabled('month', newDate, props);\n                const selected =\n                    month === newDate.getMonth() &&\n                    year === newDate.getFullYear();\n\n                return (\n                    <Button\n                        key={str}\n                        tabIndex={-1}\n                        className={selected ? 'selected' : undefined}\n                        selected={selected}\n                        disabled={!enabled}\n                        mobile={props.mobile}\n                        data-date={newDate.toISOString()}\n                        onClick={onSelectMonth}\n                    >\n                        {str}\n                    </Button>\n                );\n            })}\n        </MonthsContainer>\n    );\n}\n\nfunction MenuYear(props: ReactTimebombMenuProps) {\n    const { value, minDate, maxDate } = props;\n    const [\n        yearContainer,\n        setYearContainer\n    ] = React.useState<HTMLDivElement | null>(null);\n\n    React.useEffect(scrollToYear, [props.date]);\n\n    function scrollToYear() {\n        if (yearContainer) {\n            const selected = yearContainer.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n\n                if (yearContainer.scrollBy) {\n                    yearContainer.scrollBy({ top: -10 });\n                }\n            }\n        }\n    }\n\n    function getFullYears() {\n        const valueDate = getDate(value, props.selectedRange);\n        const year = getDate(props.date, props.selectedRange).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = new Date();\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    function onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onSelectYear(date), 0);\n    }\n\n    function onYearContainer(el: HTMLDivElement | null) {\n        setYearContainer(el);\n        scrollToYear();\n    }\n\n    return (\n        <YearContainer ref={onYearContainer} className=\"years\">\n            {getFullYears()\n                .map(({ date, selected }) => {\n                    const fullYear = date.getFullYear();\n                    const dateStr = date.toISOString();\n\n                    return (\n                        <Button\n                            key={dateStr}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            mobile={props.mobile}\n                            data-date={dateStr}\n                            onClick={onSelectYear}\n                        >\n                            {fullYear}\n                        </Button>\n                    );\n                })\n                .reverse()}\n        </YearContainer>\n    );\n}\n\nfunction MenuConfirm(props: ReactTimebombMenuProps) {\n    const { valueText, format } = props;\n    const validDate = validateDate(valueText, format);\n    const isValid = validDate\n        ? isArray(validDate)\n            ? validDate.every(v => isEnabled('day', v, props))\n            : isEnabled('day', validDate, props)\n        : false;\n\n    return (\n        <Confirm>\n            <Button\n                tabIndex={-1}\n                disabled={!isValid}\n                mobile={props.mobile}\n                onClick={() => props.onSubmit()}\n            >\n                Ok\n            </Button>\n        </Confirm>\n    );\n}\n\nfunction MonthWrapper(props: ReactTimebombMenuProps) {\n    const { minDate, maxDate, mobile } = props;\n\n    function allowPrev() {\n        let date = props.date;\n\n        if (!minDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (subtractDays(startOfMonth(date), 1) < minDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function allowNext() {\n        let date = props.date;\n\n        if (!maxDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (addDays(endOfMonth(date), 1) > maxDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function onChangeMonth(direction: GestureDirection) {\n        const { onChangeMonth } = props;\n        const date = getDate(props.date, props.selectedRange);\n\n        switch (direction) {\n            case 'next':\n                onChangeMonth(addMonths(date, 1));\n                break;\n            case 'prev':\n                onChangeMonth(subtractMonths(date, 1));\n                break;\n        }\n    }\n\n    if (mobile) {\n        return (\n            <GestureWrapper\n                allowNext={allowNext()}\n                allowPrev={allowPrev()}\n                onChangeMonth={onChangeMonth}\n            >\n                <MobileMenuTable\n                    date={subtractMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={subtractMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={props.date}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={props.value}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={addMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={addMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n            </GestureWrapper>\n        );\n    }\n\n    return (\n        <MenuTable\n            date={props.date}\n            minDate={props.minDate}\n            maxDate={props.maxDate}\n            mobile={props.mobile}\n            selectRange={props.selectRange}\n            selectedRange={props.selectedRange}\n            showCalendarWeek={props.showCalendarWeek}\n            showConfirm={props.showConfirm}\n            showTime={props.showTime}\n            value={props.value}\n            onSubmit={props.onSubmit}\n            onSelectDay={props.onSelectDay}\n            onHoverDays={props.onHoverDays}\n        />\n    );\n}\n\nexport function Menu(props: ReactTimebombMenuProps) {\n    const { mode, mobile, showDate, showConfirm, showTime } = props;\n    const ConfirmComponent = props.confirmComponent || MenuConfirm;\n\n    if (showDate || showTime) {\n        switch (mode) {\n            case 'year':\n            case 'month':\n                return (\n                    <MonthAndYearContainer mobile={mobile}>\n                        <MenuMonths {...props} />\n                        <MenuYear {...props} />\n                    </MonthAndYearContainer>\n                );\n            case 'day':\n            case 'hour':\n            case 'minute':\n            case 'second':\n                return (\n                    <MonthContainer>\n                        {showDate && <MonthWrapper {...props} />}\n                        {showTime && (\n                            <MenuTime\n                                date={props.date}\n                                timeStep={props.timeStep}\n                                topDivider={props.showDate}\n                                format={props.format}\n                                onChange={props.onSelectTime}\n                                onSubmit={props.onSubmitTime}\n                                onCancel={props.onSubmitTime}\n                            />\n                        )}\n                        {showConfirm && <ConfirmComponent {...props} />}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    return null;\n}\n","import * as React from 'react';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombDate\n} from '../typings';\nimport {\n    startOfMonth,\n    startOfWeek,\n    endOfWeek,\n    addDays,\n    getWeekdayNames,\n    getWeekOfYear,\n    isArray,\n    dateEqual,\n    isEnabled\n} from '../utils';\nimport styled from 'styled-components';\nimport { WeekNum, Day } from './day';\n\ninterface MenuTableProps {\n    className?: string;\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    onSelectDay(date: Date): void;\n    onHoverDays?(dates: Date[]): void;\n    onSubmit(): void;\n}\n\nconst Table = styled.table`\n    width: 100%;\n    height: 186px;\n    font-size: inherit;\n    user-select: none;\n    padding: 5px 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        th {\n            padding: 3px 2px;\n            width: 14.285714286%;\n        }\n\n        td {\n            width: 14.285714286%;\n        }\n    }\n`;\n\nfunction getSelected(config: {\n    day: Date;\n    value: ReactTimebombDate;\n    selectRange: ReactTimebombProps['selectRange'];\n    hoverDays: Date[];\n    showTime?: boolean;\n}) {\n    const { day, value, hoverDays, showTime, selectRange } = config;\n\n    if (value) {\n        if (selectRange === 'week') {\n            const dayWeekOfYear = getWeekOfYear(day);\n\n            if (isArray(value)) {\n                return value.some(v => getWeekOfYear(v) === dayWeekOfYear);\n            }\n\n            return getWeekOfYear(value) === dayWeekOfYear;\n        }\n\n        if (selectRange && isArray(value)) {\n            const [minDate, maxDate] = value;\n\n            if (value.length === 1 && hoverDays.length) {\n                const firstHover = hoverDays[0];\n                const lastHover = hoverDays[hoverDays.length - 1];\n\n                return isEnabled('day', day, {\n                    minDate: minDate < firstHover ? minDate : firstHover,\n                    maxDate: minDate > lastHover ? minDate : lastHover\n                });\n            }\n\n            if (value.length === 2) {\n                return isEnabled('day', day, {\n                    minDate,\n                    maxDate\n                });\n            }\n        }\n    }\n\n    return dateEqual(value, day, showTime);\n}\n\nexport function MenuTable(props: MenuTableProps) {\n    const {\n        value,\n        showCalendarWeek,\n        selectRange,\n        selectedRange,\n        showConfirm,\n        showTime,\n        onSubmit\n    } = props;\n    const [hoverDays, setHoverDays] = React.useState<Date[]>([]);\n    const { current: weekdayNames } = React.useRef(getWeekdayNames());\n    const [sun, mon, tue, wed, thu, fri, sat] = weekdayNames;\n    const className = ['month', props.className]\n        .filter(c => Boolean(c))\n        .join(' ');\n\n    const monthMatrix = React.useMemo(() => {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }, [getCacheKey()]);\n\n    React.useEffect(() => {\n        if (props.onHoverDays) {\n            props.onHoverDays(hoverDays);\n        }\n    }, [hoverDays]);\n\n    function getCacheKey() {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        return `${dateMonth}-${dateYear}`;\n    }\n\n    function getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[selectedRange] : date)!;\n    }\n\n    function onSelectDay(date: Date): void {\n        props.onSelectDay(date);\n\n        if (!showConfirm && !selectRange) {\n            onSubmit();\n        }\n    }\n\n    function onDayMouseEnter(day: Date) {\n        if (typeof selectRange === 'number') {\n            const days = Array(selectRange)\n                .fill(null)\n                .map((_, i) => addDays(day, i));\n\n            setHoverDays(days);\n        } else if (selectRange === 'week') {\n            const firstDay = startOfWeek(day);\n            const days = Array(7)\n                .fill(null)\n                .map((_, i) => addDays(firstDay, i));\n\n            setHoverDays(days);\n        } else {\n            setHoverDays([day]);\n        }\n    }\n\n    function onDayMouseLeave() {\n        setHoverDays([]);\n    }\n\n    return (\n        <Table className={className} cellSpacing={0} cellPadding={0}>\n            <thead>\n                <tr>\n                    {showCalendarWeek && <th className=\"calendar-week\" />}\n                    <th>{mon}</th>\n                    <th>{tue}</th>\n                    <th>{wed}</th>\n                    <th>{thu}</th>\n                    <th>{fri}</th>\n                    <th>{sat}</th>\n                    <th>{sun}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {monthMatrix.map(dates => {\n                    const weekNum = getWeekOfYear(dates[0]);\n                    const selectedWeek = dates.map(day =>\n                        getSelected({\n                            day,\n                            value,\n                            selectRange,\n                            hoverDays,\n                            showTime\n                        })\n                    );\n                    const className = selectedWeek.includes(true)\n                        ? 'selected'\n                        : undefined;\n\n                    return (\n                        <tr key={weekNum} className={className}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    <WeekNum\n                                        day={dates[0]}\n                                        onClick={onSelectDay}\n                                    >\n                                        {weekNum}\n                                    </WeekNum>\n                                </td>\n                            )}\n                            {dates.map((day, i) => {\n                                const hover = hoverDays.some(hoverDay =>\n                                    dateEqual(hoverDay, day)\n                                );\n                                const selected = selectedWeek[i];\n                                const className = [\n                                    'day',\n                                    selected && 'selected'\n                                ]\n                                    .filter(c => c)\n                                    .join(' ');\n\n                                return (\n                                    <td\n                                        key={day.toISOString()}\n                                        className={className}\n                                    >\n                                        <Day\n                                            day={day}\n                                            hover={hover}\n                                            selected={selected}\n                                            date={props.date}\n                                            minDate={props.minDate}\n                                            maxDate={props.maxDate}\n                                            showTime={props.showTime}\n                                            onSelectDay={onSelectDay}\n                                            onMouseEnter={onDayMouseEnter}\n                                            onMouseLeave={onDayMouseLeave}\n                                        />\n                                    </td>\n                                );\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </Table>\n    );\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombMenuProps } from '../typings';\nimport { isArray, isEnabled, isToday } from '../utils';\n\ninterface DayProps {\n    day: Date;\n    hover: boolean;\n    selected: boolean;\n    date: ReactTimebombMenuProps['date'];\n    minDate: ReactTimebombMenuProps['minDate'];\n    maxDate: ReactTimebombMenuProps['maxDate'];\n    showTime: ReactTimebombMenuProps['showTime'];\n    onSelectDay: ReactTimebombMenuProps['onSelectDay'];\n    onMouseEnter(day: Date): void;\n    onMouseLeave(day: Date): void;\n}\n\ninterface StyledDayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst StyledDay = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: StyledDayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: transparent;\n    font-weight: ${(props: StyledDayProps) =>\n        props.selected ? 'bold' : 'normal'};\n    pointer-events: ${(props: StyledDayProps) =>\n        props.disabled ? 'none' : 'auto'};\n    user-select: none;\n    opacity: ${(props: StyledDayProps) => (props.disabled ? 0.3 : 1)};\n\n    &.today {\n        background-color: rgba(172, 206, 247, 0.4);\n    }\n\n    &.hover {\n        background-color: #eee;\n    }\n\n    &.selected {\n        background-color: #ddd;\n    }\n`;\n\nexport function Day(props: DayProps) {\n    const { day, date, selected, hover, minDate, maxDate, showTime } = props;\n    const [enabled, setEnabled] = React.useState(true);\n    const [today, setToday] = React.useState(false);\n    const current = React.useMemo(getCurrent, [date, day, showTime]);\n\n    React.useEffect(() => {\n        setToday(isToday(day));\n    }, [day.getTime()]);\n\n    React.useEffect(() => {\n        setEnabled(\n            isEnabled('day', day, {\n                minDate: props.minDate,\n                maxDate: props.maxDate\n            })\n        );\n    }, [\n        minDate ? minDate.getTime() : minDate,\n        maxDate ? maxDate.getTime() : maxDate\n    ]);\n\n    function getCurrent() {\n        const dayMonth = day.getMonth();\n\n        if (isArray(date)) {\n            return date.some(d => d.getMonth() === dayMonth);\n        }\n\n        if (date) {\n            return dayMonth === date.getMonth();\n        }\n\n        return false;\n    }\n\n    function onSelectDay() {\n        props.onSelectDay(day);\n    }\n\n    function onMouseEnter() {\n        props.onMouseEnter(day);\n    }\n\n    function onMouseLeave() {\n        props.onMouseLeave(day);\n    }\n\n    function getClassNames() {\n        const classes = ['value'];\n\n        if (selected) {\n            classes.push('selected');\n        }\n\n        if (today) {\n            classes.push('today');\n        }\n\n        if (hover) {\n            classes.push('hover');\n        }\n\n        return classes.join(' ');\n    }\n\n    return (\n        <StyledDay\n            className={getClassNames()}\n            selected={selected}\n            current={current}\n            disabled={!enabled}\n            onClick={onSelectDay}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n        >\n            {day.getDate()}\n        </StyledDay>\n    );\n}\n\ninterface WeekNumProps {\n    day: Date;\n    children: React.ReactNode;\n    onClick(day: Date): void;\n}\n\nexport function WeekNum(props: WeekNumProps) {\n    function onClick() {\n        props.onClick(props.day);\n    }\n\n    return <div onClick={onClick}>{props.children}</div>;\n}\n"]}