{"version":3,"sources":["src/index.tsx","src/value/value.tsx","src/value/value-multi.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","console","error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onChangeMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onMenuRef","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","some","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","timeStep","onOpen","menuWidth","Math","max","MENU_WIDTH","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","onClick","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","clearComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","day","valueDate","startOfWeek","endOfWeek","addDays","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","newDate","map","e","target","HTMLDivElement","classList","contains","el","getBoundingClientRect","height","defaultProps","button_1","Flex","Input","span","ClearButton","SmallButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","getIcon","DefaultClearComponent","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","PureComponent","inputs","currentTarget","selectElement","allSelected","formatGroup","getAttribute","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","formatGroups","split","reduce","memo","char","prevChar","substr","formatSplitExpr","test","focused","document","querySelector","hasFocus","inp","allowTextSelection","parts","splitDate","forEach","i","innerText","focus","find","forceUpdate","ArrowButtonComp","ArrowButton","ClearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","data-role","tabIndex","id","contentEditable","group","g","separator","data-react-timebomb-selectable","data-placeholder","data-separator","replaceSpaceWithNbsp","key","data-group","onDoubleClick","nextSibling","previousSibling","numericFormat","formatIsActualNumber","sel","getSelection","hasSelection","focusOffset","baseOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","manipulateDate","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","firstInput","validatedChar","blur","parentNode","dataGroup","filledValue","fillZero","stopPropagation","Fragment","useEffect","body","addEventListener","removeEventListener","Object","assign"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType,\n    addDays\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentClass<MenuContainerProps, any>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0,\n            menuHeight: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            console.error(\n                '[react-timebomb]: minDate must appear before maxDate'\n            );\n        }\n\n        if (selectRange === true && !showConfirm) {\n            console.error(\n                '[react-timebomb]: when setting `selectRange = true` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onMenuRef = this.onMenuRef.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.some(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = this.state.menuHeight || ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n                    const className = [this.className];\n\n                    if (showMenu) {\n                        className.push('open');\n                    }\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={className.join(' ')}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                    onClick={\n                                        mobile\n                                            ? this.onMobileMenuContainerClick\n                                            : undefined\n                                    }\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                        ref={this.onMenuRef}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId,\n            clearComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    iconComponent={iconComponent}\n                    arrowButtonId={arrowButtonId}\n                    arrowButtonComponent={arrowButtonComponent}\n                    clearComponent={clearComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                clearComponent={clearComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectRange === 'week') {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n            return;\n        } else if (typeof selectRange === 'number') {\n            const date = [day, addDays(day, selectRange - 1)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n            return;\n        }\n\n        const date = setDate(\n            day,\n            valueDate ? valueDate.getHours() : 0,\n            valueDate ? valueDate.getMinutes() : 0\n        );\n\n        if (selectRange) {\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(\n                              this.state.valueText[0],\n                              format!\n                          ) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n            this.setState({ date: dateArr, valueText, selectedRange });\n        } else {\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: Date, mode: FormatType, commit = false): void {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        this.setState({ mode, valueText }, () =>\n            this.emitChange(newDate, commit)\n        );\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n\n    private onMenuRef(el: HTMLDivElement | null) {\n        if (el) {\n            this.setState({ menuHeight: el.getBoundingClientRect().height });\n        } else {\n            this.setState({ menuHeight: 0 });\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled,\n    selectElement,\n    fillZero,\n    clearSelection,\n    formatSplitExpr,\n    formatIsActualNumber,\n    replaceSpaceWithNbsp\n} from '../utils';\nimport { ReactTimebombProps, ReactTimebombState, IconProps } from '../typings';\nimport { ArrowButton, SmallButton } from '../components/button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    clearComponent: ReactTimebombProps['clearComponent'];\n    arrowButtonId: ReactTimebombProps['arrowButtonId'];\n    iconComponent: ReactTimebombProps['iconComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    timeStep: ReactTimebombProps['timeStep'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = () => <ClearButtonX>×</ClearButtonX>;\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        setTimeout(() => {\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n                        const input = this.inputs[0];\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (input && allowTextSelection) {\n                            input.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            const [input] = this.inputs;\n\n                            if (input) {\n                                selectElement(input);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            <ClearComponent />\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n","import * as React from 'react';\nimport {\n    Container,\n    Flex,\n    Icon,\n    ValueProps,\n    Placeholder,\n    ClearButton,\n    DefaultClearComponent\n} from './value';\nimport { dateFormat, keys } from '../utils';\nimport { ArrowButton } from '../components/button';\n\ninterface MultiValueProps {\n    value: undefined | Date[];\n    placeholder: ValueProps['placeholder'];\n    open: ValueProps['open'];\n    arrowButtonComponent: ValueProps['arrowButtonComponent'];\n    arrowButtonId: ValueProps['arrowButtonId'];\n    clearComponent: ValueProps['clearComponent'];\n    iconComponent: ValueProps['iconComponent'];\n    disabled: ValueProps['disabled'];\n    onToggle(): void;\n    onClear(): void;\n}\n\nconst DefaultIcon = () => <Icon className=\"react-timebomb-icon\" icon=\"📅\" />;\n\nfunction Value(props: MultiValueProps) {\n    const { value } = props;\n\n    if (!value) {\n        return null;\n    }\n\n    return <>{value.map(d => dateFormat(d, 'DD.MM.YYYY')).join(' – ')}</>;\n}\n\nexport function ValueMulti(props: MultiValueProps) {\n    const {\n        placeholder,\n        value,\n        open,\n        disabled,\n        arrowButtonId,\n        iconComponent,\n        onToggle\n    } = props;\n    const ArrowButtonComp = props.arrowButtonComponent || ArrowButton;\n    const ClearComponent = props.clearComponent || DefaultClearComponent;\n    const showPlaceholder = placeholder && !open;\n    const IconComponent =\n        iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n    React.useEffect(() => {\n        document.body.addEventListener('keyup', onKeyUp);\n\n        return () => {\n            document.body.removeEventListener('keyup', onKeyUp);\n        };\n    }, []);\n\n    function onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        props.onClear();\n    }\n\n    function onKeyUp(e: KeyboardEvent) {\n        switch (e.keyCode) {\n            case keys.ESC:\n                if (open) {\n                    onToggle();\n                }\n                break;\n        }\n    }\n\n    return (\n        <Container\n            data-role=\"value\"\n            className=\"react-slct-value react-timebomb-value\"\n            disabled={disabled}\n            onClick={disabled ? undefined : onToggle}\n        >\n            <Flex>\n                {IconComponent && <IconComponent />}\n                <Flex>\n                    <Value {...props} />\n                    {showPlaceholder && (\n                        <Placeholder className=\"react-timebomb-placeholder\">\n                            {placeholder}\n                        </Placeholder>\n                    )}\n                </Flex>\n            </Flex>\n            <Flex>\n                {value && (\n                    <ClearButton\n                        className=\"react-timebomb-clearer\"\n                        disabled={disabled}\n                        tabIndex={-1}\n                        onClick={onClear}\n                    >\n                        <ClearComponent />\n                    </ClearButton>\n                )}\n                <ArrowButtonComp\n                    id={arrowButtonId}\n                    disabled={disabled}\n                    open={open}\n                />\n            </Flex>\n        </Container>\n    );\n}\n"]}