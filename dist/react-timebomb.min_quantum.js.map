{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/utils.ts","src/button.tsx","src/menu-title.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","onChangeFormatGroup","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","selectWeek","onOpen","menuWidth","Math","max","MENU_WIDTH","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","onClick","MenuTitle","onMonth","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","getFormatType","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","e","target","HTMLDivElement","classList","contains","defaultProps","button_1","menu_day_1","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","PureComponent","yearContainer","monthMatrixCache","Map","scrollToYear","delay","selected","querySelector","scrollIntoView","scrollBy","top","onYearContainer","onDayMouseEnter","onDayMouseLeave","weekdayNames","getWeekdayNames","monthNames","getMonthNames","now","monthMatrix","getDate","dateMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","weekStart","addDays","set","fullYears","year","getDateConfig","newYear","setFullYear","enabled","setSeconds","getSeconds","setMinutes","setHours","currentYear","Array","fill","_","i","filter","obj","reverse","minYear","array","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","month","str","hoverDay","sun","mon","tue","wed","thu","fri","sat","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","WeekNum","Day","onMouseEnter","onMouseLeave","isValid","getAttribute","currentTarget","el","moment_1","momentImport","moment","test","formatSplitExpr","instance","toDate","formatIsActualNumber","validateFormatGroup","isFinite","int","char","String","strLen","startsWith","ALLOWED_CHARS","num","add","val","stringFromCharCode","keyCode","charCode","floor","fromCharCode","includes","formatNumber","number","splitDate","group","joinDates","parts","strParts","part","HTMLElement","innerText","splittedFormat","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","sel","getSelection","empty","removeAllRanges","selectElement","caret","range","document","createRange","selectNodeContents","start","end","setStart","setEnd","addRange","isoWeek","startOf","endOf","subtractDays","manipulateDate","subtract","isSame","inp","dateA","isSameOrAfter","context","attr","a","b","getTime","formatType","replaceSpaceWithNbsp","replace","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","DOT","COMMA","StyledButton","button","Object","assign","data-react-timebomb-selectable","data-role","SmallButton","util_1","show","prevDisabled","nextDisabled","lastDate","endOfMonth","arrow_button_1","Flex","Input","span","ClearButton","Placeholder","Icon","icon","META_KEYS","FORBIDDEN_KEYS","inputs","allSelected","formatGroup","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","formatGroups","reduce","memo","prevChar","substr","focused","iconClass","some","forEach","focus","find","forceUpdate","ArrowButtonComp","ArrowButton","showPlaceholder","showClearer","timeOnly","contentEditable","g","separator","data-placeholder","data-separator","data-group","onDoubleClick","nextSibling","previousSibling","numericFormat","hasSelection","focusOffset","baseOffset","numericValue","preventDefault","HTMLSpanElement","isArrowUp","isNaN","direction","shiftKey","dateParts","nextValue","valid","groupValue","metaKey","ctrlKey","firstInput","validatedChar","blur","parentNode","dataGroup","filledValue","fillZero","stopPropagation"],"mappings":"mFAAA,MAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBACAE,EAAAH,EAAAC,EAAA,cACAG,EAAAJ,EAAAC,EAAA,GACAI,EAAAL,EAAAC,EAAA,GACAK,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GAoBAO,EAAAR,EAAAC,EAAA,GAWIQ,EAAAC,mBAVAF,EAAAE,mBAWAD,EAAAE,mBAVAH,EAAAG,mBAWAF,EAAAG,mBAVAJ,EAAAI,mBAWAH,EAAAI,kBAVAL,EAAAK,kBAWAJ,EAAAK,8BAVAN,EAAAM,8BAEJ,MAAAC,EAAAf,EAAAC,EAAA,GAgBMe,EAAYd,EAAAe,QAAOC;;;;EAMnBC,EAAcjB,EAAAe,QAAOC;;;;;;;;;;kBAUTE,GAA6BA,EAAMC;;;;;;;;MAQ/CD,GACEA,EAAME,OACApB,EAAAqB;;;;;;;;;;;;;;;;;;;gBAoBA;EAGRC,EAAatB,EAAAe,QAAOQ;;;;;;EAQ1B,MAAaC,UAAsB3B,EAAM4B,UAkGrCC,YAAYR,GACRS,MAAMT,GA6RFU,KAAAC,WAAa,MACjB,IAAIC,EAEJ,MAAO,CAACC,EAAyBC,KAC7BC,aAAaH,GAEbA,EAAUI,WAAW,KACjB,MAAMC,MAAEA,EAAAC,YAAOA,EAAAC,SAAaA,GAAaT,KAAKV,MAEzCkB,IACDJ,GAAS,GAGT3B,EAAAiC,UAAUH,EAAOJ,KAIjBC,IACI3B,EAAAkC,QAAQR,GACRM,KAAYN,GAEZM,EAASN,IAIjBH,KAAKY,SAAS,CAAEC,gBAAiBC,QAAQX,OAC1C,KA1BU,GA3RjB,MAAMY,QAAEA,EAAAC,QAASA,EAAAC,YAASA,EAAAT,YAAaA,GAAgBlB,EAEvD,GAAIyB,GAAWC,GAAWvC,EAAAyC,SAASF,EAASD,GACxC,MAAM,IAAII,MAAM,sCAGpB,GAAIF,IAAgBT,EAChB,MAAM,IAAIW,MACN,0DAIRnB,KAAKoB,MAAQpB,KAAKqB,aAElBrB,KAAKsB,kBAAoBtB,KAAKsB,kBAAkBC,KAAKvB,MACrDA,KAAKwB,cAAgBxB,KAAKwB,cAAcD,KAAKvB,MAC7CA,KAAKyB,YAAczB,KAAKyB,YAAYF,KAAKvB,MACzCA,KAAK0B,UAAY1B,KAAK0B,UAAUH,KAAKvB,MACrCA,KAAK2B,WAAa3B,KAAK2B,WAAWJ,KAAKvB,MACvCA,KAAK4B,YAAc5B,KAAK4B,YAAYL,KAAKvB,MACzCA,KAAK6B,cAAgB7B,KAAK6B,cAAcN,KAAKvB,MAC7CA,KAAK8B,aAAe9B,KAAK8B,aAAaP,KAAKvB,MAC3CA,KAAK+B,QAAU/B,KAAK+B,QAAQR,KAAKvB,MACjCA,KAAKgC,YAAchC,KAAKgC,YAAYT,KAAKvB,MACzCA,KAAKiC,YAAcjC,KAAKiC,YAAYV,KAAKvB,MACzCA,KAAKkC,aAAelC,KAAKkC,aAAaX,KAAKvB,MAC3CA,KAAKmC,QAAUnC,KAAKmC,QAAQZ,KAAKvB,MACjCA,KAAKoC,QAAUpC,KAAKoC,QAAQb,KAAKvB,MACjCA,KAAKqC,oBAAsBrC,KAAKqC,oBAAoBd,KAAKvB,MACzDA,KAAKsC,2BAA6BtC,KAAKsC,2BAA2Bf,KAC9DvB,MAxHDF,gCACHR,GAEA,MAAMiD,EAASjD,EAAMiD,QACfxB,QAAEA,EAAAC,QAASA,GAAY1B,EAE7B,MAAO,CACHyB,QAASA,EAAUtC,EAAA+D,WAAWzB,QAAW0B,EACzCzB,QAASA,EAAUvC,EAAAiE,SAAS1B,QAAWyB,EACvCE,SAAUlE,EAAAmE,aAAaL,GACvBM,SAAUpE,EAAAqE,aAAaP,IASvBzC,uBACJiD,GAgBA,OAdK/C,KAAKgD,sBACNhD,KAAKgD,oBAAsB5E,EAAAe,QAAO4D;;;;;;;;;;eAa/B/C,KAAKgD,oBAGhBC,gBACI,MAAMC,EAAa,CAAC,kBAcpB,OAZIlD,KAAKV,MAAM2D,WACXC,EAAWC,KAAKnD,KAAKV,MAAM2D,WAG3BjD,KAAKV,MAAM8D,OACXF,EAAWC,KAAK,SAGhBnD,KAAKV,MAAM+D,UACXH,EAAWC,KAAK,YAGbD,EAAWI,KAAK,KAG3BC,uBACI,MAAMhD,MAAEA,EAAAQ,QAAOA,EAAAC,QAASA,GAAYhB,KAAKV,MAEzC,GAAIiB,EACA,OAAOA,EAGX,IAAIJ,EAAO,IAAIqD,KAQf,OANIxC,GAAWvC,EAAAyC,SAASF,EAASb,GAC7BA,EAAOa,EACAD,GAAWtC,EAAAgF,QAAQ1C,EAASZ,KACnCA,EAAOY,GAGJtC,EAAA+D,WAAWrC,GAGtBkB,mBACI,MAAO,CACHR,iBAAiB,EACjB6C,UAAMjB,EACNkB,UAAW3D,KAAKV,MAAMiB,MAChB9B,EAAAmF,WAAW5D,KAAKV,MAAMiB,MAAOP,KAAKV,MAAMiD,aACxCE,EACNtC,KAAMH,KAAKuD,iBACXM,cAAe,GAyChB/D,mBACHgE,EACAC,GAEA,MAAMJ,UAAEA,GAAc3D,KAAKoB,OACrBb,MAAEA,EAAAgC,OAAOA,GAAWvC,KAAKV,MAE3BwE,EAAUvB,SAAWA,GAAUuB,EAAUvD,QAAUA,GACnDP,KAAKY,SAAS,CACV+C,UAAWpD,EAAQ9B,EAAAmF,WAAWrD,EAAOgC,QAAWE,IAIpDsB,EAAUJ,YAAcA,GACxB3D,KAAKgE,oBAAmB,GAIxBlE,mBAAmBM,GACvB,MAAMuD,UAAEA,EAAA9C,gBAAWA,GAAoBb,KAAKoB,OACtCmB,OAAEA,GAAWvC,KAAKV,MAClB2E,EAAYxF,EAAAyF,aAAaP,EAAWpB,GAEtC0B,EACAjE,KAAKY,SAAS,CAAEC,iBAAiB,GAAQ,MACrBpC,EAAAkC,QAAQsD,GAClBA,EAAUE,MAAMC,GAAK3F,EAAA4F,UAAU,MAAOD,EAAGpE,KAAKV,QAC9Cb,EAAA4F,UAAU,MAAOJ,EAAWjE,KAAKV,QAGnCU,KAAKY,SAAS,CAAET,KAAM8D,GAAa,IAC/BjE,KAAKC,WAAWgE,EAAW7D,IAG/BJ,KAAKsE,UAAU,aAAcX,KAG9BA,EACP3D,KAAKsE,UAAU,cAAeX,IACtBlF,EAAA8F,YAAYZ,IAAc9C,GAClCb,KAAKC,gBAAWwC,EAAWrC,GAI5BN,SACH,MAAM0E,YACFA,EAAAhE,YACAA,EAAAiE,iBACAA,EAAAC,WACAA,EAAAzD,YACAA,EAAAsB,OACAA,EAAAa,MACAA,EAAAC,SACAA,EAAA7D,OACAA,EAAAmF,OACAA,GACA3E,KAAKV,OACHuD,SACFA,EAAAF,SACAA,EAAAgB,UACAA,EAAAD,KACAA,EAAAG,cACAA,EAAA9C,QACAA,EAAAC,QACAA,GACAhB,KAAKoB,MACHb,EAAQoD,EACRlF,EAAAyF,aAAaP,EAAWpB,GACxBvC,KAAKV,MAAMiB,MACXqE,EAAYC,KAAKC,IACnBlF,EAAcmF,WACd/E,KAAKV,MAAMsF,WAAa,GAEtBrF,EAAaK,EAAcoF,YAEjC,OACI/G,EAAAgH,cAAC5G,EAAA6G,OAAM,CACH3E,MAAOA,EACPiE,YAAaA,EACbpB,MAAOA,EACPuB,OAAQA,EACRxC,QAASnC,KAAKmC,SAEb,EAAGqC,YAAAA,EAAaW,KAAAA,EAAMC,SAAAA,EAAUC,MAAAA,EAAOtC,cAAAA,MACpC,MAAMuC,EAAWH,GAAQtC,IAAaQ,EAUtC,OARArD,KAAKoF,SAAWA,EAEZ5F,IACAuD,EAAgB/C,KAAKuF,uBACjBxC,IAKJ9E,EAAAgH,cAAC/F,EAAS,CAACsG,IAAKH,EAAOpC,UAAWjD,KAAKiD,WAClCjD,KAAKyF,YAAYlF,EAAOiE,EAAaW,GACrCG,EACGrH,EAAAgH,cAAClC,EAAa,CACV6B,UAAWA,EACXrF,WAAYA,EACZmG,QACIlG,EACMQ,KAAKsC,gCACLG,GAGVxE,EAAAgH,cAAC5F,EAAW,CACR4D,UAAU,sBACV1D,WAAYA,EACZC,OAAQA,GAERvB,EAAAgH,cAAC1G,EAAAoH,UAAS,CACNjC,KAAMA,EACNlE,OAAQA,EACRW,KAAMH,KAAKoB,MAAMjB,KACjBY,QAASA,EACTC,QAASA,EACT6C,cAAeA,EACf+B,QAAS5F,KAAK4B,YACdiE,OAAQ7F,KAAK2B,WACbK,YAAahC,KAAKgC,YAClBC,YAAajC,KAAKiC,YAClBF,QAAS/B,KAAK+B,UAElB9D,EAAAgH,cAAC3G,EAAAwH,KAAI,CACDnD,SAAUA,EACVE,SAAUA,EACVrC,YAAaA,EACbiE,iBAAkBA,EAClBC,WAAYA,EACZzD,YAAaA,EACbd,KAAMH,KAAKoB,MAAMjB,KACjBI,MAAOA,EACPoD,UAAWA,EACXpB,OAAQA,EACRmB,KAAMA,EACNlE,OAAQA,EACRuB,QAASA,EACTC,QAASA,EACT6C,cAAeA,EACfpC,YAAazB,KAAKyB,YAClBI,cAAe7B,KAAK6B,cACpBC,aAAc9B,KAAK8B,aACnBI,aAAclC,KAAKkC,aACnB6D,SAAU/F,KAAKwB,kBAK3BvD,EAAAgH,cAACvF,EAAU,CAACsG,KAAK,OAAOC,QAASb,OASrDtF,YACJS,EACAiE,EACAW,GAEAX,EAAcW,OAAO1C,EAAY+B,EAEjC,MAAMzD,QACFA,EAAAC,QACAA,EAAAqC,SACAA,EAAAd,OACAA,EAAAtB,YACAA,EAAAzB,OACAA,EAAA0G,qBACAA,GACAlG,KAAKV,OACHuD,SAAEA,EAAAF,SAAUA,EAAA9B,gBAAUA,EAAA6C,KAAiBA,GAAS1D,KAAKoB,MAE3D,GAAIH,GAAexC,EAAAkC,QAAQJ,GAAQ,CAC/B,MAAM4F,EAAa5F,EACb9B,EAAAkC,QAAQJ,GACJA,EACA,CAACA,QACLkC,EAEN,OACIxE,EAAAgH,cAAChG,EAAAmH,WAAU,CACPjB,KAAMA,EACN9B,SAAUA,EACVmB,YAAaA,EACbjE,MAAO4F,EACPD,qBAAsBA,EACtB9D,QAASpC,KAAKoC,QACdgD,SAAUpF,KAAKoF,WAK3B,OACInH,EAAAgH,cAACzG,EAAA6H,MAAK,CACF3C,KAAMA,EACNL,SAAUA,EACV7D,OAAQA,EACRgF,YAAaA,EACbjC,OAAQA,EACRhC,MAAOA,EACPQ,QAASA,EACTC,QAASA,EACTH,gBAAiBA,EACjBsE,KAAMA,EACNtC,SAAUA,EACVF,SAAUA,EACVuD,qBAAsBA,EACtB9D,QAASpC,KAAKoC,QACdd,kBAAmBtB,KAAKsB,kBACxBe,oBAAqBrC,KAAKqC,oBAC1B+C,SAAUpF,KAAKoF,SACfW,SAAU/F,KAAKwB,cACf8E,YAAatG,KAAK0B,YAKtB5B,UACJrB,EAAA8H,iBAEAjG,WAAW,KACP7B,EAAA8H,iBAEAvG,KAAKY,SAASZ,KAAKqB,aAAc,KACzBrB,KAAKV,MAAM6C,SACXnC,KAAKV,MAAM6C,aAGpB,IAGCrC,UACJsD,EACA7C,GAEIP,KAAKoB,MAAMP,iBACXb,KAAKY,SAAS,CAAEC,iBAAiB,GAAS,KAClCb,KAAKV,MAAMkH,SACXxG,KAAKV,MAAMkH,QAAQpD,EAAO7C,KAoClCT,iBAAiBK,GACrB,OAAI1B,EAAAkC,QAAQR,GACY,IAAhBA,EAAKsG,OACDtG,EAAK,GAAKA,EAAK,GACR,EAEA,EAEY,IAAhBA,EAAKsG,OACL,EAMRzG,KAAKoB,MAAMyC,cAHP,EAMP/D,UACJE,KAAKY,SAAS,CAAE+C,eAAWlB,GAAa,KACpCzC,KAAKC,gBAAWwC,GAAW,KAI3B3C,kBAAkB6D,GACtB3D,KAAKY,SAAS,CAAE+C,UAAAA,IAGZ7D,oBAAoByC,GACxBvC,KAAKY,SAAS,CAAE8C,KAAMnB,EAAS9D,EAAAiI,cAAcnE,QAAUE,IAGnD3C,gBACAE,KAAKoF,UACLpF,KAAKoF,WAET3G,EAAA8H,iBAEAvG,KAAKgE,oBAAmB,GAGpBlE,YAAY6G,GAChB,MAAMpG,MAAEA,EAAAgC,OAAOA,EAAAmC,WAAQA,EAAAzD,YAAYA,GAAgBjB,KAAKV,MAElDsH,EACFrG,aAAiBiD,KACXjD,EACA9B,EAAAkC,QAAQJ,GACRA,EAAM,QACNkC,EAEV,GAAIiC,EAAY,CACZ,MAAMvE,EAAO,CAAC1B,EAAAoI,YAAYF,GAAMlI,EAAAqI,UAAUH,IACpChD,EAAYlF,EAAAmF,WAAWzD,EAAMoC,GAEnCvC,KAAKY,SAAS,CAAET,KAAAA,EAAMwD,UAAAA,QACnB,CACH,MAAMxD,EAAO1B,EAAAsI,QACTJ,EACAC,EAAYA,EAAUI,WAAa,EACnCJ,EAAYA,EAAUK,aAAe,GAGzC,GAAIhG,EAAa,CACb,MAAMiG,EACFzI,EAAAkC,QAAQX,KAAKoB,MAAMuC,YACa,IAAhC3D,KAAKoB,MAAMuC,UAAU8C,OACf,CACIhI,EAAAyF,aACIlE,KAAKoB,MAAMuC,UAAU,GACrBpB,GAEJpC,GAEJ,CAACA,GAEL0D,EAAgB7D,KAAKmH,iBAAiBD,GACtCvD,EAAYlF,EAAAmF,WAAWsD,EAAQE,KAAK3I,EAAA4I,WAAY9E,GAEtDvC,KAAKY,SAAS,CAAET,KAAM+G,EAASvD,UAAAA,EAAWE,cAAAA,QACvC,CACH,MAAMF,EAAYlF,EAAAmF,WAAWzD,EAAMoC,GAEnCvC,KAAKY,SAAS,CAAET,KAAAA,EAAMwD,UAAAA,MAK1B7D,YACJE,KAAKY,SAAS,CAAE8C,KAAM,QAGlB5D,aACJE,KAAKY,SAAS,CAAE8C,KAAM,SAGlB5D,cACJE,KAAKY,SAAS,CAAE8C,KAAM,UAGlB5D,cAAcK,GAClBH,KAAKyB,YAAYtB,GACjBH,KAAKY,SAAS,CAAE8C,KAAM,QAGlB5D,aAAaK,GACjBH,KAAKyB,YAAYtB,GACjBH,KAAKY,SAAS,CAAE8C,KAAM,QAGlB5D,UACJE,KAAKY,SAAS,CAAET,KAAMH,KAAKuD,mBAGvBzD,cACJ,MAAMwH,EAAc7I,EAAAkC,QAAQX,KAAKoB,MAAMjB,MACjCH,KAAKoB,MAAMjB,KAAKH,KAAKoB,MAAMyC,eAC3B7D,KAAKoB,MAAMjB,KAEjB,GAAImH,EAAa,CACb,MAAMnH,EAAO,IAAIqD,KAAK8D,GAEtBnH,EAAKoH,SAASpH,EAAKqH,WAAa,GAEhCxH,KAAKY,SAAS,CAAET,KAAAA,KAIhBL,cACJ,MAAMwH,EAAc7I,EAAAkC,QAAQX,KAAKoB,MAAMjB,MACjCH,KAAKoB,MAAMjB,KAAKH,KAAKoB,MAAMyC,eAC3B7D,KAAKoB,MAAMjB,KAEjB,GAAImH,EAAa,CACb,MAAMnH,EAAO,IAAIqD,KAAK8D,GAEtBnH,EAAKoH,SAASpH,EAAKqH,WAAa,GAEhCxH,KAAKY,SAAS,CAAET,KAAAA,KAIhBL,aAAa2H,GACjB,MAAMlF,OAAEA,GAAWvC,KAAKV,MACxB,IAAIiB,EAAQP,KAAKV,MAAMiB,OAAS,IAAIiD,KAAK,cAEzC,GAAKiE,EAME,CACH,MAAMC,EAAWD,EAAKE,MAAM,KACtBC,EAAUnJ,EAAAkC,QAAQJ,GAClBA,EAAMsH,IAAIzD,GACN3F,EAAAsI,QACI3C,EACA0D,SAASJ,EAAS,GAAI,IACtBI,SAASJ,EAAS,GAAI,MAG9BjJ,EAAAsI,QACIxG,EACAuH,SAASJ,EAAS,GAAI,IACtBI,SAASJ,EAAS,GAAI,KAG1B/D,EAAYlF,EAAAmF,WAAWgE,EAASrF,GAEtCvC,KAAKY,SAAS,CAAE+C,UAAAA,GAAa,IAAM3D,KAAKC,WAAW2H,GAAS,SAvBxDnJ,EAAAkC,QAAQJ,KACRA,EAAQA,EAAMsH,IAAIE,GAAKtJ,EAAA+D,WAAWuF,KAGtC/H,KAAKC,WAAWM,GAAO,GAuBvBT,2BAA2BkI,GAE3BA,EAAEC,kBAAkBC,gBACpBF,EAAEC,OAAOE,UAAUC,SAAS,oBAExBpI,KAAKoF,UACLpF,KAAKoF,YA9kBHxF,EAAAmF,WAAa,IACbnF,EAAAoF,YAAc,IAqBdpF,EAAAyI,aAA4C,CACtD9F,OAAQ,cA3BhB5D,EAAAiB,cAAAA,yEC1GA,MAAA3B,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBAEAM,EAAAP,EAAAC,EAAA,GAcAmK,EAAApK,EAAAC,EAAA,GACAoK,EAAArK,EAAAC,EAAA,GAmCMqK,EAAwBpK,EAAAe,QAAOC;;cAEvBE,GACNA,EAAME,OAAS,OAAS;EAG1BiJ,EAAkBrK,EAAAe,QAAOC;;;;;;;;;;;;iBAYdE,GACLA,EAAME,OAAS,kBAAoB;;;;;;;;;EAWzCkJ,EAAiBtK,EAAAe,QAAOC;;;cAGhBE,GAAkCA,EAAME,OAAS,MAAQ;EAGjEmJ,EAAgBvK,EAAAe,QAAOC;;;;;;;;;;;;;;;;;;;EAqBvBwJ,EAAUxK,EAAAe,QAAOC;;;;;;;;EAUjByJ,EAAQzK,EAAAe,QAAO2J;;;;;;;;;;;;;;;;;;UAkBXxJ,GACEA,EAAMoF,WACAtG,EAAAqB;;;;;;;;oBASA;;;;;;;;;;;EAalBd,EAAAmH,KAAA,cAA0B7H,EAAM8K,cAsI5BjJ,YAAYR,GACRS,MAAMT,GA3HFU,KAAAgJ,cAAuC,KACvChJ,KAAAiJ,iBAAmB,IAAIC,IAuUvBlJ,KAAAmJ,aAAe,MACnB,IAAIjJ,EAEJ,OAAOkJ,IACH/I,aAAaH,GAEbA,EAAUI,WAAW,KACjB,GAAIN,KAAKgJ,cAAe,CACpB,MAAMK,EAAWrJ,KAAKgJ,cAAcM,cAChC,aAGAD,IACAA,EAASE,iBACTvJ,KAAKgJ,cAAcQ,SAAS,CAAEC,KAAM,QAG7CL,KAjBY,GA3MnBpJ,KAAKoB,MAAQ,GAEbpB,KAAKyB,YAAczB,KAAKyB,YAAYF,KAAKvB,MACzCA,KAAK6B,cAAgB7B,KAAK6B,cAAcN,KAAKvB,MAC7CA,KAAK8B,aAAe9B,KAAK8B,aAAaP,KAAKvB,MAC3CA,KAAK0J,gBAAkB1J,KAAK0J,gBAAgBnI,KAAKvB,MACjDA,KAAK2J,gBAAkB3J,KAAK2J,gBAAgBpI,KAAKvB,MACjDA,KAAK4J,gBAAkB5J,KAAK4J,gBAAgBrI,KAAKvB,MAEjDA,KAAK6J,aAAepL,EAAAqL,kBACpB9J,KAAK+J,WAAatL,EAAAuL,eAAc,GA/IpCC,UACI,OAAO,IAAIzG,KAGP1D,QAAQK,GACZ,OAAQ1B,EAAAkC,QAAQR,GAAQA,EAAKH,KAAKV,MAAMuE,eAAiB1D,EAM7D+J,kBACI,MAAM/J,EAAOH,KAAKmK,QAAQnK,KAAKV,MAAMa,MAC/BiK,EAAYjK,EAAKqH,WACjB6C,EAAWlK,EAAKmK,cAGhBC,KAAcH,KAAaC,IAC3BG,EAASxK,KAAKiJ,iBAAiBwB,IAAIF,GAEzC,GAAIC,EACA,OAAOA,EAIX,MAAME,EAAoB,GAE1B,IAAIC,EAAOlM,EAAAmM,aAAazK,GACpB0K,EAAO,EAEX,KACIpM,EAAAoI,YAAY8D,GAAMnD,aAAe4C,GACjC3L,EAAAqI,UAAU6D,GAAMnD,aAAe4C,GACjC,CACE,MAAMU,EAAYrM,EAAAoI,YACd,IAAIrD,KAAK6G,EAAUD,EAAoB,EAATS,IAAS,IAG3CH,EAAMvH,KAAK,CACP2H,EACArM,EAAAsM,QAAQD,EAAW,GACnBrM,EAAAsM,QAAQD,EAAW,GACnBrM,EAAAsM,QAAQD,EAAW,GACnBrM,EAAAsM,QAAQD,EAAW,GACnBrM,EAAAsM,QAAQD,EAAW,GACnBrM,EAAAsM,QAAQD,EAAW,KAGvBH,EAAOlM,EAAAsM,QAAQJ,EAAM,GAKzB,OAFA3K,KAAKiJ,iBAAiB+B,IAAIT,EAAUG,GAE7BA,EAGXO,gBACI,MAAM1K,MAAEA,EAAAQ,QAAOA,EAAAC,QAASA,GAAYhB,KAAKV,MACnCsH,EAAY5G,KAAKmK,QAAQ5J,GACzB2K,EAAOlL,KAAKmK,QAAQnK,KAAKV,MAAMa,MAAMmK,cAErCa,EAAgB,CAAChL,EAAYiL,MAC/BjL,EAAO,IAAIqD,KAAKrD,IACXkL,YAAYD,GAEjB,MAAME,EAAU7M,EAAA4F,UAAU,OAAQlE,EAAMH,KAAKV,OACvC+J,EAAW6B,IAASE,EAU1B,OARI7K,IACAJ,EAAKoL,WAAW3E,EAAU4E,cAC1BrL,EAAKsL,WAAW7E,EAAUK,cAC1B9G,EAAKuL,SAAS9E,EAAUI,YACxB7G,EAAK4G,QAAQH,EAAUuD,WACvBhK,EAAKoH,SAASX,EAAUY,aAGrB,CAAErH,KAAAA,EAAMmL,QAAAA,EAASjC,SAAAA,IAG5B,GAAItI,IAAYC,EAAS,CACrB,MAAM2K,EAAc5K,EAAQuJ,cAE5B,OAAOsB,MAAM,KACRC,UAAKpJ,GACLoF,IAAI,CAACiE,EAAGC,IAAMZ,EAAcpK,EAAS4K,EAAcI,IACnDC,OAAOC,GAAOA,EAAIX,SACpB,IAAKvK,GAAWC,EAAS,CAC5B,MAAM2K,EAAc3K,EAAQsJ,cAE5B,OAAOsB,MAAM,KACRC,UAAKpJ,GACLoF,IAAI,CAACiE,EAAGC,IAAMZ,EAAcnK,EAAS2K,EAAcI,IACnDC,OAAOC,GAAOA,EAAIX,SAClBY,UACF,GAAInL,GAAWC,EAAS,CAC3B,MAAMmL,EAAUpL,EAAQuJ,cAElB8B,EAIA,GAEN,IAAK,IAAIL,EAPO/K,EAAQsJ,cAOFyB,GAAKI,EAASJ,IAChCK,EAAMjJ,KAAKgI,EAAcnK,EAAS+K,IAGtC,OAAOK,EAAMF,UACV,CACH,MAAMjC,EAAMjK,KAAKiK,IACX3C,EAAcV,EAAYqD,EAAMrD,EAAYqD,EAC5C0B,EAAcrE,EAAYgD,cAEhC,OAAOsB,MAAM,KACRC,UAAKpJ,GACLoF,IAAI,CAACiE,EAAGC,KACL,MAAM5L,EAAO,IAAIqD,KAAK8D,GAEtBnH,EAAKkL,YAAYM,EAAcI,GAE/B,MAAMT,EAAU7M,EAAA4F,UAAU,OAAQlE,EAAMH,KAAKV,OACvC+J,EAAW6B,IAAS/K,EAAKmK,cAE/B,MAAO,CAAEnK,KAAAA,EAAMmL,QAAAA,EAASjC,SAAAA,KAE3B2C,OAAOC,GAAOA,EAAIX,SAClBY,WAoBNpM,mBAAmBgE,GACjBrF,EAAAiC,UAAUoD,EAAU3D,KAAMH,KAAKV,MAAMa,OACtCH,KAAKmJ,aAAa,IAInBrJ,SACH,MAAM4D,KAAEA,EAAAlE,OAAMA,EAAAqD,SAAQA,EAAArC,YAAUA,GAAgBR,KAAKV,MAErD,GAAIuD,EACA,OAAQa,GACJ,IAAK,OACL,IAAK,QACD,OACIzF,EAAAgH,cAACuD,EAAqB,CAAChJ,OAAQA,GAC1BQ,KAAKqM,mBACLrM,KAAKsM,kBAGlB,IAAK,MACD,OACIrO,EAAAgH,cAACyD,EAAc,CAAClJ,OAAQA,GACnBQ,KAAKuM,cACL/L,GAAeR,KAAKwM,iBAMzC,OAAO,KAGH1M,iBACJ,OACI7B,EAAAgH,cAAC0D,EAAa,CAACnD,IAAKxF,KAAK0J,gBAAiBzG,UAAU,SAC/CjD,KAAKiL,UACDpD,IAAI,EAAG1H,KAAAA,EAAMkJ,SAAAA,MACV,MAAMoD,EAAWtM,EAAKmK,cAChBoC,EAAUvM,EAAKwM,cAErB,OACI1O,EAAAgH,cAACqD,EAAAsE,OAAM,CACHC,IAAKH,EACLI,UAAW,EACX7J,UAAWoG,EAAW,gBAAa5G,EACnC4G,SAAUA,EACV7J,OAAQQ,KAAKV,MAAME,OAAMuN,YACdL,EACXhH,QAAS1F,KAAK8B,cAEb2K,KAIZP,WAKTpM,mBACJ,MAAMS,MAAEA,EAAAf,OAAOA,GAAWQ,KAAKV,MACzBsH,EAAY5G,KAAKmK,QAAQ5J,GACzBJ,EAAOH,KAAKmK,QAAQnK,KAAKV,MAAMa,MAC/B6M,EAAQzM,GAASqG,EAAUY,WAC3B0D,EAAO3K,GAASqG,EAAU0D,cAEhC,OACIrM,EAAAgH,cAACwD,EAAe,CAACjJ,OAAQA,EAAQyD,UAAU,UACtCjD,KAAK+J,WAAWlC,IAAI,CAACoF,EAAKlB,KACvB,MAAMnE,EAAU,IAAIpE,KAAKrD,GAEzByH,EAAQL,SAASwE,GAEjB,MAAMT,EAAU7M,EAAA4F,UAAU,QAASuD,EAAS5H,KAAKV,OAC3C+J,EACF2D,IAAUpF,EAAQJ,YAClB0D,IAAStD,EAAQ0C,cAErB,OACIrM,EAAAgH,cAACqD,EAAAsE,OAAM,CACHC,IAAKI,EACLH,UAAW,EACX7J,UAAWoG,EAAW,gBAAa5G,EACnC4G,SAAUA,EACVhG,UAAWiI,EACX9L,OAAQQ,KAAKV,MAAME,OAAMuN,YACdnF,EAAQ+E,cACnBjH,QAAS1F,KAAK6B,eAEboL,MAQjBnN,cACJ,MAAM2E,iBAAEA,EAAAC,WAAkBA,EAAAlF,OAAYA,GAAWQ,KAAKV,OAChD4N,SAAEA,GAAalN,KAAKoB,OACnB+L,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAAOzN,KAAK6J,aAEjD,OACI5L,EAAAgH,cAAC4D,EAAK,CACF5F,UAAU,QACVyB,WAAYA,EACZlF,OAAQA,EACRkO,YAAa,EACbC,YAAa,GAEb1P,EAAAgH,cAAA,QAAA,KACIhH,EAAAgH,cAAA,KAAA,KACKR,GAAoBxG,EAAAgH,cAAA,KAAA,CAAIhC,UAAU,kBACnChF,EAAAgH,cAAA,KAAA,KAAKmI,GACLnP,EAAAgH,cAAA,KAAA,KAAKoI,GACLpP,EAAAgH,cAAA,KAAA,KAAKqI,GACLrP,EAAAgH,cAAA,KAAA,KAAKsI,GACLtP,EAAAgH,cAAA,KAAA,KAAKuI,GACLvP,EAAAgH,cAAA,KAAA,KAAKwI,GACLxP,EAAAgH,cAAA,KAAA,KAAKkI,KAGblP,EAAAgH,cAAA,QAAA,KACKjF,KAAKkK,YAAYrC,IAAI+F,IAClB,MAAMC,EAAUpP,EAAAqP,cAAcF,EAAM,IAEpC,OACI3P,EAAAgH,cAAA,KAAA,CAAI4H,IAAKgB,GACJpJ,GACGxG,EAAAgH,cAAA,KAAA,CAAIhC,UAAU,iBACVhF,EAAAgH,cAACsD,EAAAwF,QAAO,CACJpH,IAAKiH,EAAM,GACXlI,QAAS1F,KAAKyB,aAEboM,IAIZD,EAAM/F,IAAI1H,GACPlC,EAAAgH,cAAA,KAAA,CACIhC,UAAU,MACV4J,IAAK1M,EAAKwM,eAEV1O,EAAAgH,cAACsD,EAAAyF,IAAG,CACArH,IAAKxG,EACL+M,SAAUA,EACV/M,KAAMH,KAAKV,MAAMa,KACjBI,MAAOP,KAAKV,MAAMiB,MAClBQ,QAASf,KAAKV,MAAMyB,QACpBC,QAAShB,KAAKV,MAAM0B,QACpB0D,WAAY1E,KAAKV,MAAMoF,WACvBzD,YAAajB,KAAKV,MAAM2B,YACxB0B,SAAU3C,KAAKV,MAAMqD,SACrBlB,YAAazB,KAAKyB,YAClBwM,aAAcjO,KAAK2J,gBACnBuE,aAAclO,KAAK4J,yBAYnD9J,gBACJ,MAAM6D,UAAEA,EAAApB,OAAWA,GAAWvC,KAAKV,MAC7B2E,EAAYxF,EAAAyF,aAAaP,EAAWpB,GACpC4L,IAAUlK,IACVxF,EAAAkC,QAAQsD,GACJA,EAAUE,MAAM4D,GAAKtJ,EAAA4F,UAAU,MAAO0D,EAAG/H,KAAKV,QAC9Cb,EAAA4F,UAAU,MAAOJ,EAAWjE,KAAKV,QAG3C,OACIrB,EAAAgH,cAAC2D,EAAO,KACJ3K,EAAAgH,cAACqD,EAAAsE,OAAM,CACHE,UAAW,EACXzJ,UAAW8K,EACX3O,OAAQQ,KAAKV,MAAME,OACnBkG,QAAS,IAAM1F,KAAKV,MAAMyG,YAAU,OA6B5CjG,YAAYK,GAChB,MAAMsB,YAAEA,EAAAjB,YAAaA,EAAAuF,SAAaA,GAAa/F,KAAKV,MAEpDmC,EAAYtB,GAEPK,GACDuF,IAIAjG,cAAckI,GAClB,MAAM7H,EAAO,IAAIqD,KAAK/E,EAAA2P,aAAapG,EAAEqG,cAAe,cAEpD/N,WAAW,IAAMN,KAAKV,MAAMuC,cAAc1B,GAAO,GAG7CL,aAAakI,GACjB,MAAM7H,EAAO,IAAIqD,KAAK/E,EAAA2P,aAAapG,EAAEqG,cAAe,cAEpD/N,WAAW,IAAMN,KAAKV,MAAMwC,aAAa3B,GAAO,GAG5CL,gBAAgBwO,GACpBtO,KAAKgJ,cAAgBsF,EAErBtO,KAAKmJ,aAAa,GAGdrJ,gBAAgB6G,GAChB3G,KAAKV,MAAM2B,aACXjB,KAAKY,SAAS,CAAEsM,SAAUvG,IAI1B7G,kBACAE,KAAKV,MAAM2B,aACXjB,KAAKY,SAAS,CAAEsM,cAAUzK,6EC9iBtC,MAAA8L,EAAArQ,EAAAC,EAAA,UACAqQ,EAAAtQ,EAAAC,EAAA,UAGMsQ,EAA8BF,EAAApP,SAAuBqP,EAU3D,SAAgB5K,EACZzD,EACAoC,GAEA,OAAI5B,EAAQR,GACDA,EAAK0H,IAAI1H,GAAQsO,EAAOtO,GAAMoC,OAAOA,IAErCkM,EAAOtO,GAAMoC,OAAOA,GAyBnC,SAAgBmE,EAAcnE,GAC1B,MAAI,IAAImM,KAAKnM,GACF,MAGP,IAAImM,KAAKnM,GACF,QAGP,IAAImM,KAAKnM,GACF,OAGP,IAAImM,KAAKnM,GACF,OAGP,IAAImM,KAAKnM,GACF,SAGP,IAAImM,KAAKnM,GACF,cADX,EA7DS5D,EAAAgQ,gBAAkB,mBAQ/BhQ,EAAAiF,WAAAA,EAWAjF,EAAAuF,aAAA,SACI/D,EACAoC,GAEA,GAAI5B,EAAQR,GAAO,CACf,MAAMyN,EAAQzN,EACT0H,IAAI1H,IACD,MAAMyO,EAAWH,EAAOtO,EAAMoC,GAAQ,GAEtC,OAAOqM,EAAST,UAAYS,EAASC,cAAWpM,IAEnDuJ,OAAO5H,GAAKtD,QAAQsD,IAEzB,OAAwB,IAAjBwJ,EAAMnH,YAAehE,EAAYmL,EACrC,CACH,MAAMgB,EAAWH,EAAOtO,EAAMoC,GAAQ,GAEtC,OAAOqM,EAAST,UAAYS,EAASC,cAAWpM,IAIxD9D,EAAA+H,cAAAA,EA4BA/H,EAAAmQ,qBAAA,SAAqCvM,GAEjC,QAAI,MAAMmM,KAAKnM,IAKA,MAAXA,GAA6B,OAAXA,GAQ1B5D,EAAAoQ,oBAAA,SACIpP,EACA4C,GAEA,GAAIyM,SAASrP,GAAe,CACxB,MAAMsP,EAAuB,iBAAVtP,EAAqBmI,SAASnI,EAAO,IAAMA,EACxDuP,EAAOC,OAAOxP,GACdyP,EAASF,EAAKzI,OAGpB,OAFaC,EAAcnE,IAGvB,IAAK,MACD,GAAe,IAAX6M,EACA,OAAIH,GAAO,GAAKA,GAAO,OAGRtP,IAInB,GAAe,IAAXyP,GAAgBH,GAAO,GAAKA,GAAO,GACnC,OAAO,EAEX,MACJ,IAAK,QACD,GAAe,IAAXG,EACA,OAAY,IAARH,GAAqB,IAARA,OAGFtP,IAInB,GAAe,IAAXyP,GAAgBH,GAAO,GAAKA,GAAO,GACnC,OAAO,EAEX,MACJ,IAAK,OACD,GAAe,IAAXG,IAAyB,IAARH,GAAqB,IAARA,GAC9B,OAAO,EAGX,GACIG,GAAU,IACTF,EAAKG,WAAW,OAASH,EAAKG,WAAW,OAE1C,OAAO,EAEX,MACJ,IAAK,OACD,GAAe,IAAXD,EACA,OAAIH,GAAO,GAAKA,GAAO,OAGRtP,IAInB,GAAIyP,GAAU,GAAKH,GAAO,GAAKA,GAAO,GAClC,OAAO,EAEX,MACJ,IAAK,SACL,IAAK,SACD,GAAe,IAAXG,EACA,OAAIH,GAAO,GAAKA,GAAO,OAGRtP,IAInB,GAAIyP,GAAU,GAAKH,GAAO,GAAKA,GAAO,GAClC,OAAO,GAMvB,OAAO,GAGX,MAAMK,EAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KA+GpE,SAAgB9M,EAAWrC,GACvB,MAAMyH,EAAU,IAAIpE,KAAKrD,GAIzB,OAFAyH,EAAQ8D,SAAS,EAAA,EAAA,EAAA,GAEV9D,EAWX,SAAgBmD,EAAQ5K,EAAYoP,GAChC,OAAOd,EAAOtO,GACTqP,IAAID,EAAK,QACTV,sFA8CEjD,MAAAjL,QAAA8O,GA9KX9Q,EAAA+Q,mBAAA,SAAmCC,GAC/B,MAAMC,EAAWD,EAAU,GAAK9K,KAAKgL,MAAMF,EAAU,IAC/CT,EAAOC,OAAOW,aAAa,IAAMH,EAAUC,EAAWD,GAE5D,OAAIL,EAAcS,SAASb,GAChBA,EAGJ,IAGXvQ,EAAAqR,aAAA,SAA6BC,GACzB,OAAIA,GAAU,EACH,KAGPA,GAAU,MACCA,IAGRd,OAAOc,IAGlBtR,EAAAuR,UAAA,SAA0B/P,EAAYoC,GAGlC,OAFsBqB,EAAWzD,EAAMoC,GAGlCoF,MAAMhJ,EAAAgQ,iBACN3C,OAAOmE,GAASA,IAAyC,IAAhCxR,EAAAgQ,gBAAgBD,KAAKyB,KAGvDxR,EAAAyR,UAAA,SACIC,EACA9N,GAEA,MAAM+N,EAAWD,EACZxI,IAAI0I,GAASA,aAAgBC,YAAcD,EAAKE,UAAYF,GAC5DvE,OAAOyD,GAAOA,GACbiB,EAAiBnO,EAAOoF,MAAMhJ,EAAAgQ,iBAEpC,GAAI2B,EAAS7J,SAAWiK,EAAejK,OACnC,MAAO,GAGX,MAAMtG,EAAOmQ,EAAShN,KAAK,KACrBqN,EAAcD,EAAepN,KAAK,KAClCsN,EAAanC,EAAOtO,EAAMwQ,GAC1BE,EAAeD,EAAWC,eAEhC,OAA8B,IAA1BA,EAAaC,SACNrC,EAEH,IAAIjL,QAAQqN,EAAaE,kBAC3BxO,OAAOA,GAGNqO,EAAWrO,OAAOA,IAG7B5D,EAAA4H,eAAA,WACI,MAAMyK,EAAMC,eAERD,EAAIE,MAEJF,EAAIE,QACGF,EAAIG,iBAEXH,EAAIG,mBAIZxS,EAAAyS,cAAA,SACI9C,EACA+C,GAEA,GAAI/C,EAAI,CACJ,MAAMgD,EAAQC,SAASC,cACjBR,EAAMC,eAEZ,QAAcxO,IAAV4O,EACAC,EAAMG,mBAAmBnD,OACtB,CACH,MAAOoD,EAAOC,GAAON,EAErBC,EAAMM,SAAStD,EAAIoD,GACnBJ,EAAMO,OAAOvD,EAAIqD,GAGrBX,EAAIG,kBACJH,EAAIc,SAASR,KAIrB3S,EAAAmP,cAAA,SAA8B3N,GAC1B,OAAOsO,EAAOtO,GAAM4R,WAGxBpT,EAAAkI,YAAA,SAA4B1G,GACxB,OAAOsO,EAAOtO,GACT6R,QAAQ,WACRnD,UAGTlQ,EAAAmI,UAAA,SAA0B3G,GACtB,OAAOsO,EAAOtO,GACT8R,MAAM,WACNpD,UAGTlQ,EAAA6D,WAAAA,EAQA7D,EAAA+D,SAAA,SAAyBvC,GACrB,MAAMyH,EAAU,IAAIpE,KAAKrD,GAIzB,OAFAyH,EAAQ8D,SAAS,GAAA,GAAA,GAAA,KAEV9D,GAGXjJ,EAAAoM,QAAAA,EAMApM,EAAAuT,aAAAA,EAMAvT,EAAAwT,yJANA,SAA0BhS,EAAYoP,GAClC,OAAOd,EAAOtO,GACTqP,IAAID,EAAK,UACTV,wCAGT,SAAyB1O,EAAYoP,GACjC,OAAOd,EAAOtO,GAAAiS,SACL7C,EAAA,UAAAV,0KAAK,SACTA,knBAGT,SAAyB1O,uBACrB,wCAAAyH,8NAAO6G,EAAAtO,GAAAkS,OAAA,IAAA7O,KAAA,QADX7E,EAAAuC,8BACWuN,EAAOtO,GAAAe,SAAAoR,EAAA,kBAKlB,SAA2BnS,EAAAmS,GACvB,OAAO7D,EAAAtO,GAAAsD,QAAA6O,EAAA,oEAAAC,EAAA1K,IAAArF,+YADX7D,EAAA0F,mEACWoK,EAAOtO,GAAAqS,cAAAzR,EAAA0R,+DAKlB9T,EAAAyP,aAAA,SAAAzO,EAAA+S,GACI,OAAO/S,EAAAyO,aAAAsE,IAKX/T,EAAAmE,aAAA,SAAAP,GACI,OAAOzB,QAAA,QAAA4N,KAAAnM,KAKX5D,EAAAiE,aAAA,SAAAL,GACI,OAAOzB,QAAA,gBAAA4N,KAAAnM,iBAKX,SAAAoQ,EAAAC,GACI,OAAAD,EAAAE,UAAAD,EAAAC,WADJlU,EAAAgC,QAAAA,aAMA,SAAAJ,EAAAuS,gEACI,UAAAvS,iDADJ5B,EAAAoU,0CACW9F,EAAA+F,QAAA,IAAA,QAKXrU,EAmNasU,KAAO,CAChBC,SAAU,GACVC,YAAa,GACbC,WAAY,GACZC,WAAY,GACZC,MAAO,GACPC,IAAK,EACLC,IAAK,GACLC,UAAW,EACXC,OAAQ,GACRC,MAAO,GACPC,MAAO,GACPC,IAAK,IACLC,MAAO,4ECtkBX,MAAA7V,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBAOM4V,EAAe3V,EAAAe,QAAO6U;;;;;;;kBAOV1U,GAAyBA,EAAM+J,SAAW,OAAS;;MAE/D/J,GACEA,EAAME,OACApB,EAAAqB;;;;gBAKA;;;;;;;;;;;;;;;4BAecH,GAChBA,EAAM+J,SAAW,OAAS;;;;;;EAQzB1K,EAAAiO,OAAStN,CAAAA,GAClBrB,EAAAgH,cAAC8O,EAAYE,OAAAC,OAAA,CAAAC,kCAAA,EAAAC,YAEC,SACVpO,KAAK,UACD1G,KAICX,EAAA0V,YAAcjW,EAAAe,QAAOR,EAAAiO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4/DC1DlC,MAAA3O,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBAEAmK,EAAApK,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GAOAmW,EAAApW,EAAAC,EAAA,QAgBMe,EAAYd,EAAAe,QAAOC;eACVE,GAA+BA,EAAMiV,KAAO,OAAS;;;;;;;EASpE5V,EAAAgH,UAAA,cAA+B1H,EAAM8K,cAGjCyL,mBACI,MAAMzT,QAAEA,EAAAZ,KAASA,GAASH,KAAKV,MAE/B,SAAIyB,IAAWZ,IACJ1B,EAAAyT,aAAazT,EAAAmM,aAAa5K,KAAKG,MAAO,GAAKY,EAM1D0T,mBACI,MAAMzT,QAAEA,EAAAb,KAASA,GAASH,KAAKV,MAE/B,GAAI0B,GAAWb,EAAM,CACjB,MAAMuU,EAAWJ,EAAA3T,QAAQR,GAAQA,EAAKA,EAAKsG,OAAS,GAAKtG,EAEzD,OAAO1B,EAAAsM,QAAQtM,EAAAkW,WAAWD,GAAW,GAAK1T,EAG9C,OAAO,EAGXb,WACI,MAAMA,KAAEA,EAAA0D,cAAMA,GAAkB7D,KAAKV,MAErC,OAAQgV,EAAA3T,QAAQR,GAAQA,EAAK0D,GAAiB1D,EAGlDL,YAAYR,GACRS,MAAMT,GAENU,KAAK+J,WAAatL,EAAAuL,gBAGflK,SACH,MAAM4D,KACFA,EAAA1B,YACAA,EAAAC,YACAA,EAAA2D,QACAA,EAAA7D,QACAA,EAAA8D,OACAA,GACA7F,KAAKV,MACHiV,EAAgB,QAAT7Q,EACPvD,EAAOH,KAAKG,KAElB,OACIlC,EAAAgH,cAAC/F,EAAS,CAAC+D,UAAU,4BAA4BsR,KAAMA,GACnDtW,EAAAgH,cAAA,MAAA,KACIhH,EAAAgH,cAACqD,EAAAsE,OAAM,CACH3J,UAAU,8BACV6J,UAAW,EACXtN,OAAQQ,KAAKV,MAAME,OACnBkG,QAASE,GAET3H,EAAAgH,cAAA,IAAA,KAAIjF,KAAK+J,WAAW5J,EAAKqH,cAE7BvJ,EAAAgH,cAACqD,EAAAsE,OAAM,CACH3J,UAAU,6BACV6J,UAAW,EACXtN,OAAQQ,KAAKV,MAAME,OACnBkG,QAASG,GAER1F,EAAKmK,gBAGdrM,EAAAgH,cAAA,MAAA,KACIhH,EAAAgH,cAACqD,EAAAsE,OAAM,CACH3J,UAAU,mCACV6J,UAAW,EACXzJ,SAAUrD,KAAKwU,aACfhV,OAAQQ,KAAKV,MAAME,OACnBkG,QAASzD,GAAW,KAIxBhE,EAAAgH,cAACqD,EAAAsE,OAAM,CACH3J,UAAU,oCACV6J,UAAW,EACXtN,OAAQQ,KAAKV,MAAME,OACnBkG,QAAS3D,GAAO,KAIpB9D,EAAAgH,cAACqD,EAAAsE,OAAM,CACH3J,UAAU,mCACV6J,UAAW,EACXzJ,SAAUrD,KAAKyU,aACfjV,OAAQQ,KAAKV,MAAME,OACnBkG,QAAS1D,GAAW,gFCjI5C,MAAA/D,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBACAM,EAAAP,EAAAC,EAAA,GAmBAmK,EAAApK,EAAAC,EAAA,GACAyW,EAAA1W,EAAAC,EAAA,GAgCaQ,EAAAkW,KAAOzW,EAAAe,QAAOC;;;;;EAOdT,EAAAO,UAAYd,EAAAe,QAAOR,EAAAkW;;;;;cAKlBvV,GACNA,EAAM+D,SAAW,cAAgB;;;;EAMzC,MAAMyR,EAAQ1W,EAAAe,QAAO4V;;;cAGPzV,GAAwBA,EAAM+D,SAAW,cAAgB;sBACjD/D,GACdA,EAAM+D,SAAW,OAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BrB1E,EAAAqW,YAAc5W,EAAAe,QAAOmJ,EAAA+L;;EAIrB1V,EAAAsW,YAAc7W,EAAAe,QAAO4V;;;EAKrBpW,EAAAuW,KAAO9W,EAAAe,QAAO4V;;;;;oBAKPzV,GAA6BA,EAAM6V;;EAIvD,MAAMC,EAAY,CAAC3W,EAAAwU,KAAKQ,UAAWhV,EAAAwU,KAAKS,OAAQjV,EAAAwU,KAAKM,KAE/C8B,EAAiB,CACnB5W,EAAAwU,KAAKW,MACLnV,EAAAwU,KAAKI,WACL5U,EAAAwU,KAAKE,YACL1U,EAAAwU,KAAKC,SACLzU,EAAAwU,KAAKG,WACL3U,EAAAwU,KAAKM,KAGT5U,EAAA0H,MAAA,cAA2BpI,EAAM8K,cA+C7BjJ,YAAYR,GACRS,MAAMT,GA/CFU,KAAAsV,OAA4B,GA8c5BtV,KAAAiG,QAAU,MACd,IAAI/F,EAEJ,OAAO8H,IACH3H,aAAaH,GAEb,MAAMP,EAAQqI,EAAEqG,cAEhB5P,EAAA2S,cAAczR,GAEdO,EAAUI,WAAW,KACjB,IAAKN,KAAKoB,MAAMmU,YAAa,CACzB,MAAMC,EAAc/W,EAAA2P,aAAazO,EAAO,cAExCK,KAAKV,MAAM+C,oBAAoBmT,KAEpC,MAhBO,GA7ZdxV,KAAKoB,MAAQ,GAEbpB,KAAKyV,YAAczV,KAAKyV,YAAYlU,KAAKvB,MACzCA,KAAK0V,UAAY1V,KAAK0V,UAAUnU,KAAKvB,MACrCA,KAAK2V,QAAU3V,KAAK2V,QAAQpU,KAAKvB,MACjCA,KAAKiG,QAAUjG,KAAKiG,QAAQ1E,KAAKvB,MACjCA,KAAK0F,QAAU1F,KAAK0F,QAAQnE,KAAKvB,MACjCA,KAAK4V,WAAa5V,KAAK4V,WAAWrU,KAAKvB,MACvCA,KAAK6V,OAAS7V,KAAK6V,OAAOtU,KAAKvB,MAC/BA,KAAKS,SAAWT,KAAKS,SAASc,KAAKvB,MACnCA,KAAKoC,QAAUpC,KAAKoC,QAAQb,KAAKvB,MACjCA,KAAKoF,SAAWpF,KAAKoF,SAAS7D,KAAKvB,MA1DvC8V,mBACI,OAAO9V,KAAKV,MAAMiD,OAAOoF,MAAM,IAAIoO,OAC/B,CAACC,EAAM9G,KACH,MAAM+G,EAAWD,EAAKA,EAAKvP,OAAS,GAYpC,OATIwP,GAAa/G,IAAS+G,EAASC,OAAO,EAAG,IACxCzX,EAAAkQ,gBAAgBD,KAAKuH,IAClBxX,EAAAkQ,gBAAgBD,KAAKQ,GAEzB8G,EAAKA,EAAKvP,OAAS,IAAMyI,EAEzB8G,EAAO,IAAIA,EAAM9G,GAGd8G,GAEX,IAIRG,cACI,OAAO5E,SAASjI,cAAc,UAGlC8M,gBACI,MAAMzT,SAAEA,EAAAE,SAAUA,GAAa7C,KAAKV,MAEpC,OAAKuD,GAAYF,EACN,OAGJ,WAGXwS,WACI,OAAQnV,KAAKoW,WACT,IAAK,WACD,MAAO,KACX,IAAK,OACD,MAAO,KAqBZtW,mBAAmBgE,GACtB,MAAMqB,KAAEA,EAAA5E,MAAMA,EAAAgC,OAAOA,EAAAmB,KAAQA,EAAA7C,gBAAMA,GAAoBb,KAAKV,MAG5D,IAFiBU,KAAKsV,OAAOe,KAAK/D,GAAOA,IAAQtS,KAAKmW,UAG9ChR,EAAM,CACN,GAAIrB,EAAUvD,QAAUA,GAAAA,EAAgB,CACpC,MAAM8P,EAAQ5R,EAAAyR,UAAU3P,EAAOgC,GACzB5C,EAAQK,KAAKsV,OAAO,GAE1BtV,KAAKsV,OAAOgB,QACR,CAAC3W,EAAOoM,IAAOpM,EAAM8Q,UAAYJ,EAAMtE,IAGvCpM,GACAA,EAAM4W,QAId,IAAKzS,EAAUqB,MAAQ5E,IAAUuD,EAAUvD,MAAO,CAC9C,MAAOZ,GAASK,KAAKsV,OAEjB3V,GACAlB,EAAA2S,cAAczR,IAM9B,GAAIwF,GAAQrB,EAAUJ,OAASA,IAAS1D,KAAKoB,MAAMmU,YAAa,CAC5D,MAAM5V,EAAQK,KAAKsV,OAAOkB,KAAKlI,IAC3B,MAAM/L,EAAS9D,EAAA2P,aAAaE,EAAI,cAGhC,OAFa7P,EAAAiI,cAAcnE,KAEXmB,IAGpBjF,EAAA2S,cAAczR,GAGlB,IAAKwF,GAAQ5E,EAAO,CAChB,MAAM8P,EAAQ5R,EAAAyR,UAAU3P,EAAOgC,GAE/BvC,KAAKsV,OAAOgB,QAAQ,CAAC3W,EAAOoM,IAAOpM,EAAM8Q,UAAYJ,EAAMtE,IAG3D5G,GAAQrB,EAAUvD,QAAUA,IAAUM,GACtCb,KAAKsV,OAAOgB,QAAQ3W,GAAUA,EAAM8Q,UAAY,IAG/CtL,GACDnF,KAAKY,SAAS,CAAE2U,aAAa,IAI9BzV,oBACCE,KAAKV,MAAMiB,OACXP,KAAKyW,cAIN3W,SACH,MAAM0E,YACFA,EAAAjE,MACAA,EAAAsC,SACAA,EAAAF,SACAA,EAAAU,SACAA,EAAA8B,KACAA,GACAnF,KAAKV,MACHoX,EAAkB1W,KAAKV,MAAM4G,sBAAwB0O,EAAA+B,YACrDC,EAAkBpS,IAAgBW,EAClC0R,EAActW,IAAU8C,EACxByT,EAAWnU,IAAaE,EAE9B,OACI5E,EAAAgH,cAACtG,EAAAO,UAAS,CAAAkV,YACI,QACVnR,UAAU,wCACVI,SAAUA,EACVqC,QAAS1F,KAAKoF,UAEdnH,EAAAgH,cAACtG,EAAAkW,KAAI,KACD5W,EAAAgH,cAACtG,EAAAuW,KAAI,CACDC,KAAMnV,KAAKmV,KACXlS,iCAAkCjD,KAAKoW,cAE3CnY,EAAAgH,cAACtG,EAAAkW,KAAI,KACA7U,KAAKyF,cACLmR,GACG3Y,EAAAgH,cAACtG,EAAAsW,YAAW,CAAChS,UAAU,8BAClBuB,KAKjBvG,EAAAgH,cAACtG,EAAAkW,KAAI,KACAgC,GACG5Y,EAAAgH,cAACtG,EAAAqW,YAAW,CACR/R,UAAU,yBACV6J,UAAW,EACXpH,QAAS1F,KAAKoC,SAAO,MAK3B0U,GACE7Y,EAAAgH,cAACyR,EAAe,CAACrT,SAAUA,EAAU8B,KAAMA,MAOvDrF,cACJ,MAAMqF,KAAEA,EAAA9B,SAAMA,EAAA7D,OAAUA,EAAAe,MAAQA,GAAUP,KAAKV,MACzCyX,GAAmB1T,IAAa7D,EAEtC,IAAK2F,IAAS5E,EACV,OAAO,KAGX,MAAMuV,EAAe9V,KAAK8V,aAE1B,OACI7X,EAAAgH,cAACtG,EAAAkW,KAAI,KACAiB,EAAajO,IAAI,CAACsI,EAAOpE,KACtB,GAAIoE,EAAMxI,MAAM,IAAI0O,KAAKW,GAAKvY,EAAAkQ,gBAAgBD,KAAKsI,IAC/C,OAAO,KACJ,CACH,MAAMC,EAAYnB,EAAa/J,EAAI,GAEnC,OACI9N,EAAAgH,cAAC6P,EAAK,CAAAX,kCAAA,EAEF4C,gBAAiBA,EACjB1T,SAAUA,EAAQ6T,mBACA/G,EAAKgH,iBACP1Y,EAAAsU,qBAAqBkE,GACrCpK,IAAKsD,EAAKiH,aACEjH,EACZ3K,IAAKxF,KAAKyV,YACVC,UAAW1V,KAAK0V,UAChBC,QAAS3V,KAAK2V,QACd1P,QAASjG,KAAKiG,QACd4P,OAAQ7V,KAAK6V,OACbnQ,QAAS1F,KAAK0F,QACd2R,cAAerX,KAAK4V,WACpBnV,SAAUT,KAAKS,eASnCX,YAAYwO,GACZA,EACAtO,KAAKsV,OAAOnS,KAAKmL,GAEjBtO,KAAKsV,OAAS,GAIdxV,UAAUkI,GACd,MAAM1G,kBACFA,EAAAiB,OACAA,EAAAhC,MACAA,EAAAM,gBACAA,GACAb,KAAKV,MACHK,EAAQqI,EAAEqG,eACVoC,UAAEA,EAAA6G,YAAWA,EAAAC,gBAAaA,GAAoB5X,EAC9C6V,EAAc/W,EAAA2P,aAAazO,EAAO,cAClC6X,EAAgB/Y,EAAAqQ,qBAAqB0G,GACrCxE,EAAMC,eACNwG,EAAe3W,QAAQkQ,EAAI0G,YAAc1G,EAAI2G,YACnD,IAAIC,EAAe9P,SAAS2I,EAAW,IAEvC,OAAQzI,EAAE2H,SACN,KAAKlR,EAAAwU,KAAKK,MACV,KAAK7U,EAAAwU,KAAKO,IACV,KAAK/U,EAAAwU,KAAKQ,UACV,KAAKhV,EAAAwU,KAAKY,IACV,KAAKpV,EAAAwU,KAAKa,MAEN,YADA9L,EAAE6P,iBAEN,KAAKpZ,EAAAwU,KAAKE,YAQN,OAPAnL,EAAE6P,sBAEEP,aAAuBQ,gBACvBR,EAAYf,QAEZ9X,EAAA2S,cAAczR,IAGtB,KAAKlB,EAAAwU,KAAKI,WAQN,OAPArL,EAAE6P,sBAEEN,aAA2BO,gBAC3BP,EAAgBhB,QAEhB9X,EAAA2S,cAAczR,IAGtB,KAAKlB,EAAAwU,KAAKC,SACV,KAAKzU,EAAAwU,KAAKG,WAGN,GAFApL,EAAE6P,kBAEGL,EACD,OAGJ,MAAMO,EAAY/P,EAAE2H,UAAYlR,EAAAwU,KAAKC,SAMrC,GAJI8E,MAAMJ,KACNA,EAAe,GAGf5I,SAAS4I,GAAe,CACxB,MAAM9E,EAAarU,EAAAiI,cAAc8O,GAEjC,GAAK3U,GAgBD,GAAIN,GAASuS,EAAY,CACrB,MAAMmF,EAAYF,EAAY,MAAQ,WAEhCnQ,EAAUnJ,EAAA0T,eACZ5R,EACAuS,EACAmF,EACAjQ,EAAEkQ,UAQN,GANgBzZ,EAAA4F,UACZ,MACAuD,EACA5H,KAAKV,OAGI,CACT,MAAM6Y,EAAY1Z,EAAAyR,UAAUtI,EAASrF,GAErCvC,KAAKsV,OAAOzN,IACR,CAACyK,EAAKvG,IAAOuG,EAAI7B,UAAY0H,EAAUpM,UAnCjC,CAClB,MAAMyD,EAAMxH,EAAEkQ,SAAW,GAAK,EACxBE,EACFR,GAAgBG,EAAYvI,GAAOA,GACjC6I,EAAQ5Z,EAAAsQ,oBACVqJ,EACA5C,GAGA6C,IACA1Y,EAAM8Q,UACe,iBAAV4H,EACDA,EACA5Z,EAAAuR,aAAaoI,IA4B/B3Z,EAAA2S,cAAczR,GACd2B,EAAkB7C,EAAA2R,UAAUpQ,KAAKsV,OAAQ/S,IAE7C,OAGR,MAAM2M,EAAOzQ,EAAAiR,mBAAmB1H,EAAE2H,SAC5B2I,EAAa7H,IAAcgH,EAAehH,EAAYvB,EAAOA,EAEnE,GAAIkG,EAAUrF,SAAS/H,EAAE2H,UAAY3H,EAAEuQ,SAAWvQ,EAAEwQ,QAChD,OAGJ,IAAKhB,EAED,YADAxP,EAAE6P,iBAIN,MAAMQ,EAAQ5Z,EAAAsQ,oBAAoBuJ,EAAY9C,GAU9C,GARK6C,EAEuB,iBAAVA,IACdrQ,EAAE6P,iBAEFlY,EAAM8Q,UAAY4H,GAJlBrQ,EAAE6P,iBAQF7X,KAAKoB,MAAMmU,aACXvN,EAAE2H,UAAYlR,EAAAwU,KAAKQ,WACnBzL,EAAE2H,UAAYlR,EAAAwU,KAAKS,OACrB,CACE,MAAO+E,GAAczY,KAAKsV,OAC1B,IAAIoD,EAAgBja,EAAAsQ,oBAAoBG,EAAMsG,GAE1CkD,IAAmC,IAAlBA,IACjBA,EAAgBxJ,GAGhBwJ,IACA1Q,EAAE6P,iBAEF7X,KAAKsV,OAAOgB,QAAQ,CAAChI,EAAIvC,IAAY,IAANA,IAAYuC,EAAGmC,UAAY,KAE7B,IAAzBiI,EAAcjS,OACdhI,EAAA2S,cAAcqH,IAEdha,EAAA8H,iBAEAkS,EAAWhI,UAAYiI,EACvBD,EAAWlC,QAEX9X,EAAA2S,cAAcqH,EAAY,CAAC,SAMlChB,GAAgBhH,EAAUhK,QAAU+O,EAAY/O,QACjDuB,EAAE6P,iBAIF/X,QAAQkI,GACZ,MAAM1G,kBAAEA,EAAAiB,OAAmBA,EAAAwD,SAAQA,EAAAX,SAAUA,GAAapF,KAAKV,MACzDK,EAAQqI,EAAEqG,eACVoC,UAAEA,EAAA6G,YAAWA,EAAAC,gBAAaA,GAAoB5X,EAEpD,GAAIqI,EAAE2H,UAAYlR,EAAAwU,KAAKK,MAOnB,OANAtL,EAAE6P,iBAEE7X,KAAKmW,SACLnW,KAAKmW,QAAQwC,YAEjB5S,IAIAiC,EAAE2H,UAAYlR,EAAAwU,KAAKO,IAKnBxT,KAAKoB,MAAMmU,aACPvN,EAAE2H,UAAYlR,EAAAwU,KAAKQ,WAAazL,EAAE2H,UAAYlR,EAAAwU,KAAKS,SAEnD1T,KAAKsV,OAAOgB,QAAQhI,GAAOA,EAAGmC,UAAY,IAE1ChS,EAAA2S,cAAcpR,KAAKsV,OAAO,KAG9BtV,KAAKY,SAAS,CAAE2U,aAAa,KAIxBvN,EAAE2H,UAAYlR,EAAAwU,KAAKQ,UACpBhD,EACA9Q,EAAM8Q,UAAY,GACX8G,aAA2BO,iBAClCrZ,EAAA2S,cAAcmG,IAMlB9G,EAAWhK,QAAUhI,EAAA2P,aAAazO,EAAO,cAAc8G,SAClD4O,EAAetF,SAAS/H,EAAE2H,UAC/B3H,EAAE2H,UAAYlR,EAAAwU,KAAKY,KACnB7L,EAAE2H,UAAYlR,EAAAwU,KAAKa,SAEdwD,EAEMA,aAAuBQ,iBAC9BrZ,EAAA2S,cAAckG,GAFd7Y,EAAA2S,cAAczR,GAKlB2B,EAAkB7C,EAAA2R,UAAUpQ,KAAKsV,OAAQ/S,KArCzC6C,IAyCAtF,QAAQkI,GACZvJ,EAAA2S,cAAcpJ,EAAEqG,eAGZvO,WAAWkI,GACf,MAAMrI,EAAQqI,EAAEqG,cAEZ1O,EAAMiZ,YAAc5Y,KAAKsV,OAAOe,KAAK/H,GAAMxN,QAAQwN,EAAGmC,cACtDhS,EAAA2S,cAAcpR,KAAKsV,OAAO,IAC1B7W,EAAA2S,cAAczR,EAAMiZ,YACpB5Y,KAAKY,SAAS,CAAE2U,aAAa,GAAQvV,KAAKV,MAAMgH,cAwBhDxG,OAAOkI,GACX,IAAKhI,KAAKoB,MAAMmU,YAAa,CACzB,MAAM5V,EAAQqI,EAAEC,OACV1H,EAAQZ,EAAM8Q,UACdoI,EAAYpa,EAAA2P,aAAazO,EAAO,cAChCmT,EAAarU,EAAAiI,cAAcmS,GAEjC,GAAI/F,EAAY,CACZ,MAAMgG,EAAcra,EAAAsa,SAASxY,EAAOuS,GAEhCgG,IACAnZ,EAAM8Q,UAAYqI,IAM9BxY,WAAW,KACP,MAAM6V,QAAEA,GAAYnW,KAGhBA,KAAKV,MAAM6F,MACXgR,IACC1X,EAAA2P,aAAa+H,EAAS,mCAEvBnW,KAAKV,MAAM8F,YAEhB,GAGCtF,SAASkI,GACb,MAAMzF,OAAEA,EAAAjB,kBAAQA,GAAsBtB,KAAKV,MACrCK,EAAQqI,EAAEqG,eACVoC,UAAEA,EAAA6G,YAAWA,GAAgB3X,EAEnC2B,EAAkB7C,EAAA2R,UAAUpQ,KAAKsV,OAAQ/S,IAErCkO,EAAUhK,QAAUhI,EAAA2P,aAAazO,EAAO,cAAc8G,QAClD6Q,aAAuBQ,iBACvBR,EAAYf,QAKhBzW,QAAQkI,GACZA,EAAEgR,kBAEFhZ,KAAKV,MAAM8C,UAGPtC,SAASkI,GACb,MAAM7C,KAAEA,EAAA9B,SAAMA,EAAA+B,SAAUA,GAAapF,KAAKV,MAEtC+D,GAICrD,KAAKsV,OAAOe,KAAK/D,GAAOA,IAAQtK,EAAEC,SAAY9C,GAC/CC","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n} from './typings';\nimport { ValueMulti } from './value-multi';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentClass<MenuContainerProps, any>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: undefined,\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                    onClick={\n                                        mobile\n                                            ? this.onMobileMenuContainerClick\n                                            : undefined\n                                    }\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    getAttribute,\n    isArray,\n    dateEqual,\n    getWeekdayNames\n} from './utils';\nimport { Button } from './button';\nimport { Day, WeekNum } from './menu-day';\nimport { ReactTimebombDate } from './typings';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface MenuState {\n    hoverDay?: Date;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n    mobile?: boolean;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0 0 10px;\n    height: ${(props: { mobile?: boolean }) => (props.mobile ? '100' : 'auto')};\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    height: 100%;\n    font-size: inherit;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n            width: 14.285714286%;\n        }\n\n        td {\n            width: 14.285714286%;\n        }\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps, MenuState> {\n    private weekdayNames!: string[];\n    private monthNames!: string[];\n\n    private get now(): Date {\n        return new Date();\n    }\n\n    private getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[this.props.selectedRange] : date)!;\n    }\n\n    private yearContainer: HTMLDivElement | null = null;\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const date = this.getDate(this.props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { value, minDate, maxDate } = this.props;\n        const valueDate = this.getDate(value);\n        const year = this.getDate(this.props.date).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, this.props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = this.now;\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onYearContainer = this.onYearContainer.bind(this);\n        this.onDayMouseEnter = this.onDayMouseEnter.bind(this);\n        this.onDayMouseLeave = this.onDayMouseLeave.bind(this);\n\n        this.weekdayNames = getWeekdayNames();\n        this.monthNames = getMonthNames(true);\n    }\n\n    public componentDidUpdate(prevProps: MenuProps) {\n        if (!dateEqual(prevProps.date, this.props.date)) {\n            this.scrollToYear(64);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { mode, mobile, showDate, showConfirm } = this.props;\n\n        if (showDate) {\n            switch (mode) {\n                case 'year':\n                case 'month':\n                    return (\n                        <MonthAndYearContainer mobile={mobile}>\n                            {this.renderMenuMonths()}\n                            {this.renderMenuYear()}\n                        </MonthAndYearContainer>\n                    );\n                case 'day':\n                    return (\n                        <MonthContainer mobile={mobile}>\n                            {this.renderMonth()}\n                            {showConfirm && this.renderConfirm()}\n                        </MonthContainer>\n                    );\n            }\n        }\n\n        return null;\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                mobile={this.props.mobile}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { value, mobile } = this.props;\n        const valueDate = this.getDate(value);\n        const date = this.getDate(this.props.date);\n        const month = value && valueDate.getMonth();\n        const year = value && valueDate.getFullYear();\n\n        return (\n            <MonthsContainer mobile={mobile} className=\"months\">\n                {this.monthNames.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            mobile={this.props.mobile}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek, mobile } = this.props;\n        const { hoverDay } = this.state;\n        const [sun, mon, tue, wed, thu, fri, sat] = this.weekdayNames;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                mobile={mobile}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>{mon}</th>\n                        <th>{tue}</th>\n                        <th>{wed}</th>\n                        <th>{thu}</th>\n                        <th>{fri}</th>\n                        <th>{sat}</th>\n                        <th>{sun}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">\n                                        <WeekNum\n                                            day={dates[0]}\n                                            onClick={this.onSelectDay}\n                                        >\n                                            {weekNum}\n                                        </WeekNum>\n                                    </td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            day={date}\n                                            hoverDay={hoverDay}\n                                            date={this.props.date}\n                                            value={this.props.value}\n                                            minDate={this.props.minDate}\n                                            maxDate={this.props.maxDate}\n                                            selectWeek={this.props.selectWeek}\n                                            selectRange={this.props.selectRange}\n                                            showTime={this.props.showTime}\n                                            onSelectDay={this.onSelectDay}\n                                            onMouseEnter={this.onDayMouseEnter}\n                                            onMouseLeave={this.onDayMouseLeave}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isArray(validDate)\n                ? validDate.every(v => isEnabled('day', v, this.props))\n                : isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    mobile={this.props.mobile}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private scrollToYear = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (delay: number) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                if (this.yearContainer) {\n                    const selected = this.yearContainer.querySelector(\n                        '.selected'\n                    );\n\n                    if (selected) {\n                        selected.scrollIntoView();\n                        this.yearContainer.scrollBy({ top: -10 });\n                    }\n                }\n            }, delay);\n        };\n    })();\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        this.yearContainer = el;\n\n        this.scrollToYear(0);\n    }\n\n    private onDayMouseEnter(day: Date) {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: day });\n        }\n    }\n\n    private onDayMouseLeave() {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: undefined });\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\nimport { ReactTimebombDate, FormatType } from './typings';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\n\nexport const formatSplitExpr = /[.|:|\\-|\\\\|_|\\s]/;\n\nexport function dateFormat(date: Date, format: string): string;\nexport function dateFormat(date: Date[], format: string): string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[] {\n    if (isArray(date)) {\n        return date.map(date => moment(date).format(format));\n    } else {\n        return moment(date).format(format);\n    }\n}\n\nexport function validateDate(\n    date: string | string[] | undefined,\n    format: string\n): ReactTimebombDate {\n    if (isArray(date)) {\n        const dates = date\n            .map(date => {\n                const instance = moment(date, format, true);\n\n                return instance.isValid() ? instance.toDate() : undefined;\n            })\n            .filter(d => Boolean(d)) as Date[];\n\n        return dates.length === 0 ? undefined : dates;\n    } else {\n        const instance = moment(date, format, true);\n\n        return instance.isValid() ? instance.toDate() : undefined;\n    }\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/D/.test(format)) {\n        return 'day';\n    }\n\n    if (/M/.test(format)) {\n        return 'month';\n    }\n\n    if (/Y/.test(format)) {\n        return 'year';\n    }\n\n    if (/H/.test(format)) {\n        return 'hour';\n    }\n\n    if (/m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\nexport function formatIsActualNumber(format: string) {\n    // day / year\n    if (/D|Y/.test(format)) {\n        return true;\n    }\n\n    // month\n    if (format === 'M' || format === 'MM') {\n        return true;\n    }\n\n    return false;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n        const type = getFormatType(format);\n\n        switch (type) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nconst ALLOWED_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n    const char = String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n\n    if (ALLOWED_CHARS.includes(char)) {\n        return char;\n    }\n\n    return '';\n}\n\nexport function formatNumber(number: Number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    const formattedDate = dateFormat(date, format);\n\n    return formattedDate\n        .split(formatSplitExpr)\n        .filter(group => group && formatSplitExpr.test(group) === false);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplitExpr);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function selectElement(\n    el: HTMLElement | undefined,\n    caret?: number[]\n): void {\n    if (el) {\n        const range = document.createRange();\n        const sel = getSelection();\n\n        if (caret === undefined) {\n            range.selectNodeContents(el);\n        } else {\n            const [start, end] = caret;\n\n            range.setStart(el, start);\n            range.setEnd(el, end);\n        }\n\n        sel.removeAllRanges();\n        sel.addRange(range);\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract',\n    shift = false\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractHours(date, shift ? 10 : 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractMinutes(date, shift ? 10 : 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractSeconds(date, shift ? 10 : 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function dateEqual(\n    dateA?: ReactTimebombDate,\n    dateB?: ReactTimebombDate,\n    considerTime = false\n) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    if (considerTime) {\n        if (isArray(dateA)) {\n            dateA = dateA.map(startOfDay);\n        } else {\n            dateA = startOfDay(dateA);\n        }\n\n        if (isArray(dateB)) {\n            dateB = dateB.map(startOfDay);\n        } else {\n            dateB = startOfDay(dateB);\n        }\n    }\n\n    if (isArray(dateA) && isArray(dateB)) {\n        return dateA.every((date, i) => {\n            const dBi = dateB![i];\n\n            if (date && dBi) {\n                return date.getTime() === dBi.getTime();\n            }\n\n            return false;\n        });\n    } else if (isArray(dateA) && dateB instanceof Date) {\n        return dateA.some(d => d.getTime() === (dateB as Date).getTime());\n    } else if (isArray(dateB) && dateA instanceof Date) {\n        return dateB.some(d => d.getTime() === (dateA as Date).getTime());\n    } else if (!isArray(dateA) && !isArray(dateB)) {\n        return dateA.getTime() === dateB.getTime();\n    }\n\n    return false;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function getWeekdayNames() {\n    return moment.weekdaysShort();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport function isDateFormat(format: string) {\n    return Boolean(/D|M|Y/.test(format));\n}\n\nexport function isTimeFormat(format: string) {\n    return Boolean(/H|h|m|k|a|S|s/.test(format));\n}\n\nexport function sortDates(a: Date, b: Date) {\n    return a.getTime() - b.getTime();\n}\n\nexport function isArray(val: any): val is any[] {\n    return Array.isArray(val);\n}\n\nexport function fillZero(value: string | number, formatType: FormatType) {\n    value = String(value);\n\n    switch (formatType) {\n        case 'day':\n            if (value === '1' || value === '2' || value === '3') {\n                return `0${value}`;\n            }\n            break;\n        case 'month':\n            if (value === '1') {\n                return `0${value}`;\n            }\n            break;\n    }\n\n    return undefined;\n}\n\nexport function replaceSpaceWithNbsp(str?: string) {\n    if (!str) {\n        return str;\n    }\n\n    return str.replace(' ', ' ');\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    DOT: 190,\n    COMMA: 188\n};\n","// @ts-ignore\nimport * as React from 'react';\nimport styled, { css } from 'styled-components';\n\nexport interface ButtonProps {\n    selected?: boolean;\n    mobile?: boolean;\n}\n\nconst StyledButton = styled.button`\n    margin-right: 5px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n    padding: 3px 6px;\n    min-height: 21px;\n    box-sizing: border-box;\n    background: ${(props: ButtonProps) => (props.selected ? '#ccc' : '#fff')};\n\n    ${(props: ButtonProps) =>\n        props.mobile\n            ? css`\n                  font-size: 16px;\n                  margin-right: 6px;\n                  padding: 6px 12px;\n              `\n            : ''}\n\n    &:focus {\n        outline: none;\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    &:not(:disabled) {\n        cursor: pointer;\n    }\n\n    &:not(:disabled):hover {\n        background-color: ${(props: ButtonProps) =>\n            props.selected ? '#ccc' : '#efefef'};\n    }\n\n    &:last-child {\n        margin-right: 0;\n    }\n`;\n\nexport const Button = (props: ButtonProps & React.ButtonHTMLAttributes<{}>) => (\n    <StyledButton\n        data-react-timebomb-selectable\n        data-role=\"button\"\n        type=\"button\"\n        {...props}\n    />\n);\n\nexport const SmallButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover:not(:disabled) {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { Button } from './button';\nimport {\n    subtractDays,\n    startOfMonth,\n    endOfMonth,\n    addDays,\n    getMonthNames\n} from './utils';\nimport { isArray } from 'util';\n\ninterface MenuTitleProps {\n    date: ReactTimebombState['date'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    mobile: ReactTimebombProps['mobile'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    onPrevMonth(): void;\n    onNextMonth(): void;\n    onReset(): void;\n    onMonth(): void;\n    onYear(): void;\n}\n\nconst Container = styled.div`\n    display: ${(props: { show: boolean }) => (props.show ? 'flex' : 'none')};\n    align-items: center;\n    width: 100%;\n    padding: 10px 10px 15px;\n    justify-content: space-between;\n    box-sizing: border-box;\n    white-space: nowrap;\n`;\n\nexport class MenuTitle extends React.PureComponent<MenuTitleProps> {\n    private monthNames!: string[];\n\n    private get prevDisabled(): boolean {\n        const { minDate, date } = this.props;\n\n        if (minDate && date) {\n            return subtractDays(startOfMonth(this.date), 1) < minDate;\n        }\n\n        return false;\n    }\n\n    private get nextDisabled(): boolean {\n        const { maxDate, date } = this.props;\n\n        if (maxDate && date) {\n            const lastDate = isArray(date) ? date[date.length - 1] : date;\n\n            return addDays(endOfMonth(lastDate), 1) > maxDate;\n        }\n\n        return false;\n    }\n\n    private get date() {\n        const { date, selectedRange } = this.props;\n\n        return (isArray(date) ? date[selectedRange] : date)!;\n    }\n\n    constructor(props: MenuTitleProps) {\n        super(props);\n\n        this.monthNames = getMonthNames();\n    }\n\n    public render(): React.ReactNode {\n        const {\n            mode,\n            onNextMonth,\n            onPrevMonth,\n            onMonth,\n            onReset,\n            onYear\n        } = this.props;\n        const show = mode === 'day';\n        const date = this.date;\n\n        return (\n            <Container className=\"react-timebomb-menu-title\" show={show}>\n                <div>\n                    <Button\n                        className=\"react-timebomb-button-month\"\n                        tabIndex={-1}\n                        mobile={this.props.mobile}\n                        onClick={onMonth}\n                    >\n                        <b>{this.monthNames[date.getMonth()]}</b>\n                    </Button>\n                    <Button\n                        className=\"react-timebomb-button-year\"\n                        tabIndex={-1}\n                        mobile={this.props.mobile}\n                        onClick={onYear}\n                    >\n                        {date.getFullYear()}\n                    </Button>\n                </div>\n                <div>\n                    <Button\n                        className=\"react-timebomb-button-month-prev\"\n                        tabIndex={-1}\n                        disabled={this.prevDisabled}\n                        mobile={this.props.mobile}\n                        onClick={onPrevMonth}\n                    >\n                        ◀\n                    </Button>\n                    <Button\n                        className=\"react-timebomb-button-month-reset\"\n                        tabIndex={-1}\n                        mobile={this.props.mobile}\n                        onClick={onReset}\n                    >\n                        ○\n                    </Button>\n                    <Button\n                        className=\"react-timebomb-button-month-next\"\n                        tabIndex={-1}\n                        disabled={this.nextDisabled}\n                        mobile={this.props.mobile}\n                        onClick={onNextMonth}\n                    >\n                        ▶\n                    </Button>\n                </div>\n            </Container>\n        );\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled,\n    selectElement,\n    fillZero,\n    clearSelection,\n    formatSplitExpr,\n    formatIsActualNumber,\n    replaceSpaceWithNbsp\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { SmallButton } from './button';\nimport { ArrowButton } from './arrow-button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format, mode, allowValidation } = this.props;\n        const hasFocus = this.inputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.inputs[0];\n\n                    this.inputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const [input] = this.inputs;\n\n                    if (input) {\n                        selectElement(input);\n                    }\n                }\n            }\n        }\n\n        if (open && prevProps.mode !== mode && !this.state.allSelected) {\n            const input = this.inputs.find(el => {\n                const format = getAttribute(el, 'data-group');\n                const type = getFormatType(format);\n\n                return type === mode;\n            });\n\n            selectElement(input);\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n        }\n\n        if (open && prevProps.value && !value && !allowValidation) {\n            this.inputs.forEach(input => (input.innerText = ''));\n        }\n\n        if (!open) {\n            this.setState({ allSelected: false });\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp disabled={disabled} open={open} />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = e.shiftKey ? 10 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}