{"version":3,"sources":["src/menu.tsx","src/utils.ts"],"names":["React","$fsx","r","styled_components_1","utils_1","button_1","Flex","default","div","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","props","selectWeek","css","StyledDay","current","selected","today","disabled","Day","PureComponent","[object Object]","super","this","onSelectDay","bind","value","day","getWeekOfYear","dateEqual","date","getMonth","enabled","isEnabled","isToday","createElement","className","onClick","getDate","exports","Menu","monthMatrixCache","Map","onSelectMonth","onSelectYear","now","Date","monthMatrix","dateMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","push","addDays","set","fullYears","minDate","maxDate","year","currentYear","Array","fill","undefined","map","_","i","setFullYear","filter","obj","reverse","minYear","array","currentDate","mode","showConfirm","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","ref","onYearContainer","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","months","getMonthNames","month","str","newDate","setMonth","showCalendarWeek","cellSpacing","cellPadding","dates","weekNum","Object","assign","valueText","format","validDate","validateDate","isValid","onSubmit","e","currentTarget","getAttribute","setTimeout","el","querySelector","scrollIntoView","scrollBy","top","moment_1","momentImport","moment","formatSplit","dateFormat","getFormatType","test","num","add","toDate","instance","validateFormatGroup","input","isFinite","int","parseInt","char","String","strLen","length","startsWith","stringFromCharCode","keyCode","charCode","Math","floor","fromCharCode","formatNumber","number","splitDate","split","joinDates","parts","strParts","part","HTMLElement","innerText","val","splittedFormat","join","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","clearSelection","sel","getSelection","empty","removeAllRanges","isoWeek","startOf","endOf","startOfDay","setHours","endOfDay","subtractDays","manipulateDate","subtract","isSame","isBefore","inp","isAfter","dateA","getTime","dateB","isSameOrAfter","context","attr","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","A"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    isToday,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    dateEqual\n} from './utils';\nimport { Button } from './button';\n\ninterface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface StyledDayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: 220px;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 46px;\n        border: none;\n        margin: 0 0 4px;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nconst StyledDay = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: StyledDayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: ${(props: StyledDayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: StyledDayProps) =>\n        props.selected ? 'bold' : 'normal'};\n    pointer-events: ${(props: StyledDayProps) =>\n        props.disabled ? 'none' : 'auto'};\n    user-select: none;\n    opacity: ${(props: StyledDayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: StyledDayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\ninterface DayProps extends MenuProps {\n    day: Date;\n}\n\nclass Day extends React.PureComponent<DayProps> {\n    constructor(props: DayProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n    }\n\n    private get selected() {\n        const { value, selectWeek, day } = this.props;\n\n        if (selectWeek && value) {\n            return getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return dateEqual(value, day);\n    }\n\n    public render() {\n        const { day, date } = this.props;\n        const current = day.getMonth() === date.getMonth();\n        const enabled = isEnabled('day', day, this.props);\n        const today = isToday(day);\n        const selected = this.selected;\n\n        return (\n            <StyledDay\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={!enabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {day.getDate()}\n            </StyledDay>\n        );\n    }\n\n    private onSelectDay() {\n        this.props.onSelectDay(this.props.day);\n    }\n}\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const { date } = this.props;\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { minDate, maxDate } = this.props;\n        const year = this.props.date.getFullYear();\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(minDate);\n\n                    date.setFullYear(currentYear + i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(maxDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                const date = new Date(maxDate);\n\n                date.setFullYear(i);\n\n                const enabled = isEnabled('year', date, this.props);\n                const selected = year === date.getFullYear();\n\n                array.push({ date, enabled, selected });\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showConfirm } = this.props;\n\n        switch (mode) {\n            case 'year':\n            case 'months':\n                return (\n                    <MonthAndYearContainer>\n                        {this.renderMenuMonths()}\n                        {this.renderMenuYear()}\n                    </MonthAndYearContainer>\n                );\n            case 'month':\n                return (\n                    <MonthContainer>\n                        {this.renderMonth()}\n                        {showConfirm && this.renderConfirm()}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { date, value } = this.props;\n        const months = getMonthNames(true);\n        const month = value && value.getMonth();\n        const year = value && value.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">{weekNum}</td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            {...this.props}\n                                            day={date}\n                                            onSelectDay={this.onSelectDay}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        if (el) {\n            const selected = el.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n                el.scrollBy({ top: -10 });\n            }\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\nconst formatSplit = /[.|:|-|\\\\|_|\\s]/;\n\ntype FormatType = 'day' | 'month' | 'year' | 'hour' | 'minute' | 'second';\n\nexport function dateFormat(date: Date, format: string): string {\n    return moment(date).format(format);\n}\n\nexport function validateDate(\n    date: string | undefined,\n    format: string\n): Date | undefined {\n    const instance = moment(date, format, true);\n\n    return instance.isValid() ? instance.toDate() : undefined;\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/d/i.test(format)) {\n        return 'day';\n    }\n\n    if (/M/.test(format)) {\n        return 'month';\n    }\n\n    if (/y/i.test(format)) {\n        return 'year';\n    }\n\n    if (/h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n        const type = getFormatType(format);\n\n        switch (type) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n\n    return String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n}\n\nexport function formatNumber(number: Number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    return dateFormat(date, format).split(formatSplit);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplit);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract'\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, 1);\n            if (direction === 'subtract') return subtractMinutes(date, 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, 1);\n            if (direction === 'subtract') return subtractSeconds(date, 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function dateEqual(dateA?: Date, dateB?: Date) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    return dateA.getTime() === dateB.getTime();\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    A: 65\n};\n"]}