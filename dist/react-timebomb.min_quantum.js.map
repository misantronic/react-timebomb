{"version":3,"sources":["src/index.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","minDate","maxDate","isBefore","Error","this","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onToday","onNextMonth","onPrevMonth","onSelectTime","onClose","showTime","Boolean","test","format","className","classNames","push","join","defaultDateValue","value","date","Date","isAfter","startOfDay","allowValidation","mode","valueText","dateFormat","undefined","prevProps","prevState","setState","valueTextDidUpdate","commit","validDate","validateDate","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","Value","onSubmit","MenuTitle","onMonths","onYear","Menu","type","onFocus","setTimeout","clearSelection","error","onError","onChange","dateEqual","day","setDate","getHours","getMinutes","setMonth","getMonth","time","splitted","split","newDate","parseInt","defaultProps"],"mappings":"mFAAA,MAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBACAE,EAAAH,EAAAC,EAAA,cACAG,EAAAJ,EAAAC,EAAA,GACAI,EAAAL,EAAAC,EAAA,GACAK,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GAaAO,EAAAR,EAAAC,EAAA,GAMSQ,EAAAC,mBALLF,EAAAE,mBAKyBD,EAAAE,mBAJzBH,EAAAG,mBAI6CF,EAAAG,mBAH7CJ,EAAAI,mBAKJ,MAAMC,EAAYX,EAAAY,QAAOC;;;EAKnBC,EAAcd,EAAAY,QAAOC;;;;;;;;;kBASTE,GAAmCA,EAAMC;;;EAKrDC,EAAajB,EAAAY,QAAOM;;;;;;EAQ1B,MAAaC,UAAsBtB,EAAMuB,UA2DrCC,YAAYN,GACRO,MAAMP,GAEN,MAAMQ,QAAEA,EAAAC,QAASA,GAAYT,EAE7B,GAAIQ,GAAWC,GAAWnB,EAAAoB,SAASD,EAASD,GACxC,MAAM,IAAIG,MAAM,sCAGpBC,KAAKC,MAAQD,KAAKE,aAElBF,KAAKG,kBAAoBH,KAAKG,kBAAkBC,KAAKJ,MACrDA,KAAKK,cAAgBL,KAAKK,cAAcD,KAAKJ,MAC7CA,KAAKM,YAAcN,KAAKM,YAAYF,KAAKJ,MACzCA,KAAKO,WAAaP,KAAKO,WAAWH,KAAKJ,MACvCA,KAAKQ,aAAeR,KAAKQ,aAAaJ,KAAKJ,MAC3CA,KAAKS,cAAgBT,KAAKS,cAAcL,KAAKJ,MAC7CA,KAAKU,aAAeV,KAAKU,aAAaN,KAAKJ,MAC3CA,KAAKW,QAAUX,KAAKW,QAAQP,KAAKJ,MACjCA,KAAKY,YAAcZ,KAAKY,YAAYR,KAAKJ,MACzCA,KAAKa,YAAcb,KAAKa,YAAYT,KAAKJ,MACzCA,KAAKc,aAAed,KAAKc,aAAaV,KAAKJ,MAC3CA,KAAKe,QAAUf,KAAKe,QAAQX,KAAKJ,MA1E9BN,gCACHN,GAEA,MAAO,CACH4B,SAAUC,QAAQ,gBAAgBC,KAAK9B,EAAM+B,UASrDC,gBACI,MAAMC,EAAa,CAAC,kBAMpB,OAJIrB,KAAKZ,MAAMgC,WACXC,EAAWC,KAAKtB,KAAKZ,MAAMgC,WAGxBC,EAAWE,KAAK,KAG3BC,uBACI,MAAMC,MAAEA,EAAA7B,QAAOA,EAAAC,QAASA,GAAYG,KAAKZ,MAEzC,GAAIqC,EACA,OAAOA,EAGX,IAAIC,EAAO,IAAIC,KAQf,OANI9B,GAAWnB,EAAAoB,SAASD,EAAS6B,GAC7BA,EAAO7B,EACAD,GAAWlB,EAAAkD,QAAQhC,EAAS8B,KACnCA,EAAO9B,GAGJlB,EAAAmD,WAAWH,GAGtBxB,mBACI,MAAO,CACH4B,iBAAiB,EACjBC,KAAM,QACNC,UAAWhC,KAAKZ,MAAMqC,MAChB/C,EAAAuD,WAAWjC,KAAKZ,MAAMqC,MAAOzB,KAAKZ,MAAM+B,aACxCe,EACNR,KAAM1B,KAAKwB,kBA6BZ9B,mBACHyC,EACAC,GAEA,MAAMJ,UAAEA,GAAchC,KAAKC,OACrBwB,MAAEA,EAAAN,OAAOA,GAAWnB,KAAKZ,MAE3B+C,EAAUhB,SAAWA,GACrBnB,KAAKqC,SAAS,CACVL,UAAWP,EAAQ/C,EAAAuD,WAAWR,EAAON,QAAWe,IAIpDE,EAAUJ,YAAcA,GACxBhC,KAAKsC,oBAAmB,GAIxB5C,mBAAmB6C,GACvB,MAAMP,UAAEA,EAAAF,gBAAWA,GAAoB9B,KAAKC,OACtCkB,OAAEA,GAAWnB,KAAKZ,MAClBoD,EAAY9D,EAAA+D,aAAaT,EAAWb,GAEtCqB,EACAxC,KAAKqC,SAAS,CAAEP,iBAAiB,GAAQ,KACrBpD,EAAAgE,UAAU,MAAOF,EAAWxC,KAAKZ,OAG7CY,KAAKqC,SAAS,CAAEX,KAAMc,GAAa,IAC/BxC,KAAK2C,WAAWH,EAAWD,IAG/BvC,KAAK4C,UAAU,aAAcZ,KAG9BA,EACPhC,KAAK4C,UAAU,cAAeZ,IACtBtD,EAAAmE,YAAYb,IAAcF,GAClC9B,KAAK2C,gBAAWT,EAAWK,GAI5B7C,SACH,MAAMoD,YACFA,EAAAC,UACAA,EAAAC,YACAA,EAAAC,iBACAA,EAAAC,WACAA,EAAA/B,OACAA,GACAnB,KAAKZ,OACH4B,SAAEA,EAAAgB,UAAUA,EAAAF,gBAAWA,EAAAC,KAAiBA,GAAS/B,KAAKC,MAEtDL,EAAUI,KAAKZ,MAAMQ,QACrBlB,EAAAmD,WAAW7B,KAAKZ,MAAMQ,cACtBsC,EACArC,EAAUG,KAAKZ,MAAMS,QACrBnB,EAAAyE,SAASnD,KAAKZ,MAAMS,cACpBqC,EACAT,EAAQO,EACRtD,EAAA+D,aAAaT,EAAWb,GACxBnB,KAAKZ,MAAMqC,MAEjB,OACIvD,EAAAkF,cAAC9E,EAAA+E,OAAM,CACH5B,MAAOA,EACPqB,YAAaA,EACb/B,QAASf,KAAKe,SAEb,EAAG+B,YAAAA,EAAaQ,KAAAA,EAAMC,SAAAA,EAAUC,MAAAA,EAAOC,cAAAA,MACpCzD,KAAKuD,SAAWA,EAGZrF,EAAAkF,cAACpE,EAAS,CAAC0E,IAAKF,EAAOpC,UAAWpB,KAAKoB,WACnClD,EAAAkF,cAAC3E,EAAAkF,MAAK,CACFb,YAAaQ,OAAOpB,EAAYY,EAChC3B,OAAQA,EACRM,MAAOA,EACPO,UAAWA,EACXpC,QAASA,EACTC,QAASA,EACTiC,gBAAiBA,EACjBwB,KAAMA,EACNnD,kBAAmBH,KAAKG,kBACxBoD,SAAUA,EACVK,SAAU5D,KAAKK,gBAElBiD,EACGpF,EAAAkF,cAACK,EAAa,CACVV,UAAWA,EACX1D,WAtCT,KAwCSnB,EAAAkF,cAACjE,EAAW,CAACE,WAxCtB,KAyCanB,EAAAkF,cAAC5E,EAAAqF,UAAS,CACN9B,KAAMA,EACNL,KAAM1B,KAAKC,MAAMyB,KACjB9B,QAASA,EACTC,QAASA,EACTiE,SAAU9D,KAAKQ,aACfuD,OAAQ/D,KAAKO,WACbK,YAAaZ,KAAKY,YAClBC,YAAab,KAAKa,YAClBF,QAASX,KAAKW,UAElBzC,EAAAkF,cAAC7E,EAAAyF,KAAI,CACDhD,SAAUA,EACVgC,YAAaA,EACbC,iBAAkBA,EAClBC,WAAYA,EACZxB,KAAM1B,KAAKC,MAAMyB,KACjBD,MAAOA,EACPO,UAAWA,EACXb,OAAQA,EACRY,KAAMA,EACNnC,QAASA,EACTC,QAASA,EACTS,YAAaN,KAAKM,YAClBG,cAAeT,KAAKS,cACpBC,aAAcV,KAAKU,aACnBI,aAAcd,KAAKc,aACnB8C,SAAU5D,KAAKK,kBAK3BnC,EAAAkF,cAAC9D,EAAU,CAAC2E,KAAK,OAAOC,QAASX,OASrD7D,UACJyE,WAAW,KACPzF,EAAA0F,iBAEApE,KAAKqC,SAASrC,KAAKE,eACpB,GAGCR,UAAU2E,EAA2B5C,GACrCzB,KAAKC,MAAM6B,iBACX9B,KAAKqC,SAAS,CAAEP,iBAAiB,GAAS,KAClC9B,KAAKZ,MAAMkF,SACXtE,KAAKZ,MAAMkF,QAAQD,EAAO5C,KAMlC/B,WAAWgC,EAAwBa,GACvC,MAAMd,MAAEA,EAAAuB,YAAOA,EAAAuB,SAAaA,GAAavE,KAAKZ,MAEzC4D,IACDT,GAAS,GAGT7D,EAAA8F,UAAU/C,EAAOC,KAIjBa,GACAgC,EAAS7C,GAGb1B,KAAKqC,SAAS,CAAEP,gBAAiBb,QAAQS,MAGrChC,kBACJsC,EACAO,GAAS,GAETvC,KAAKqC,SAAS,CAAEL,UAAAA,GAAa,KACrBO,GACAvC,KAAK2C,gBAAWT,GAAW,KAK/BxC,gBACAM,KAAKuD,UACLvD,KAAKuD,WAET7E,EAAA0F,iBAEApE,KAAKsC,oBAAmB,GAGpB5C,YAAY+E,GAChB,MAAMhD,MAAEA,EAAAN,OAAOA,GAAWnB,KAAKZ,MAC/B,IAAIsC,EAAO,IAAIC,KAAK8C,GAEhBhD,IACAC,EAAOhD,EAAAgG,QAAQD,EAAKhD,EAAMkD,WAAYlD,EAAMmD,eAGhD,MAAM5C,EAAYtD,EAAAuD,WAAWP,EAAMP,GAEnCnB,KAAKqC,SAAS,CAAEX,KAAAA,EAAMM,UAAAA,IAGlBtC,aACJM,KAAKqC,SAAS,CAAEN,KAAM,SAGlBrC,eACJM,KAAKqC,SAAS,CAAEN,KAAM,WAGlBrC,cAAcgC,GAClB1B,KAAKqC,SAAS,CAAEX,KAAAA,EAAMK,KAAM,UAGxBrC,aAAagC,GACjB1B,KAAKqC,SAAS,CAAEX,KAAAA,EAAMK,KAAM,WAGxBrC,UACJM,KAAKqC,SAAS,CAAEX,KAAM1B,KAAKwB,mBAGvB9B,cACJ,MAAMgC,EAAO,IAAIC,KAAK3B,KAAKC,MAAMyB,MAEjCA,EAAKmD,SAASnD,EAAKoD,WAAa,GAEhC9E,KAAKqC,SAAS,CAAEX,KAAAA,IAGZhC,cACJ,MAAMgC,EAAO,IAAIC,KAAK3B,KAAKC,MAAMyB,MAEjCA,EAAKmD,SAASnD,EAAKoD,WAAa,GAEhC9E,KAAKqC,SAAS,CAAEX,KAAAA,IAGZhC,aAAaqF,GACjB,MAAM5D,OAAEA,GAAWnB,KAAKZ,MAClBqC,EAAQzB,KAAKZ,MAAMqC,OAAS,IAAIE,KAAK,cAE3C,GAAKoD,EAEE,CACH,MAAMC,EAAWD,EAAKE,MAAM,KACtBC,EAAUxG,EAAAgG,QACZjD,EACA0D,SAASH,EAAS,GAAI,IACtBG,SAASH,EAAS,GAAI,KAGpBhD,EAAYtD,EAAAuD,WAAWiD,EAAS/D,GAEtCnB,KAAKqC,SAAS,CAAEL,UAAAA,GAAa,IAAMhC,KAAK2C,WAAWuC,GAAS,SAX5DlF,KAAK2C,WAAWjE,EAAAmD,WAAWJ,IAAQ,IAxT7BjC,EAAA4F,aAA4C,CACtDjE,OAAQ,cAjBhBvC,EAAAY,cAAAA","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(/H|h|m|k|a|S|s/.test(props.format!))\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'month',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onToday = this.onToday.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 320;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<Date>\n                value={value}\n                placeholder={placeholder}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            <Value\n                                placeholder={open ? undefined : placeholder}\n                                format={format!}\n                                value={value}\n                                valueText={valueText}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowValidation={allowValidation}\n                                open={open}\n                                onChangeValueText={this.onChangeValueText}\n                                onToggle={onToggle}\n                                onSubmit={this.onValueSubmit}\n                            />\n                            {open ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper menuHeight={menuHeight}>\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onToday={this.onToday}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private onClose() {\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState);\n        }, 0);\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange(date: Date | undefined, commit: boolean): void {\n        const { value, showConfirm, onChange } = this.props;\n\n        if (!showConfirm) {\n            commit = true;\n        }\n\n        if (dateEqual(value, date)) {\n            return;\n        }\n\n        if (commit) {\n            onChange(date);\n        }\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(\n        valueText: string | undefined,\n        commit = false\n    ): void {\n        this.setState({ valueText }, () => {\n            if (commit) {\n                this.emitChange(undefined, true);\n            }\n        });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format!);\n\n        this.setState({ date, valueText });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onToday(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value), false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n"]}