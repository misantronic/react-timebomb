{"version":3,"sources":["src/index.tsx","src/menu/index.tsx","src/utils.ts","src/menu/time.tsx","src/number-input.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","onChangeFormatGroup","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","selectWeek","timeStep","onOpen","menuWidth","Math","max","MENU_WIDTH","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","onClick","MenuTitle","onMonth","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","newDate","map","v","e","target","HTMLDivElement","classList","contains","defaultProps","button_1","table_1","mobile_1","time_1","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","PureComponent","yearContainer","scrollToYear","delay","selected","querySelector","scrollIntoView","scrollBy","top","onYearContainer","onChangeMonth","monthNames","getMonthNames","now","fullYears","getDate","year","getFullYear","getDateConfig","newYear","setFullYear","enabled","setSeconds","getSeconds","setMinutes","setHours","currentYear","Array","fill","_","i","filter","obj","reverse","minYear","array","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","renderTime","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","month","str","GestureWrapper","MenuTable","subtractMonths","addMonths","MenuTime","topDivider","isValid","getAttribute","currentTarget","el","direction","moment_1","momentImport","moment","test","formatSplitExpr","dates","instance","toDate","formatIsActualNumber","validateFormatGroup","isFinite","int","parseInt","char","String","strLen","startsWith","ALLOWED_CHARS","addDays","num","add","subtract","val","stringFromCharCode","keyCode","charCode","floor","fromCharCode","includes","formatNumber","number","splitDate","split","group","joinDates","parts","strParts","part","HTMLElement","innerText","splittedFormat","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","sel","getSelection","empty","removeAllRanges","selectElement","caret","range","document","createRange","selectNodeContents","start","end","setStart","setEnd","addRange","getWeekOfYear","isoWeek","startOf","endOf","subtractDays","manipulateDate","isSame","inp","dateA","isSameOrAfter","context","attr","a","b","getTime","formatType","replaceSpaceWithNbsp","replace","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","DOT","COMMA","number_input_1","Divider","span","NumberInput","step","Steps","Step","button","InputContainer","Input","onFocusIn","onFocusOut","onStepUp","onStepDown","getDateValue","focused","console","log","onMouseEnter","onMouseLeave","data-react-timebomb-selectable","newValue","arrow_button_1","Flex","ClearButton","SmallButton","Placeholder","Icon","icon","META_KEYS","FORBIDDEN_KEYS","inputs","allSelected","formatGroup","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","formatGroups","reduce","memo","prevChar","substr","iconClass","hasFocus","some","allowTextSelection","forEach","focus","find","forceUpdate","ArrowButtonComp","ArrowButton","showPlaceholder","showClearer","timeOnly","data-role","contentEditable","g","separator","data-placeholder","data-separator","data-group","onDoubleClick","nextSibling","previousSibling","numericFormat","hasSelection","focusOffset","baseOffset","numericValue","preventDefault","HTMLSpanElement","isArrowUp","isNaN","dateParts","nextValue","valid","groupValue","metaKey","ctrlKey","firstInput","validatedChar","blur","parentNode","dataGroup","filledValue","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value-multi';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentClass<MenuContainerProps, any>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                    onClick={\n                                        mobile\n                                            ? this.onMobileMenuContainerClick\n                                            : undefined\n                                    }\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: Date, mode: FormatType): void {\n        const format = this.props.format!;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const newDate = isArray(value)\n                ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n                : setDate(value, time.getHours(), time.getMinutes());\n\n            const valueText = dateFormat(newDate, format);\n\n            this.setState({ mode, valueText }, () =>\n                this.emitChange(newDate, false)\n            );\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '../';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getAttribute,\n    isArray,\n    dateEqual,\n    addMonths,\n    subtractMonths\n} from '../utils';\nimport { Button } from '../button';\nimport { ReactTimebombDate, FormatType } from '../typings';\nimport { MenuTable } from './table';\nimport { GestureWrapper, GestureDirection } from './mobile';\nimport { MenuTime } from './time';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    timeStep: ReactTimebombProps['timeStep'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(date: Date, mode: FormatType): void;\n    onSubmit(): void;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0;\n    height: ${(props: { mobile?: boolean }) => (props.mobile ? '100' : 'auto')};\n    overflow: hidden;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 5px 0 10px;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private monthNames!: string[];\n\n    private get now(): Date {\n        return new Date();\n    }\n\n    private getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[this.props.selectedRange] : date)!;\n    }\n\n    private yearContainer: HTMLDivElement | null = null;\n\n    private get fullYears() {\n        const { value, minDate, maxDate } = this.props;\n        const valueDate = this.getDate(value);\n        const year = this.getDate(this.props.date).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, this.props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = this.now;\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onYearContainer = this.onYearContainer.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n\n        this.monthNames = getMonthNames(true);\n    }\n\n    public componentDidUpdate(prevProps: MenuProps) {\n        if (!dateEqual(prevProps.date, this.props.date)) {\n            this.scrollToYear(64);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { mode, mobile, showDate, showConfirm, showTime } = this.props;\n\n        if (showDate || showTime) {\n            switch (mode) {\n                case 'year':\n                case 'month':\n                    return (\n                        <MonthAndYearContainer mobile={mobile}>\n                            {this.renderMenuMonths()}\n                            {this.renderMenuYear()}\n                        </MonthAndYearContainer>\n                    );\n                case 'day':\n                case 'hour':\n                case 'minute':\n                case 'second':\n                    return (\n                        <MonthContainer mobile={mobile}>\n                            {showDate && this.renderMonth()}\n                            {showConfirm && this.renderConfirm()}\n                            {showTime && this.renderTime()}\n                        </MonthContainer>\n                    );\n            }\n        }\n\n        return null;\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                mobile={this.props.mobile}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { value, mobile } = this.props;\n        const valueDate = this.getDate(value);\n        const date = this.getDate(this.props.date);\n        const month = value && valueDate.getMonth();\n        const year = value && valueDate.getFullYear();\n\n        return (\n            <MonthsContainer mobile={mobile} className=\"months\">\n                {this.monthNames.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            mobile={this.props.mobile}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { mobile } = this.props;\n\n        if (mobile) {\n            return (\n                <GestureWrapper onChangeMonth={this.onChangeMonth}>\n                    <MenuTable\n                        date={subtractMonths(this.getDate(this.props.date), 1)}\n                        minDate={this.props.minDate}\n                        maxDate={this.props.maxDate}\n                        mobile={this.props.mobile}\n                        selectRange={this.props.selectRange}\n                        selectedRange={this.props.selectedRange}\n                        selectWeek={this.props.selectWeek}\n                        showCalendarWeek={this.props.showCalendarWeek}\n                        showConfirm={this.props.showConfirm}\n                        showTime={this.props.showTime}\n                        value={subtractMonths(\n                            this.getDate(this.props.value),\n                            1\n                        )}\n                        onSubmit={this.props.onSubmit}\n                        onSelectDay={this.props.onSelectDay}\n                    />\n                    <MenuTable\n                        date={this.props.date}\n                        minDate={this.props.minDate}\n                        maxDate={this.props.maxDate}\n                        mobile={this.props.mobile}\n                        selectRange={this.props.selectRange}\n                        selectedRange={this.props.selectedRange}\n                        selectWeek={this.props.selectWeek}\n                        showCalendarWeek={this.props.showCalendarWeek}\n                        showConfirm={this.props.showConfirm}\n                        showTime={this.props.showTime}\n                        value={this.props.value}\n                        onSubmit={this.props.onSubmit}\n                        onSelectDay={this.props.onSelectDay}\n                    />\n                    <MenuTable\n                        date={addMonths(this.getDate(this.props.date), 1)}\n                        minDate={this.props.minDate}\n                        maxDate={this.props.maxDate}\n                        mobile={this.props.mobile}\n                        selectRange={this.props.selectRange}\n                        selectedRange={this.props.selectedRange}\n                        selectWeek={this.props.selectWeek}\n                        showCalendarWeek={this.props.showCalendarWeek}\n                        showConfirm={this.props.showConfirm}\n                        showTime={this.props.showTime}\n                        value={addMonths(this.getDate(this.props.value), 1)}\n                        onSubmit={this.props.onSubmit}\n                        onSelectDay={this.props.onSelectDay}\n                    />\n                </GestureWrapper>\n            );\n        }\n\n        return (\n            <MenuTable\n                date={this.props.date}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                mobile={this.props.mobile}\n                selectRange={this.props.selectRange}\n                selectedRange={this.props.selectedRange}\n                selectWeek={this.props.selectWeek}\n                showCalendarWeek={this.props.showCalendarWeek}\n                showConfirm={this.props.showConfirm}\n                showTime={this.props.showTime}\n                value={this.props.value}\n                onSubmit={this.props.onSubmit}\n                onSelectDay={this.props.onSelectDay}\n            />\n        );\n    }\n\n    private renderTime(): React.ReactNode {\n        return (\n            <MenuTime\n                date={this.props.date}\n                timeStep={this.props.timeStep}\n                topDivider={this.props.showDate}\n                onChange={this.props.onSelectTime}\n            />\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isArray(validDate)\n                ? validDate.every(v => isEnabled('day', v, this.props))\n                : isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    mobile={this.props.mobile}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private scrollToYear = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (delay: number) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                if (this.yearContainer) {\n                    const selected = this.yearContainer.querySelector(\n                        '.selected'\n                    );\n\n                    if (selected) {\n                        selected.scrollIntoView();\n\n                        if (this.yearContainer.scrollBy) {\n                            this.yearContainer.scrollBy({ top: -10 });\n                        }\n                    }\n                }\n            }, delay);\n        };\n    })();\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        this.yearContainer = el;\n\n        this.scrollToYear(0);\n    }\n\n    private onChangeMonth(direction: GestureDirection) {\n        const { onSelectMonth } = this.props;\n        const date = this.getDate(this.props.date);\n\n        switch (direction) {\n            case 'next':\n                onSelectMonth(addMonths(date, 1));\n                break;\n            case 'prev':\n                onSelectMonth(subtractMonths(date, 1));\n                break;\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\nimport { ReactTimebombDate, FormatType } from './typings';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\n\nexport const formatSplitExpr = /[.|:|\\-|\\\\|_|\\s]/;\n\nexport function dateFormat(date: Date, format: string): string;\nexport function dateFormat(date: Date[], format: string): string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[] {\n    if (isArray(date)) {\n        return date.map(date => moment(date).format(format));\n    } else {\n        return moment(date).format(format);\n    }\n}\n\nexport function validateDate(\n    date: string | string[] | undefined,\n    format: string\n): ReactTimebombDate {\n    if (isArray(date)) {\n        const dates = date\n            .map(date => {\n                const instance = moment(date, format, true);\n\n                return instance.isValid() ? instance.toDate() : undefined;\n            })\n            .filter(d => Boolean(d)) as Date[];\n\n        return dates.length === 0 ? undefined : dates;\n    } else {\n        const instance = moment(date, format, true);\n\n        return instance.isValid() ? instance.toDate() : undefined;\n    }\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/^D/.test(format)) {\n        return 'day';\n    }\n\n    if (/^M/.test(format)) {\n        return 'month';\n    }\n\n    if (/^Y/.test(format)) {\n        return 'year';\n    }\n\n    if (/^H/.test(format)) {\n        return 'hour';\n    }\n\n    if (/^m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/^s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\nexport function formatIsActualNumber(format: string) {\n    // day / year\n    if (/D|Y|H|m|s/.test(format)) {\n        return true;\n    }\n\n    // month\n    if (format === 'M' || format === 'MM') {\n        return true;\n    }\n\n    return false;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n        const type = getFormatType(format);\n\n        switch (type) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nconst ALLOWED_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n    const char = String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n\n    if (ALLOWED_CHARS.includes(char)) {\n        return char;\n    }\n\n    return '';\n}\n\nexport function formatNumber(number: Number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    const formattedDate = dateFormat(date, format);\n\n    return formattedDate\n        .split(formatSplitExpr)\n        .filter(group => group && formatSplitExpr.test(group) === false);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplitExpr);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function selectElement(\n    el: HTMLElement | undefined,\n    caret?: number[]\n): void {\n    if (el) {\n        const range = document.createRange();\n        const sel = getSelection();\n\n        if (caret === undefined) {\n            range.selectNodeContents(el);\n        } else {\n            const [start, end] = caret;\n\n            range.setStart(el, start);\n            range.setEnd(el, end);\n        }\n\n        sel.removeAllRanges();\n        sel.addRange(range);\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract',\n    timeStep?: number\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractMinutes(date, timeStep || 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractSeconds(date, timeStep || 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function dateEqual(\n    dateA?: ReactTimebombDate,\n    dateB?: ReactTimebombDate,\n    considerTime = false\n) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    if (considerTime) {\n        if (isArray(dateA)) {\n            dateA = dateA.map(startOfDay);\n        } else {\n            dateA = startOfDay(dateA);\n        }\n\n        if (isArray(dateB)) {\n            dateB = dateB.map(startOfDay);\n        } else {\n            dateB = startOfDay(dateB);\n        }\n    }\n\n    if (isArray(dateA) && isArray(dateB)) {\n        return dateA.every((date, i) => {\n            const dBi = dateB![i];\n\n            if (date && dBi) {\n                return date.getTime() === dBi.getTime();\n            }\n\n            return false;\n        });\n    } else if (isArray(dateA) && dateB instanceof Date) {\n        return dateA.some(d => d.getTime() === (dateB as Date).getTime());\n    } else if (isArray(dateB) && dateA instanceof Date) {\n        return dateB.some(d => d.getTime() === (dateA as Date).getTime());\n    } else if (!isArray(dateA) && !isArray(dateB)) {\n        return dateA.getTime() === dateB.getTime();\n    }\n\n    return false;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function getWeekdayNames() {\n    return moment.weekdaysShort();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport function isDateFormat(format: string) {\n    return Boolean(/D|M|Y/.test(format));\n}\n\nexport function isTimeFormat(format: string) {\n    return Boolean(/H|h|m|k|a|S|s/.test(format));\n}\n\nexport function sortDates(a: Date, b: Date) {\n    return a.getTime() - b.getTime();\n}\n\nexport function isArray(val: any): val is any[] {\n    return Array.isArray(val);\n}\n\nexport function fillZero(value: string | number, formatType: FormatType) {\n    value = String(value);\n\n    switch (formatType) {\n        case 'day':\n            if (value === '1' || value === '2' || value === '3') {\n                return `0${value}`;\n            }\n            break;\n        case 'month':\n            if (value === '1') {\n                return `0${value}`;\n            }\n            break;\n    }\n\n    return undefined;\n}\n\nexport function replaceSpaceWithNbsp(str?: string) {\n    if (!str) {\n        return str;\n    }\n\n    return str.replace(' ', ' ');\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    DOT: 190,\n    COMMA: 188\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState, FormatType } from '../typings';\nimport { isArray } from '../utils';\nimport { ReactTimebombProps } from 'src';\nimport { NumberInput } from '../number-input';\n\nconst Container = styled.div`\n    padding: 0;\n    display: flex;\n    align-items: center;\n    margin: 0 auto;\n    width: 100%;\n    border-top: ${(props: { topDivider?: boolean }) =>\n        props.topDivider ? '1px solid #ccc' : 'none'};\n`;\n\nconst Divider = styled.span`\n    margin: 0 5px;\n    font-weight: bold;\n`;\n\ninterface MenuTimeProps {\n    date: ReactTimebombState['date'];\n    timeStep: ReactTimebombProps['timeStep'];\n    topDivider?: boolean;\n    onChange(date: Date, mode: FormatType): void;\n}\n\nexport class MenuTime extends React.PureComponent<MenuTimeProps> {\n    public render() {\n        const { date, timeStep, topDivider, onChange } = this.props;\n\n        if (isArray(date) || !date) {\n            return null;\n        }\n\n        return (\n            <Container topDivider={topDivider} className=\"react-timebomb-time\">\n                <NumberInput\n                    date={date}\n                    step={1}\n                    mode=\"hour\"\n                    onChange={onChange}\n                />\n                <Divider className=\"divider\">:</Divider>\n                <NumberInput\n                    date={date}\n                    step={timeStep}\n                    mode=\"minute\"\n                    onChange={onChange}\n                />\n            </Container>\n        );\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { FormatType } from './typings';\n\nconst Steps = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 24px;\n    height: 100%;\n    border-width: 0 1px;\n    border-style: solid;\n    border-color: #ccc;\n    visibility: hidden;\n`;\n\nconst Step = styled.button`\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    border: none;\n    flex: 1;\n    font-size: 8px;\n    color: #ccc;\n    cursor: pointer;\n    -webkit-appearance: none;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:hover {\n        background: #eee;\n        color: #000;\n    }\n`;\n\nconst InputContainer = styled.div`\n    position: relative;\n    flex: 1;\n    display: flex;\n\n    &:hover {\n        ${Steps} {\n            visibility: visible;\n        }\n    }\n\n    &:last-child {\n        ${Steps} {\n            border-right: none;\n        }\n    }\n`;\n\nconst Input = styled.input`\n    flex: 1;\n    padding: 0 25px 0 6px;\n    margin: 0;\n    width: 50%;\n    min-height: 32px;\n    text-align: center;\n    border: none;\n\n    // @see https://stackoverflow.com/a/4298216/1138860\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n        /* display: none; <- Crashes Chrome on hover */\n        -webkit-appearance: none;\n        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    &:focus {\n        background: #eee;\n\n        + ${Steps} {\n            visibility: visible;\n        }\n    }\n`;\n\ninterface NumberInputProps {\n    date: Date;\n    mode: FormatType;\n    step?: number;\n    onChange(date: Date, mode: FormatType): void;\n}\n\ninterface NumberInputState {\n    value?: any;\n    focused?: boolean;\n}\n\nexport class NumberInput extends React.PureComponent<\n    NumberInputProps,\n    NumberInputState\n> {\n    constructor(props: NumberInputProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onChange = this.onChange.bind(this);\n        this.onFocusIn = this.onFocusIn.bind(this);\n        this.onFocusOut = this.onFocusOut.bind(this);\n        this.onStepUp = this.onStepUp.bind(this);\n        this.onStepDown = this.onStepDown.bind(this);\n    }\n\n    public static defaultProps: Partial<NumberInputProps> = {\n        step: 1\n    };\n\n    public componentDidMount() {\n        const { date } = this.props;\n\n        if (date) {\n            this.setState({ value: this.getDateValue(date) });\n        }\n    }\n\n    public componentDidUpdate(\n        prevProps: NumberInputProps,\n        prevState: NumberInputState\n    ) {\n        const { date, mode, onChange } = this.props;\n        const { value, focused } = this.state;\n\n        if (date && prevProps.date.getTime() !== date.getTime()) {\n            this.setState({ value: this.getDateValue(date) });\n        }\n\n        if (prevState.value !== value && value !== '' && focused) {\n            const newDate = this.manipulateDate(value);\n\n            onChange(newDate, mode);\n\n            console.log('onChange()', { newDate, mode });\n        }\n    }\n\n    public render() {\n        const { step, mode } = this.props;\n        const value = this.state.value === 0 ? 0 : this.state.value || '';\n\n        return (\n            <InputContainer\n                className={`react-timebomb-number-input ${mode}`}\n                onMouseEnter={this.onFocusIn}\n                onMouseLeave={this.onFocusOut}\n            >\n                <Input\n                    data-react-timebomb-selectable\n                    type=\"number\"\n                    step={step}\n                    value={value}\n                    onChange={this.onChange}\n                    onFocus={this.onFocusIn}\n                />\n                <Steps>\n                    <Step\n                        data-react-timebomb-selectable\n                        tabIndex={-1}\n                        onClick={this.onStepUp}\n                    >\n                        ▲\n                    </Step>\n                    <Step\n                        data-react-timebomb-selectable\n                        tabIndex={-1}\n                        onClick={this.onStepDown}\n                    >\n                        ▼\n                    </Step>\n                </Steps>\n            </InputContainer>\n        );\n    }\n\n    private manipulateDate(value: string | number) {\n        const newDate = new Date(this.props.date);\n        const newValue = parseInt((value as any) || '0', 10);\n\n        switch (this.props.mode) {\n            case 'hour':\n                newDate.setHours(newValue);\n                break;\n            case 'minute':\n                newDate.setMinutes(newValue);\n                break;\n        }\n\n        return newDate;\n    }\n\n    private getDateValue(date: Date) {\n        switch (this.props.mode) {\n            case 'hour':\n                return date.getHours();\n            case 'minute':\n                return date.getMinutes();\n        }\n\n        return 0;\n    }\n\n    private onFocusIn() {\n        this.setState({ focused: true });\n    }\n\n    private onFocusOut() {\n        this.setState({ focused: false });\n    }\n\n    private onChange(e: React.SyntheticEvent<HTMLInputElement>) {\n        const { date } = this.props;\n        const { value } = e.currentTarget;\n\n        if (value === '') {\n            this.setState({ value });\n        } else if (date) {\n            const newDate = this.manipulateDate(value);\n\n            this.setState({ value: this.getDateValue(newDate) });\n        }\n    }\n\n    private onStepUp() {\n        const { date, step } = this.props;\n        const { value } = this.state;\n\n        if (date && value !== undefined) {\n            const newDate = this.manipulateDate(value + step!);\n\n            this.setState({ value: this.getDateValue(newDate) });\n        }\n    }\n\n    private onStepDown() {\n        const { date, step } = this.props;\n        const { value } = this.state;\n\n        if (date && value !== undefined) {\n            const newDate = this.manipulateDate(value - step!);\n\n            this.setState({ value: this.getDateValue(newDate) });\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled,\n    selectElement,\n    fillZero,\n    clearSelection,\n    formatSplitExpr,\n    formatIsActualNumber,\n    replaceSpaceWithNbsp\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { SmallButton } from './button';\nimport { ArrowButton } from './arrow-button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    timeStep: ReactTimebombProps['timeStep'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        setTimeout(() => {\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n                        const input = this.inputs[0];\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (input && allowTextSelection) {\n                            input.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            const [input] = this.inputs;\n\n                            if (input) {\n                                selectElement(input);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp disabled={disabled} open={open} />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}