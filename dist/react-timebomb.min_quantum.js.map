{"version":3,"sources":["src/menu.tsx","src/menu-day.tsx"],"names":["React","$fsx","r","styled_components_1","utils_1","button_1","menu_day_1","MonthAndYearContainer","default","div","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","props","selectWeek","css","exports","Menu","PureComponent","[object Object]","super","this","monthMatrixCache","Map","onSelectDay","bind","onSelectMonth","onSelectYear","now","Date","monthMatrix","date","dateMonth","getMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","push","addDays","set","fullYears","minDate","maxDate","year","currentYear","Array","fill","undefined","map","_","i","setFullYear","enabled","isEnabled","selected","filter","obj","reverse","minYear","array","currentDate","mode","showConfirm","createElement","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","ref","onYearContainer","className","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","value","months","getMonthNames","month","str","newDate","setMonth","disabled","showCalendarWeek","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","Day","day","valueText","format","validDate","validateDate","isValid","onSubmit","e","getAttribute","currentTarget","setTimeout","el","querySelector","scrollIntoView","scrollBy","top","Flex","StyledDay","current","today","state","dateEqual","updateCache","_prevProps","getDate","setState","isToday"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    getAttribute\n} from './utils';\nimport { Button } from './button';\nimport { Day } from './menu-day';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: 220px;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 46px;\n        border: none;\n        margin: 0 0 4px;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const { date } = this.props;\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { minDate, maxDate } = this.props;\n        const year = this.props.date.getFullYear();\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(minDate);\n\n                    date.setFullYear(currentYear + i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(maxDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                const date = new Date(maxDate);\n\n                date.setFullYear(i);\n\n                const enabled = isEnabled('year', date, this.props);\n                const selected = year === date.getFullYear();\n\n                array.push({ date, enabled, selected });\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showConfirm } = this.props;\n\n        switch (mode) {\n            case 'year':\n            case 'months':\n                return (\n                    <MonthAndYearContainer>\n                        {this.renderMenuMonths()}\n                        {this.renderMenuYear()}\n                    </MonthAndYearContainer>\n                );\n            case 'month':\n                return (\n                    <MonthContainer>\n                        {this.renderMonth()}\n                        {showConfirm && this.renderConfirm()}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { date, value } = this.props;\n        const months = getMonthNames(true);\n        const month = value && value.getMonth();\n        const year = value && value.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">{weekNum}</td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            day={date}\n                                            date={this.props.date}\n                                            value={this.props.value}\n                                            minDate={this.props.minDate}\n                                            maxDate={this.props.maxDate}\n                                            selectWeek={this.props.selectWeek}\n                                            onSelectDay={this.onSelectDay}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        if (el) {\n            const selected = el.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n                el.scrollBy({ top: -10 });\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport { getWeekOfYear, dateEqual, isEnabled, isToday } from './utils';\nimport styled from 'styled-components';\nimport { MenuProps } from './menu';\n\ninterface DayProps {\n    day: Date;\n    value: MenuProps['value'];\n    date: MenuProps['date'];\n    selectWeek: MenuProps['selectWeek'];\n    minDate: MenuProps['minDate'];\n    maxDate: MenuProps['maxDate'];\n    onSelectDay: MenuProps['onSelectDay'];\n}\n\ninterface DayState {\n    current: boolean;\n    enabled: boolean;\n    today: boolean;\n    selected: boolean;\n}\n\ninterface StyledDayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst StyledDay = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: StyledDayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: ${(props: StyledDayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: StyledDayProps) =>\n        props.selected ? 'bold' : 'normal'};\n    pointer-events: ${(props: StyledDayProps) =>\n        props.disabled ? 'none' : 'auto'};\n    user-select: none;\n    opacity: ${(props: StyledDayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: StyledDayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\nexport class Day extends React.PureComponent<DayProps, DayState> {\n    constructor(props: DayProps) {\n        super(props);\n\n        this.state = {\n            current: false,\n            enabled: true,\n            today: false,\n            selected: false\n        };\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n    }\n\n    private get selected() {\n        const { value, selectWeek, day } = this.props;\n\n        if (selectWeek && value) {\n            return getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return dateEqual(value, day);\n    }\n\n    public componentDidMount() {\n        this.updateCache();\n    }\n\n    public componentDidUpdate(_prevProps: DayProps) {\n        this.updateCache();\n    }\n\n    public render() {\n        const { day } = this.props;\n        const { selected, current, enabled, today } = this.state;\n\n        return (\n            <StyledDay\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={!enabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {day.getDate()}\n            </StyledDay>\n        );\n    }\n\n    private updateCache() {\n        const { day, date } = this.props;\n\n        this.setState({\n            current: day.getMonth() === date.getMonth(),\n            enabled: isEnabled('day', day, this.props),\n            today: isToday(day),\n            selected: this.selected\n        });\n    }\n\n    private onSelectDay() {\n        this.props.onSelectDay(this.props.day);\n    }\n}\n"]}