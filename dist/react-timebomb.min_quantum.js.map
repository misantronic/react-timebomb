{"version":3,"sources":["src/menu/index.tsx","src/utils.ts","src/menu/time.tsx","src/components/number-input.tsx","src/value/value.tsx"],"names":["React","$fsx","r","styled_components_1","button_1","utils_1","mobile_1","table_1","time_1","MonthAndYearContainer","default","div","props","mobile","MonthsContainer","MonthContainer","YearContainer","Confirm","MobileMenuTable","MenuTable","getDate","date","selectedRange","isArray","MenuMonths","value","monthNames","useState","getMonthNames","valueDate","month","getMonth","year","getFullYear","onSelectMonth","e","Date","getAttribute","currentTarget","setTimeout","createElement","className","map","str","i","newDate","setMonth","enabled","isEnabled","selected","Button","key","tabIndex","undefined","disabled","data-date","toISOString","onClick","MenuYear","minDate","maxDate","yearContainer","setYearContainer","scrollToYear","querySelector","scrollIntoView","scrollBy","top","onSelectYear","useEffect","ref","el","getDateConfig","newYear","setFullYear","setSeconds","getSeconds","setMinutes","getMinutes","setHours","getHours","setDate","currentYear","Array","fill","_","filter","obj","reverse","minYear","array","push","now","currentDate","getFullYears","fullYear","dateStr","MenuConfirm","valueText","format","validDate","validateDate","isValid","every","v","onSubmit","MonthWrapper","GestureWrapper","allowNext","addDays","endOfMonth","allowPrev","subtractDays","startOfMonth","onChangeMonth","direction","addMonths","subtractMonths","selectRange","showCalendarWeek","showConfirm","showTime","onSelectDay","onHoverDays","exports","Menu","mode","showDate","ConfirmComponent","confirmComponent","Object","assign","MenuTime","timeStep","topDivider","onChange","onSelectTime","onSubmitTime","onCancel","moment_1","momentImport","moment","dateFormat","getFormatType","test","formatSplitExpr","dates","instance","toDate","d","Boolean","length","is24HoursFormat","getMeridiem","matcher","match","formatIsActualNumber","validateFormatGroup","input","formatType","isFinite","int","parseInt","char","String","strLen","startsWith","validateFormatType","stringFromCharCode","parts","strParts","part","HTMLElement","innerText","val","dateA","startOfDay","dBi","dateB","getTime","valueA","valueB","monthsShort","replaceSpaceWithNbsp","replace","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","DOT","COMMA","number_input_1","Container","Divider","span","Meridiem","meridiem","NumberInput","step","mode24Hours","Steps","Step","button","InputContainer","Input","useRef","focused","setFocused","setValue","getDateValue","onFocusIn","onFocusOut","document","current","onMouseEnter","onMouseLeave","data-react-timebomb-selectable","type","formatNumberRaw","preventDefault","onFocus","onBlur","onKeyUp","keyCode","addHours","addMinutes","subtractHours","subtractMinutes","Flex","ClearButton","SmallButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","getIcon","DefaultClearComponent","META_KEYS","FORBIDDEN_KEYS","ValueComponent","PureComponent","[object Object]","super","this","inputs","timeout","clearTimeout","selectElement","state","allSelected","formatGroup","onChangeFormatGroup","onSearchRef","bind","onKeyDown","onDblClick","onClear","onToggle","formatGroups","split","reduce","memo","prevChar","substr","prevProps","open","allowValidation","hasFocus","some","inp","allowTextSelection","splitDate","forEach","focus","find","setState","forceUpdate","placeholder","arrowButtonId","iconComponent","ArrowButtonComp","arrowButtonComponent","ArrowButton","ClearComponent","clearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","data-role","innerRef","renderValue","id","LabelComponent","labelComponent","contentEditable","group","g","separator","hasFormatType","data-placeholder","data-separator","data-group","onDoubleClick","onChangeValueText","nextSibling","previousSibling","numericFormat","sel","getSelection","hasSelection","focusOffset","anchorOffset","numericValue","HTMLSpanElement","isArrowUp","isNaN","manipulateDate","dateParts","add","nextValue","valid","formatNumber","joinDates","groupValue","includes","metaKey","ctrlKey","firstInput","validatedChar","clearSelection","blur","parentNode","onAllSelect","target","dataGroup","filledValue","fillZero","stopPropagation","Value","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState } from '../';\nimport { Button } from '../components/button';\nimport { ReactTimebombDate, ReactTimebombMenuProps } from '../typings';\nimport {\n    addDays,\n    addMonths,\n    endOfMonth,\n    getAttribute,\n    getMonthNames,\n    isArray,\n    isEnabled,\n    startOfMonth,\n    subtractDays,\n    subtractMonths,\n    validateDate\n} from '../utils';\nimport { GestureDirection, GestureWrapper } from './mobile';\nimport { MenuTable } from './table';\nimport { MenuTime } from './time';\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0;\n    height: 100%;\n    overflow: hidden;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst MobileMenuTable = styled(MenuTable)`\n    width: 33.3%;\n`;\n\nfunction getDate(\n    date: ReactTimebombDate,\n    selectedRange: ReactTimebombState['selectedRange']\n) {\n    return (isArray(date) ? date[selectedRange] : date)!;\n}\n\nfunction MenuMonths(props: ReactTimebombMenuProps) {\n    const { value, mobile, selectedRange } = props;\n    const [monthNames] = React.useState(getMonthNames(true));\n    const valueDate = getDate(value, selectedRange);\n    const date = getDate(props.date, selectedRange);\n    const month = value && valueDate.getMonth();\n    const year = value && valueDate.getFullYear();\n\n    function onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onSelectMonth(date), 0);\n    }\n\n    return (\n        <MonthsContainer mobile={mobile} className=\"months\">\n            {monthNames.map((str, i) => {\n                const newDate = new Date(date);\n\n                newDate.setMonth(i);\n\n                const enabled = isEnabled('month', newDate, props);\n                const selected =\n                    month === newDate.getMonth() &&\n                    year === newDate.getFullYear();\n\n                return (\n                    <Button\n                        key={str}\n                        tabIndex={-1}\n                        className={selected ? 'selected' : undefined}\n                        selected={selected}\n                        disabled={!enabled}\n                        mobile={props.mobile}\n                        data-date={newDate.toISOString()}\n                        onClick={onSelectMonth}\n                    >\n                        {str}\n                    </Button>\n                );\n            })}\n        </MonthsContainer>\n    );\n}\n\nfunction MenuYear(props: ReactTimebombMenuProps) {\n    const { value, minDate, maxDate } = props;\n    const [\n        yearContainer,\n        setYearContainer\n    ] = React.useState<HTMLDivElement | null>(null);\n\n    React.useEffect(scrollToYear, [props.date]);\n\n    function scrollToYear() {\n        if (yearContainer) {\n            const selected = yearContainer.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n\n                if (yearContainer.scrollBy) {\n                    yearContainer.scrollBy({ top: -10 });\n                }\n            }\n        }\n    }\n\n    function getFullYears() {\n        const valueDate = getDate(value, props.selectedRange);\n        const year = getDate(props.date, props.selectedRange).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = new Date();\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    function onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onSelectYear(date), 0);\n    }\n\n    function onYearContainer(el: HTMLDivElement | null) {\n        setYearContainer(el);\n        scrollToYear();\n    }\n\n    return (\n        <YearContainer ref={onYearContainer} className=\"years\">\n            {getFullYears()\n                .map(({ date, selected }) => {\n                    const fullYear = date.getFullYear();\n                    const dateStr = date.toISOString();\n\n                    return (\n                        <Button\n                            key={dateStr}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            mobile={props.mobile}\n                            data-date={dateStr}\n                            onClick={onSelectYear}\n                        >\n                            {fullYear}\n                        </Button>\n                    );\n                })\n                .reverse()}\n        </YearContainer>\n    );\n}\n\nfunction MenuConfirm(props: ReactTimebombMenuProps) {\n    const { valueText, format } = props;\n    const validDate = validateDate(valueText, format);\n    const isValid = validDate\n        ? isArray(validDate)\n            ? validDate.every(v => isEnabled('day', v, props))\n            : isEnabled('day', validDate, props)\n        : false;\n\n    return (\n        <Confirm>\n            <Button\n                tabIndex={-1}\n                disabled={!isValid}\n                mobile={props.mobile}\n                onClick={() => props.onSubmit()}\n            >\n                Ok\n            </Button>\n        </Confirm>\n    );\n}\n\nfunction MonthWrapper(props: ReactTimebombMenuProps) {\n    const { minDate, maxDate, mobile } = props;\n\n    function allowPrev() {\n        let date = props.date;\n\n        if (!minDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (subtractDays(startOfMonth(date), 1) < minDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function allowNext() {\n        let date = props.date;\n\n        if (!maxDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (addDays(endOfMonth(date), 1) > maxDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function onChangeMonth(direction: GestureDirection) {\n        const { onChangeMonth } = props;\n        const date = getDate(props.date, props.selectedRange);\n\n        switch (direction) {\n            case 'next':\n                onChangeMonth(addMonths(date, 1));\n                break;\n            case 'prev':\n                onChangeMonth(subtractMonths(date, 1));\n                break;\n        }\n    }\n\n    if (mobile) {\n        return (\n            <GestureWrapper\n                allowNext={allowNext()}\n                allowPrev={allowPrev()}\n                onChangeMonth={onChangeMonth}\n            >\n                <MobileMenuTable\n                    date={subtractMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={subtractMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={props.date}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={props.value}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={addMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={addMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n            </GestureWrapper>\n        );\n    }\n\n    return (\n        <MenuTable\n            date={props.date}\n            minDate={props.minDate}\n            maxDate={props.maxDate}\n            mobile={props.mobile}\n            selectRange={props.selectRange}\n            selectedRange={props.selectedRange}\n            showCalendarWeek={props.showCalendarWeek}\n            showConfirm={props.showConfirm}\n            showTime={props.showTime}\n            value={props.value}\n            onSubmit={props.onSubmit}\n            onSelectDay={props.onSelectDay}\n            onHoverDays={props.onHoverDays}\n        />\n    );\n}\n\nexport function Menu(props: ReactTimebombMenuProps) {\n    const { mode, mobile, showDate, showConfirm, showTime } = props;\n    const ConfirmComponent = props.confirmComponent || MenuConfirm;\n\n    if (showDate || showTime) {\n        switch (mode) {\n            case 'year':\n            case 'month':\n                return (\n                    <MonthAndYearContainer mobile={mobile}>\n                        <MenuMonths {...props} />\n                        <MenuYear {...props} />\n                    </MonthAndYearContainer>\n                );\n            case 'day':\n            case 'hour':\n            case 'minute':\n            case 'second':\n                return (\n                    <MonthContainer>\n                        {showDate && <MonthWrapper {...props} />}\n                        {showTime && (\n                            <MenuTime\n                                date={props.date}\n                                timeStep={props.timeStep}\n                                topDivider={props.showDate}\n                                format={props.format}\n                                onChange={props.onSelectTime}\n                                onSubmit={props.onSubmitTime}\n                                onCancel={props.onSubmitTime}\n                            />\n                        )}\n                        {showConfirm && <ConfirmComponent {...props} />}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    return null;\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\nimport { ReactTimebombDate, FormatType } from './typings';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\n\nexport const formatSplitExpr = /[.|:|\\-|\\\\|_|\\/|\\s]/;\n\nexport function dateFormat(date: Date, format: string): string;\nexport function dateFormat(date: Date[], format: string): string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[] {\n    if (isArray(date)) {\n        return date.map(date => moment(date).format(format));\n    } else {\n        return moment(date).format(format);\n    }\n}\n\nexport function validateDate(\n    date: string | string[] | undefined,\n    format: string\n): ReactTimebombDate {\n    if (isArray(date)) {\n        const dates = date\n            .map(date => {\n                const instance = moment(date, format, true);\n\n                return instance.isValid() ? instance.toDate() : undefined;\n            })\n            .filter(d => Boolean(d)) as Date[];\n\n        return dates.length === 0 ? undefined : dates;\n    } else {\n        const instance = moment(date, format, true);\n\n        return instance.isValid() ? instance.toDate() : undefined;\n    }\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/^D/.test(format)) {\n        return 'day';\n    }\n\n    if (/^M/.test(format)) {\n        return 'month';\n    }\n\n    if (/^Y/.test(format)) {\n        return 'year';\n    }\n\n    if (/^h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/^m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/^s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\nexport function is24HoursFormat(format?: string): boolean {\n    if (!format) {\n        return false;\n    }\n\n    return /H|k/.test(format);\n}\n\nexport function getMeridiem(format?: string) {\n    if (!format) {\n        return undefined;\n    }\n\n    const matcher = format.match(/\\s+([aAp])$/);\n\n    if (matcher) {\n        return matcher[1];\n    }\n\n    return undefined;\n}\n\nexport function formatIsActualNumber(format: string) {\n    // day / year\n    if (/D|Y|H|h|m|s/.test(format)) {\n        return true;\n    }\n\n    // month\n    if (format === 'M' || format === 'MM') {\n        return true;\n    }\n\n    return false;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    const formatType = getFormatType(format);\n\n    return validateFormatType(input, formatType);\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatType(\n    input: string | number,\n    formatType?: FormatType\n) {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n\n        switch (formatType) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nconst ALLOWED_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n    const char = String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n\n    if (ALLOWED_CHARS.includes(char)) {\n        return char;\n    }\n\n    return '';\n}\n\nexport function formatNumber(number: number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function formatNumberRaw(number: number): string {\n    if (number <= 9) {\n        return `0${Number(number) || 0}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    const formattedDate = dateFormat(date, format);\n\n    return formattedDate\n        .split(formatSplitExpr)\n        .filter(group => group && formatSplitExpr.test(group) === false);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplitExpr);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel) {\n        if (sel.empty) {\n            // Chrome\n            sel.empty();\n        } else if (sel.removeAllRanges) {\n            // Firefox\n            sel.removeAllRanges();\n        }\n    }\n}\n\nexport function selectElement(\n    el: HTMLElement | undefined,\n    caret?: number[]\n): void {\n    if (el) {\n        const range = document.createRange();\n        const sel = getSelection();\n\n        if (caret === undefined) {\n            range.selectNodeContents(el);\n        } else {\n            const [start, end] = caret;\n\n            range.setStart(el, start);\n            range.setEnd(el, end);\n        }\n\n        if (sel) {\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract',\n    timeStep?: number\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractMinutes(date, timeStep || 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractSeconds(date, timeStep || 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function isBetween(\n    date: Date,\n    cmpDateA?: Date,\n    cmpDateB?: Date,\n    context: momentImport.unitOfTime.StartOf = 'day'\n) {\n    return moment(date).isBetween(cmpDateA, cmpDateB, context, '[]');\n}\n\nexport function dateEqual(\n    dateA?: ReactTimebombDate,\n    dateB?: ReactTimebombDate,\n    considerTime = false\n) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    if (considerTime) {\n        if (isArray(dateA)) {\n            dateA = dateA.map(startOfDay);\n        } else {\n            dateA = startOfDay(dateA);\n        }\n\n        if (isArray(dateB)) {\n            dateB = dateB.map(startOfDay);\n        } else {\n            dateB = startOfDay(dateB);\n        }\n    }\n\n    if (isArray(dateA) && isArray(dateB)) {\n        return dateA.every((date, i) => {\n            const dBi = dateB![i];\n\n            if (date && dBi) {\n                return date.getTime() === dBi.getTime();\n            }\n\n            return false;\n        });\n    } else if (isArray(dateA) && dateB instanceof Date) {\n        return dateA.some(d => d.getTime() === (dateB as Date).getTime());\n    } else if (isArray(dateB) && dateA instanceof Date) {\n        return dateB.some(d => d.getTime() === (dateA as Date).getTime());\n    } else if (!isArray(dateA) && !isArray(dateB)) {\n        return dateA.getTime() === dateB.getTime();\n    }\n\n    return false;\n}\n\nexport function stringEqual(\n    valueA?: string | string[],\n    valueB?: string | string[]\n): boolean {\n    if (valueA === valueB) {\n        return true;\n    }\n\n    if (!valueA || !valueB) {\n        return false;\n    }\n\n    if (isArray(valueA) && isArray(valueB) && valueA.length === valueB.length) {\n        return valueA.every((val, i) => val === valueB[i]);\n    }\n\n    return false;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function getWeekdayNames() {\n    return moment.weekdaysShort();\n}\n\nexport function isEnabled(\n    context: momentImport.unitOfTime.StartOf,\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return isBetween(date, minDate, maxDate, context);\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport function isDateFormat(format: string) {\n    return Boolean(/D|M|Y/.test(format));\n}\n\nexport function isTimeFormat(format: string) {\n    return Boolean(/H|h|m|k|a|S|s/.test(format));\n}\n\nexport function sortDates(a: Date, b: Date) {\n    return a.getTime() - b.getTime();\n}\n\nexport function isArray(val: any): val is any[] {\n    return Array.isArray(val);\n}\n\nexport function fillZero(value: string | number, formatType: FormatType) {\n    value = String(value);\n\n    switch (formatType) {\n        case 'day':\n            if (value === '1' || value === '2' || value === '3') {\n                return `0${value}`;\n            }\n            break;\n        case 'month':\n            if (value === '1') {\n                return `0${value}`;\n            }\n            break;\n    }\n\n    return undefined;\n}\n\nexport function replaceSpaceWithNbsp(str?: string) {\n    if (!str) {\n        return str;\n    }\n\n    return str.replace(/ /g, ' ');\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    DOT: 190,\n    COMMA: 188\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombProps, ReactTimebombState, FormatType } from '../typings';\nimport { isArray, dateFormat, getMeridiem, is24HoursFormat } from '../utils';\nimport { NumberInput } from '../components/number-input';\n\nconst Container = styled.div`\n    padding: 0;\n    display: flex;\n    align-items: center;\n    margin: 0 auto;\n    width: 100%;\n    border-top: ${(props: { topDivider?: boolean }) =>\n        props.topDivider ? '1px solid #ccc' : 'none'};\n\n    &:not(:last-child) {\n        border-bottom: 1px solid #ccc;\n    }\n`;\n\nconst Divider = styled.span`\n    margin: 0 5px;\n    font-weight: bold;\n`;\n\nconst Meridiem = styled.span`\n    margin: 0 10px;\n`;\n\ninterface MenuTimeProps {\n    date: ReactTimebombState['date'];\n    timeStep: ReactTimebombProps['timeStep'];\n    topDivider?: boolean;\n    format?: string;\n    onChange(date: Date, mode: FormatType): void;\n    onSubmit(date: Date, mode: FormatType): void;\n    onCancel(date: undefined, mode: FormatType): void;\n}\n\nexport function MenuTime(props: MenuTimeProps) {\n    const { date, timeStep, topDivider, onChange, onSubmit, onCancel } = props;\n    const meridiem = getMeridiem(props.format);\n\n    if (isArray(date) || !date) {\n        return null;\n    }\n\n    return (\n        <Container topDivider={topDivider} className=\"react-timebomb-time\">\n            <NumberInput\n                date={date}\n                step={1}\n                mode=\"hour\"\n                mode24Hours={is24HoursFormat(props.format)}\n                onChange={onChange}\n                onSubmit={onSubmit}\n                onCancel={onCancel}\n            />\n            <Divider className=\"divider\">:</Divider>\n            <NumberInput\n                date={date}\n                step={timeStep}\n                mode=\"minute\"\n                onChange={onChange}\n                onSubmit={onSubmit}\n                onCancel={onCancel}\n            />\n            {meridiem && (\n                <Meridiem className=\"meridiem\">\n                    {dateFormat(date, meridiem)}\n                </Meridiem>\n            )}\n        </Container>\n    );\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { FormatType } from '../typings';\nimport {\n    formatNumberRaw,\n    keys,\n    addMinutes,\n    addHours,\n    subtractHours,\n    subtractMinutes,\n    dateFormat\n} from '../utils';\n\nconst Steps = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 24px;\n    height: 100%;\n    border-width: 0 1px;\n    border-style: solid;\n    border-color: #ccc;\n    visibility: hidden;\n`;\n\nconst Step = styled.button`\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    border: none;\n    flex: 1;\n    font-size: 8px;\n    color: #ccc;\n    cursor: pointer;\n    -webkit-appearance: none;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:hover {\n        background: #eee;\n        color: #000;\n    }\n`;\n\nconst InputContainer = styled.div`\n    position: relative;\n    flex: 1;\n    display: flex;\n\n    &:hover {\n        ${Steps} {\n            visibility: visible;\n        }\n    }\n\n    &:last-child {\n        ${Steps} {\n            border-right: none;\n        }\n    }\n`;\n\nconst Input = styled.input`\n    flex: 1;\n    padding: 0 25px 0 6px;\n    margin: 0;\n    width: 50%;\n    min-height: 32px;\n    text-align: center;\n    border: none;\n\n    // @see https://stackoverflow.com/a/4298216/1138860\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n        /* display: none; <- Crashes Chrome on hover */\n        -webkit-appearance: none;\n        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    &:focus {\n        background: #eee;\n\n        + ${Steps} {\n            visibility: visible;\n        }\n    }\n`;\n\ninterface NumberInputProps {\n    date: Date;\n    mode: FormatType;\n    mode24Hours?: boolean;\n    step?: number;\n    onChange(date: Date, mode: FormatType): void;\n    onSubmit(date: Date, mode: FormatType): void;\n    onCancel(date: undefined, mode: FormatType): void;\n}\n\nexport function NumberInput(props: NumberInputProps) {\n    const { date, step, mode, mode24Hours, onCancel, onSubmit } = props;\n    const ref = React.useRef<HTMLInputElement | null>(null);\n    const [focused, setFocused] = React.useState(false);\n    const [value, setValue] = React.useState<number | string | undefined>(\n        getDateValue(date)\n    );\n\n    React.useEffect(() => {\n        setValue(getDateValue(props.date));\n    }, [date.getTime()]);\n\n    React.useEffect(() => {\n        if (value && focused) {\n            const newDate = new Date(date);\n\n            props.onChange(newDate, mode);\n        }\n    }, [value]);\n\n    function getDateValue(date: Date) {\n        switch (mode) {\n            case 'hour':\n                return dateFormat(date, mode24Hours ? 'H' : 'h');\n            case 'minute':\n                return date.getMinutes();\n        }\n\n        return 0;\n    }\n\n    function getRenderedValue() {\n        if (focused) {\n            return value;\n        } else {\n            return isFinite(value as any) ? formatNumberRaw(value as any) : '';\n        }\n    }\n\n    function onFocusIn() {\n        setFocused(true);\n    }\n\n    function onFocusOut() {\n        if (document.querySelector(':focus') !== ref.current) {\n            setFocused(false);\n        }\n    }\n\n    function onChange(e: React.SyntheticEvent<HTMLInputElement>) {\n        const { value } = e.currentTarget;\n\n        if (value.length > 2) {\n            e.preventDefault();\n            return;\n        }\n\n        if (value === '') {\n            setValue(value);\n        } else if (date) {\n            const newDate = new Date(date);\n\n            setValue(getDateValue(newDate));\n        }\n    }\n\n    function onStepUp() {\n        if (date) {\n            const newDate = (() => {\n                switch (mode) {\n                    case 'hour':\n                        return addHours(date, 1);\n                    case 'minute':\n                        return addMinutes(date, step!);\n                }\n\n                return undefined;\n            })();\n\n            if (newDate) {\n                props.onChange(newDate, mode);\n            }\n        }\n    }\n\n    function onStepDown() {\n        if (date) {\n            const newDate = (() => {\n                switch (mode) {\n                    case 'hour':\n                        return subtractHours(date, 1);\n                    case 'minute':\n                        return subtractMinutes(date, step!);\n                }\n\n                return undefined;\n            })();\n\n            if (newDate) {\n                props.onChange(newDate, mode);\n            }\n        }\n    }\n\n    function onKeyUp(e: React.KeyboardEvent<HTMLInputElement>) {\n        switch (e.keyCode) {\n            case keys.ENTER:\n                onSubmit(date, mode);\n                break;\n            case keys.ESC:\n                onCancel(undefined, mode);\n                break;\n        }\n    }\n\n    return (\n        <InputContainer\n            className={`react-timebomb-number-input ${mode}`}\n            onMouseEnter={onFocusIn}\n            onMouseLeave={onFocusOut}\n        >\n            <Input\n                data-react-timebomb-selectable\n                type=\"number\"\n                ref={ref}\n                step={step}\n                value={getRenderedValue()}\n                onChange={onChange}\n                onFocus={onFocusIn}\n                onBlur={onFocusOut}\n                onKeyUp={onKeyUp}\n            />\n            <Steps>\n                <Step\n                    data-react-timebomb-selectable\n                    tabIndex={-1}\n                    onClick={onStepUp}\n                >\n                    ▲\n                </Step>\n                <Step\n                    data-react-timebomb-selectable\n                    tabIndex={-1}\n                    onClick={onStepDown}\n                >\n                    ▼\n                </Step>\n            </Steps>\n        </InputContainer>\n    );\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton, SmallButton } from '../components/button';\nimport {\n    ClearComponentProps,\n    IconProps,\n    ReactTimebombValueProps\n} from '../typings';\nimport {\n    clearSelection,\n    fillZero,\n    formatIsActualNumber,\n    formatNumber,\n    formatSplitExpr,\n    getAttribute,\n    getFormatType,\n    isEnabled,\n    joinDates,\n    keys,\n    manipulateDate,\n    replaceSpaceWithNbsp,\n    selectElement,\n    splitDate,\n    stringFromCharCode,\n    validateFormatGroup\n} from '../utils';\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = (props: ClearComponentProps) => (\n    <ClearButton\n        className=\"react-timebomb-clearer\"\n        tabIndex={-1}\n        disabled={props.disabled}\n        onClick={props.onClick}\n    >\n        <ClearButtonX>×</ClearButtonX>\n    </ClearButton>\n);\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nclass ValueComponent extends React.PureComponent<\n    ReactTimebombValueProps,\n    ValueState\n> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ReactTimebombValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ReactTimebombValueProps): void {\n        setTimeout(() => {\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n                        const input = this.inputs[0];\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (input && allowTextSelection) {\n                            input.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            const [input] = this.inputs;\n\n                            if (input) {\n                                selectElement(input);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                ref={this.props.innerRef}\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearComponent\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        />\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const LabelComponent = this.props.labelComponent;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...this.props} />;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n                        const hasFormatType = Boolean(getFormatType(group));\n                        const placeholder = hasFormatType ? group : undefined;\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled || !hasFormatType}\n                                data-placeholder={placeholder}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = sel\n            ? Boolean(sel.focusOffset - sel.anchorOffset)\n            : false;\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n\nexport const Value = React.forwardRef(\n    (props: ReactTimebombValueProps, ref: React.Ref<HTMLDivElement>) => (\n        <ValueComponent innerRef={ref} {...props} />\n    )\n);\n"]}