{"version":3,"sources":["src/menu.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","utils_1","button_1","menu_day_1","MonthAndYearContainer","default","div","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","props","selectWeek","css","exports","Menu","PureComponent","[object Object]","super","this","yearContainer","monthMatrixCache","Map","scrollToYear","timeout","delay","clearTimeout","setTimeout","selected","querySelector","scrollIntoView","scrollBy","top","state","onSelectDay","bind","onSelectMonth","onSelectYear","onYearContainer","onDayMouseEnter","onDayMouseLeave","weekdayNames","getWeekdayNames","monthNames","getMonthNames","now","Date","date","isArray","selectedRange","monthMatrix","getDate","dateMonth","getMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","push","addDays","set","fullYears","value","minDate","maxDate","valueDate","year","getDateConfig","newYear","setFullYear","enabled","isEnabled","setSeconds","getSeconds","setMinutes","getMinutes","setHours","getHours","setDate","setMonth","currentYear","Array","fill","undefined","map","_","i","filter","obj","reverse","minYear","array","currentDate","prevProps","dateEqual","mode","showDate","showConfirm","createElement","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","ref","className","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","month","str","newDate","disabled","showCalendarWeek","hoverDay","sun","mon","tue","wed","thu","fri","sat","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","WeekNum","day","Day","selectRange","showTime","onMouseEnter","onMouseLeave","valueText","format","validDate","validateDate","isValid","every","v","onSubmit","e","getAttribute","currentTarget","el","setState","arrow_button_1","Flex","Container","Input","span","ClearButton","SmallButton","Placeholder","Icon","icon","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","Value","inputs","onFocus","input","selectElement","allSelected","formatGroup","onChangeFormatGroup","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","onChange","onClear","onToggle","formatGroups","split","reduce","memo","char","prevChar","length","substr","focused","document","iconClass","open","some","inp","parts","splitDate","forEach","innerText","focus","find","getFormatType","forceUpdate","placeholder","ArrowButtonComp","arrowButtonComponent","ArrowButton","showPlaceholder","showClearer","timeOnly","data-role","renderValue","group","separator","data-react-timebomb-selectable","contentEditable","data-placeholder","data-separator","data-group","onDoubleClick","onChangeValueText","allowValidation","nextSibling","previousSibling","sel","getSelection","hasSelection","Boolean","focusOffset","baseOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","manipulateDate","shiftKey","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","blur","parentNode","onAllSelect","target","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    getAttribute,\n    isArray,\n    dateEqual,\n    getWeekdayNames\n} from './utils';\nimport { Button } from './button';\nimport { Day, WeekNum } from './menu-day';\nimport { ReactTimebombDate } from './typings';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface MenuState {\n    hoverDay?: Date;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: 220px;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 46px;\n        border: none;\n        margin: 0 0 4px;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps, MenuState> {\n    private weekdayNames!: string[];\n    private monthNames!: string[];\n\n    private get now(): Date {\n        return new Date();\n    }\n\n    private getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[this.props.selectedRange] : date)!;\n    }\n\n    private yearContainer: HTMLDivElement | null = null;\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const date = this.getDate(this.props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { value, minDate, maxDate } = this.props;\n        const valueDate = this.getDate(value);\n        const year = this.getDate(this.props.date).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, this.props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = this.now;\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onYearContainer = this.onYearContainer.bind(this);\n        this.onDayMouseEnter = this.onDayMouseEnter.bind(this);\n        this.onDayMouseLeave = this.onDayMouseLeave.bind(this);\n\n        this.weekdayNames = getWeekdayNames();\n        this.monthNames = getMonthNames(true);\n    }\n\n    public componentDidUpdate(prevProps: MenuProps) {\n        if (!dateEqual(prevProps.date, this.props.date)) {\n            this.scrollToYear(64);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showDate, showConfirm } = this.props;\n\n        if (showDate) {\n            switch (mode) {\n                case 'year':\n                case 'month':\n                    return (\n                        <MonthAndYearContainer>\n                            {this.renderMenuMonths()}\n                            {this.renderMenuYear()}\n                        </MonthAndYearContainer>\n                    );\n                case 'day':\n                    return (\n                        <MonthContainer>\n                            {this.renderMonth()}\n                            {showConfirm && this.renderConfirm()}\n                        </MonthContainer>\n                    );\n            }\n        }\n\n        return null;\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { value } = this.props;\n        const valueDate = this.getDate(value);\n        const date = this.getDate(this.props.date);\n        const month = value && valueDate.getMonth();\n        const year = value && valueDate.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {this.monthNames.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek } = this.props;\n        const { hoverDay } = this.state;\n        const [sun, mon, tue, wed, thu, fri, sat] = this.weekdayNames;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>{mon}</th>\n                        <th>{tue}</th>\n                        <th>{wed}</th>\n                        <th>{thu}</th>\n                        <th>{fri}</th>\n                        <th>{sat}</th>\n                        <th>{sun}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">\n                                        <WeekNum\n                                            day={dates[0]}\n                                            onClick={this.onSelectDay}\n                                        >\n                                            {weekNum}\n                                        </WeekNum>\n                                    </td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            day={date}\n                                            hoverDay={hoverDay}\n                                            date={this.props.date}\n                                            value={this.props.value}\n                                            minDate={this.props.minDate}\n                                            maxDate={this.props.maxDate}\n                                            selectWeek={this.props.selectWeek}\n                                            selectRange={this.props.selectRange}\n                                            showTime={this.props.showTime}\n                                            onSelectDay={this.onSelectDay}\n                                            onMouseEnter={this.onDayMouseEnter}\n                                            onMouseLeave={this.onDayMouseLeave}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isArray(validDate)\n                ? validDate.every(v => isEnabled('day', v, this.props))\n                : isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private scrollToYear = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (delay: number) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                if (this.yearContainer) {\n                    const selected = this.yearContainer.querySelector(\n                        '.selected'\n                    );\n\n                    if (selected) {\n                        selected.scrollIntoView();\n                        this.yearContainer.scrollBy({ top: -10 });\n                    }\n                }\n            }, delay);\n        };\n    })();\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        this.yearContainer = el;\n\n        this.scrollToYear(0);\n    }\n\n    private onDayMouseEnter(day: Date) {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: day });\n        }\n    }\n\n    private onDayMouseLeave() {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: undefined });\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled,\n    selectElement\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { SmallButton } from './button';\nimport { ArrowButton } from './arrow-button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format, mode } = this.props;\n        const hasFocus = this.inputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.inputs[0];\n\n                    this.inputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const [input] = this.inputs;\n\n                    if (input) {\n                        selectElement(input);\n                    }\n                }\n            }\n        }\n\n        if (open && prevProps.mode !== mode && !this.state.allSelected) {\n            const input = this.inputs.find(el => {\n                const format = getAttribute(el, 'data-group');\n                const type = getFormatType(format);\n\n                return type === mode;\n            });\n\n            selectElement(input);\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n        }\n\n        if (open && prevProps.value && !value) {\n            this.inputs.forEach(input => (input.innerText = ''));\n        }\n\n        if (!open) {\n            this.setState({ allSelected: false });\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp disabled={disabled} open={open} />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={!disabled}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = e.shiftKey ? 10 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        // TODO: this doesn't work quite how suppossed to\n        // if (this.state.allSelected) {\n        //     const char = stringFromCharCode(e.keyCode);\n        //     this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n        //     this.inputs[0].innerText = char;\n        // }\n\n        // validate group\n        if (!hasSelection && innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}