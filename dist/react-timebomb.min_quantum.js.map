{"version":3,"sources":["src/value.tsx"],"names":["React","$fsx","r","styled_components_1","utils_1","button_1","exports","Flex","default","div","Container","Input","span","ArrowButton","Button","ClearButton","Placeholder","Icon","props","icon","WHITELIST_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","Value","PureComponent","[object Object]","super","this","searchInputs","state","onSearchRef","bind","onKeyDown","onKeyUp","onFocus","onClick","onBlur","onChange","onClear","onToggle","formatGroups","format","split","reduce","memo","char","prevChar","length","substr","focused","document","querySelector","iconClass","showTime","showDate","prevProps","open","value","some","inp","parts","splitDate","input","forEach","i","innerText","focus","selectText","placeholder","showPlaceholder","timeOnly","createElement","data-role","className","renderValue","tabIndex","map","group","separator","contentEditable","data-placeholder","data-separator","key","data-group","ref","data-react-timebomb-selectable","el","range","createRange","sel","getSelection","selectNodeContents","removeAllRanges","addRange","push","e","onChangeValueText","allowValidation","currentTarget","nextSibling","previousSibling","hasSelection","Boolean","focusOffset","baseOffset","numericValue","parseInt","keyCode","ENTER","ESC","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatGroup","getAttribute","formatType","getFormatType","direction","newDate","manipulateDate","shiftKey","isEnabled","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataValue","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","onSubmit","blur","setAttribute","target","currentFormatGroup","setState","fillZero","setTimeout","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { Button } from './button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    currentFormatGroup?: string;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nexport const ArrowButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport const ClearButton = styled(ArrowButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.searchInputs[0];\n\n                    this.searchInputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const input = this.searchInputs[0];\n\n                    if (input) {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, showDate, showTime, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButton\n                            tabIndex={-1}\n                            className=\"react-timebomb-arrow\"\n                        >\n                            {open ? '▲' : '▼'}\n                        </ArrowButton>\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = e.shiftKey ? 10 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            allowValidation,\n            onSubmit,\n            onToggle\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        // focus prev\n        if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                this.selectText(previousSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        // focus next\n        else if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !FORBIDDEN_KEYS.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', input.innerText);\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const currentFormatGroup = getAttribute(input, 'data-group');\n\n        this.selectText(e.currentTarget);\n\n        this.setState({ currentFormatGroup });\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}