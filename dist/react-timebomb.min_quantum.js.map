{"version":3,"sources":["src/index.tsx","src/utils.ts","src/button.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","DEFAULT_FORMAT","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","showTime","Boolean","format","test","className","classNames","this","push","join","defaultDateValue","value","minDate","maxDate","date","Date","isBefore","isAfter","startOfDay","super","Error","state","allowValidation","mode","valueText","dateFormat","undefined","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onToday","onNextMonth","onPrevMonth","onSelectTime","prevProps","prevState","setState","valueTextDidUpdate","validDate","validateDate","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","Value","onSubmit","MenuTitle","onMonths","onYear","Menu","Fragment","onClose","type","onFocus","clearSelection","setTimeout","formattedDate","error","onError","getTime","onChange","day","setDate","getHours","getMinutes","now","setMonth","getMonth","time","splitted","split","newDate","parseInt","moment_1","momentImport","moment","formatSplit","getFormatType","addDays","num","add","toDate","instance","isValid","validateFormatGroup","isFinite","int","char","String","strLen","length","startsWith","stringFromCharCode","keyCode","charCode","Math","floor","fromCharCode","formatNumber","number","splitDate","joinDates","parts","strParts","map","part","HTMLElement","innerText","filter","val","splittedFormat","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","sel","getSelection","empty","removeAllRanges","getWeekOfYear","isoWeek","startOfWeek","startOf","endOfWeek","endOf","setHours","subtractDays","manipulateDate","subtract","isSame","inp","monthsShort","isSameOrAfter","context","getAttribute","attr","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","A","StyledButton","button","selected","Button","Object","assign","data-react-timebomb-selectable","data-role","button_1","Flex","Input","span","ArrowButton","ClearButton","Placeholder","Icon","WHITELIST_KEYS","PureComponent","searchInputs","onSearchRef","onKeyDown","onKeyUp","onBlur","onClear","formatGroups","reduce","memo","prevChar","substr","focused","document","querySelector","some","forEach","i","focus","selectText","showPlaceholder","onClick","renderValue","tabIndex","group","separator","contentEditable","data-placeholder","data-separator","key","data-group","el","range","createRange","selectNodeContents","addRange","e","currentTarget","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","preventDefault","HTMLSpanElement","isArrowUp","isNaN","formatGroup","formatType","direction","dateParts","nextValue","valid","dataValue","dataGroup","groupValue","includes","metaKey","ctrlKey","blur","forbiddenKeys","setAttribute","target","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst DEFAULT_FORMAT = 'YYYY-MM-DD';\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(\n                props.format && /H|h|m|k|a|S|s/.test(props.format)\n            )\n        };\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { value, minDate, maxDate, format = DEFAULT_FORMAT } = this.props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        this.state = {\n            allowValidation: false,\n            mode: 'month',\n            valueText: value ? dateFormat(value, format) : undefined,\n            date: this.defaultDateValue\n        };\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onToday = this.onToday.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate();\n        }\n    }\n\n    private valueTextDidUpdate(): void {\n        const { valueText, allowValidation } = this.state;\n        const { format = DEFAULT_FORMAT } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            value,\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format = DEFAULT_FORMAT\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 320;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n\n        return (\n            <Select<Date> value={value} placeholder={placeholder}>\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => (\n                    <Container ref={onRef} className={this.className}>\n                        <Value\n                            placeholder={open ? undefined : placeholder}\n                            format={format}\n                            value={value}\n                            valueText={valueText}\n                            minDate={minDate}\n                            maxDate={maxDate}\n                            allowValidation={allowValidation}\n                            open={open}\n                            onChangeValueText={this.onChangeValueText}\n                            onToggle={onToggle}\n                            onSubmit={this.onValueSubmit}\n                        />\n                        {open ? (\n                            <MenuContainer\n                                menuWidth={menuWidth}\n                                menuHeight={menuHeight}\n                            >\n                                <MenuWrapper menuHeight={menuHeight}>\n                                    <MenuTitle\n                                        mode={mode}\n                                        date={this.state.date}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onMonths={this.onModeMonths}\n                                        onYear={this.onModeYear}\n                                        onNextMonth={this.onNextMonth}\n                                        onPrevMonth={this.onPrevMonth}\n                                        onToday={this.onToday}\n                                    />\n                                    <Menu\n                                        showTime={showTime}\n                                        showConfirm={showConfirm}\n                                        showCalendarWeek={showCalendarWeek}\n                                        selectWeek={selectWeek}\n                                        date={this.state.date}\n                                        value={value}\n                                        valueText={valueText}\n                                        format={format}\n                                        mode={mode}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onSelectDay={this.onSelectDay}\n                                        onSelectMonth={this.onSelectMonth}\n                                        onSelectYear={this.onSelectYear}\n                                        onSelectTime={this.onSelectTime}\n                                        onToggle={onToggle}\n                                        onSubmit={this.onValueSubmit}\n                                    />\n                                </MenuWrapper>\n                            </MenuContainer>\n                        ) : (\n                            <>\n                                {this.onClose()}\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            </>\n                        )}\n                    </Container>\n                )}\n            </Select>\n        );\n    }\n\n    private onClose(): null {\n        clearSelection();\n\n        setTimeout(() => {\n            const { format = DEFAULT_FORMAT } = this.props;\n            const validDate = validateDate(this.state.valueText, format);\n            const isValid = validDate\n                ? isEnabled('day', validDate, this.props)\n                : validDate;\n\n            if (!isValid && this.props.value) {\n                const formattedDate = dateFormat(this.props.value, format);\n\n                if (this.state.valueText !== formattedDate) {\n                    this.setState({ valueText: formattedDate });\n                }\n            }\n        }, 0);\n\n        return null;\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.props.onError && this.state.allowValidation) {\n            this.props.onError(error, value);\n        }\n    }\n\n    private emitChange(date?: Date): void {\n        const { value } = this.props;\n\n        if (value && date && value.getTime() === date.getTime()) {\n            return;\n        }\n\n        this.props.onChange(date);\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(valueText: string): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(onToggle: () => void): void {\n        onToggle();\n        clearSelection();\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format = DEFAULT_FORMAT } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format);\n\n        this.setState({ date, valueText }, () => this.emitChange(date));\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onToday(): void {\n        const now = startOfDay(new Date());\n\n        this.setState({ date: now });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format = DEFAULT_FORMAT } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value));\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format);\n\n            this.setState({ valueText }, () => this.emitChange(newDate));\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\nconst formatSplit = /[.|:|-|\\\\|_|\\s]/;\n\ntype FormatType = 'day' | 'month' | 'year' | 'hour' | 'minute' | 'second';\n\nexport function dateFormat(date: Date, format: string): string {\n    return moment(date).format(format);\n}\n\nexport function validateDate(\n    date: string | undefined,\n    format: string\n): Date | null {\n    const instance = moment(date, format, true);\n\n    return instance.isValid() ? instance.toDate() : null;\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/d/i.test(format)) {\n        return 'day';\n    }\n\n    if (/M/.test(format)) {\n        return 'month';\n    }\n\n    if (/y/i.test(format)) {\n        return 'year';\n    }\n\n    if (/h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n        const type = getFormatType(format);\n\n        switch (type) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n\n    return String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n}\n\nexport function formatNumber(number: Number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    return dateFormat(date, format).split(formatSplit);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplit);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    switch (parsingFlags.overflow) {\n        case 2:\n            return moment(\n                // @ts-ignore\n                new Date(...parsingFlags.parsedDateParts)\n            ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract'\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, 1);\n            if (direction === 'subtract') return subtractMinutes(date, 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, 1);\n            if (direction === 'subtract') return subtractSeconds(date, 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    A: 65\n};\n","// @ts-ignore\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n    margin-right: 5px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n    padding: 3px 6px;\n    min-height: 21px;\n    box-sizing: border-box;\n    background: ${(props: { selected?: boolean }) =>\n        props.selected ? '#ccc' : '#fff'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    &:not(:disabled) {\n        cursor: pointer;\n    }\n\n    &:not(:disabled):hover {\n        background-color: ${(props: { selected?: boolean }) =>\n            props.selected ? '#ccc' : '#efefef'};\n    }\n\n    &:last-child {\n        margin-right: 0;\n    }\n`;\n\nexport const Button = (\n    props: { selected?: boolean } & React.ButtonHTMLAttributes<{}>\n) => (\n    <StyledButton\n        data-react-timebomb-selectable\n        data-role=\"button\"\n        {...props}\n    />\n);\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled\n} from './utils';\nimport { ReactTimebombProps } from './typings';\nimport { Button } from './button';\n\ninterface ValueProps {\n    open?: boolean;\n    value?: Date;\n    valueText?: string;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    allowValidation?: boolean;\n    onToggle(): void;\n    onChangeValueText(valueText: string): void;\n    onSubmit(onToggle: () => void): void;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ClearButton = styled(ArrowButton)`\n    font-size: 18px;\n`;\n\nconst Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nconst Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '📅';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nexport class Value extends React.PureComponent<ValueProps> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (prevProps.value !== value && value) {\n                const parts = splitDate(value, format);\n                const input = this.searchInputs[0];\n\n                this.searchInputs.forEach(\n                    (input, i) => (input.innerText = parts[i])\n                );\n\n                if (input) {\n                    input.focus();\n                }\n            }\n\n            if ((open && !prevProps.open) || value !== prevProps.value) {\n                const input = this.searchInputs[0];\n\n                if (input) {\n                    if (input.innerText === '') {\n                        input.focus();\n                    } else {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <ArrowButton tabIndex={-1} className=\"react-timebomb-arrow\">\n                        {open ? '▲' : '▼'}\n                    </ArrowButton>\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onFocus}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const nextValue = numericValue + (isArrowUp ? 1 : -1);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, allowValidation } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        if (e.keyCode === keys.ENTER || e.keyCode === keys.ESC) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            this.props.onSubmit(this.props.onToggle);\n\n            return;\n        }\n\n        const forbiddenKeys = [\n            keys.SHIFT,\n            keys.ARROW_LEFT,\n            keys.ARROW_RIGHT,\n            keys.ARROW_UP,\n            keys.ARROW_DOWN,\n            keys.TAB\n        ];\n\n        // focus next\n        if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !forbiddenKeys.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', innerText);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                focused &&\n                !focused.getAttribute('data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onChangeValueText('');\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}