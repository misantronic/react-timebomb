{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/utils.ts","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","DEFAULT_FORMAT","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","showTime","Boolean","format","test","className","classNames","this","push","join","defaultDateValue","value","minDate","maxDate","date","Date","isBefore","isAfter","startOfDay","super","Error","state","allowValidation","mode","valueText","dateFormat","undefined","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onToday","onNextMonth","onPrevMonth","onSelectTime","prevProps","prevState","setState","valueTextDidUpdate","validDate","validateDate","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","Value","onSubmit","MenuTitle","onMonths","onYear","Menu","Fragment","onClose","type","onFocus","clearSelection","setTimeout","formattedDate","dateEqual","error","onError","commit","onChange","day","setDate","getHours","getMinutes","now","setMonth","getMonth","time","splitted","split","newDate","parseInt","button_1","Flex","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","css","Day","current","selected","today","disabled","PureComponent","monthMatrix","dateMonth","dateYear","getFullYear","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","addDays","fullYears","year","currentYear","Array","fill","map","_","i","setFullYear","enabled","filter","obj","reverse","minYear","array","currentDate","style","display","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","onYearContainer","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","months","getMonthNames","month","str","cellSpacing","cellPadding","dates","getWeekOfYear","j","renderDay","num","getDate","isToday","e","currentTarget","getAttribute","el","querySelector","scrollIntoView","scrollBy","top","moment_1","momentImport","moment","formatSplit","getFormatType","add","toDate","instance","isValid","validateFormatGroup","isFinite","int","char","String","strLen","length","startsWith","stringFromCharCode","keyCode","charCode","Math","floor","fromCharCode","formatNumber","number","splitDate","joinDates","parts","strParts","part","HTMLElement","innerText","val","splittedFormat","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","sel","getSelection","empty","removeAllRanges","isoWeek","startOf","endOf","setHours","subtractDays","manipulateDate","subtract","isSame","inp","dateA","diff","dateB","isSameOrAfter","context","attr","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","A","Input","span","ArrowButton","ClearButton","Placeholder","Icon","WHITELIST_KEYS","searchInputs","onSearchRef","onKeyDown","onKeyUp","onBlur","onClear","formatGroups","reduce","memo","prevChar","substr","focused","document","some","forEach","focus","selectText","showPlaceholder","data-role","renderValue","group","separator","contentEditable","data-placeholder","data-separator","data-group","data-react-timebomb-selectable","range","createRange","selectNodeContents","addRange","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","preventDefault","HTMLSpanElement","isArrowUp","isNaN","formatGroup","formatType","direction","dateParts","nextValue","valid","dataValue","dataGroup","groupValue","includes","metaKey","ctrlKey","blur","forbiddenKeys","setAttribute","target","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst DEFAULT_FORMAT = 'YYYY-MM-DD';\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(\n                props.format && /H|h|m|k|a|S|s/.test(props.format)\n            )\n        };\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { value, minDate, maxDate, format = DEFAULT_FORMAT } = this.props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        this.state = {\n            allowValidation: false,\n            mode: 'month',\n            valueText: value ? dateFormat(value, format) : undefined,\n            date: this.defaultDateValue\n        };\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onToday = this.onToday.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate();\n        }\n    }\n\n    private valueTextDidUpdate(): void {\n        const { valueText, allowValidation } = this.state;\n        const { format = DEFAULT_FORMAT } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format = DEFAULT_FORMAT\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 320;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format)\n            : this.props.value;\n\n        return (\n            <Select<Date> value={value} placeholder={placeholder}>\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => (\n                    <Container ref={onRef} className={this.className}>\n                        <Value\n                            placeholder={open ? undefined : placeholder}\n                            format={format}\n                            value={value}\n                            valueText={valueText}\n                            minDate={minDate}\n                            maxDate={maxDate}\n                            allowValidation={allowValidation}\n                            open={open}\n                            onChangeValueText={this.onChangeValueText}\n                            onToggle={onToggle}\n                            onSubmit={this.onValueSubmit}\n                        />\n                        {open ? (\n                            <MenuContainer\n                                menuWidth={menuWidth}\n                                menuHeight={menuHeight}\n                            >\n                                <MenuWrapper menuHeight={menuHeight}>\n                                    <MenuTitle\n                                        mode={mode}\n                                        date={this.state.date}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onMonths={this.onModeMonths}\n                                        onYear={this.onModeYear}\n                                        onNextMonth={this.onNextMonth}\n                                        onPrevMonth={this.onPrevMonth}\n                                        onToday={this.onToday}\n                                    />\n                                    <Menu\n                                        showTime={showTime}\n                                        showConfirm={showConfirm}\n                                        showCalendarWeek={showCalendarWeek}\n                                        selectWeek={selectWeek}\n                                        date={this.state.date}\n                                        value={value}\n                                        valueText={valueText}\n                                        format={format}\n                                        mode={mode}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onSelectDay={this.onSelectDay}\n                                        onSelectMonth={this.onSelectMonth}\n                                        onSelectYear={this.onSelectYear}\n                                        onSelectTime={this.onSelectTime}\n                                        onToggle={onToggle}\n                                        onSubmit={this.onValueSubmit}\n                                    />\n                                </MenuWrapper>\n                            </MenuContainer>\n                        ) : (\n                            <>\n                                {this.onClose()}\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            </>\n                        )}\n                    </Container>\n                )}\n            </Select>\n        );\n    }\n\n    private onClose(): null {\n        clearSelection();\n\n        setTimeout(() => {\n            const { format = DEFAULT_FORMAT, value } = this.props;\n            const validDate = validateDate(this.state.valueText, format);\n            const isValid = validDate\n                ? isEnabled('day', validDate, this.props)\n                : validDate;\n\n            if (!isValid && value) {\n                const formattedDate = dateFormat(value, format);\n\n                if (this.state.valueText !== formattedDate) {\n                    this.onChangeValueText(formattedDate);\n                    return;\n                }\n            }\n\n            if (!dateEqual(value, validDate)) {\n                if (value) {\n                    const formattedDate = dateFormat(value, format);\n\n                    this.onChangeValueText(formattedDate);\n                } else if (this.state.valueText !== undefined) {\n                    this.onChangeValueText(undefined);\n                }\n            }\n        }, 0);\n\n        return null;\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.props.onError && this.state.allowValidation) {\n            this.props.onError(error, value);\n        }\n    }\n\n    private emitChange(date?: Date, commit = false): void {\n        const { value, showConfirm, onChange } = this.props;\n\n        if (!showConfirm) {\n            commit = true;\n        }\n\n        if (dateEqual(value, date)) {\n            return;\n        }\n\n        if (commit) {\n            onChange(date);\n        }\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText }, () => {\n            if (!valueText) {\n                this.emitChange(undefined, true);\n            }\n        });\n    }\n\n    private onValueSubmit(onToggle: () => void): void {\n        onToggle();\n        clearSelection();\n\n        const value = validateDate(\n            this.state.valueText,\n            this.props.format || DEFAULT_FORMAT\n        );\n\n        if (value) {\n            this.emitChange(value, true);\n        }\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format = DEFAULT_FORMAT } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format);\n\n        this.setState({ date, valueText }, () => this.emitChange(date));\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onToday(): void {\n        const now = startOfDay(new Date());\n\n        this.setState({ date: now });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format = DEFAULT_FORMAT } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value));\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format);\n\n            this.setState({ valueText }, () => this.emitChange(newDate));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    isToday,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek\n} from './utils';\nimport { Button } from './button';\n\ninterface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    format: string;\n    onToggle(): void;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(onToggle: () => void): void;\n}\n\ninterface DayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: center;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        line-height: 3.13;\n        border: none;\n        margin: 0;\n        padding: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nconst Day = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: DayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: ${(props: DayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: DayProps) => (props.selected ? 'bold' : 'normal')};\n    pointer-events: ${(props: DayProps) => (props.disabled ? 'none' : 'auto')};\n    user-select: none;\n    opacity: ${(props: DayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: DayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private get monthMatrix(): (Date[])[] {\n        const { date } = this.props;\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { minDate, maxDate } = this.props;\n        const year = this.props.date.getFullYear();\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(minDate);\n\n                    date.setFullYear(currentYear + i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(maxDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                const date = new Date(maxDate);\n\n                date.setFullYear(i);\n\n                const enabled = isEnabled('year', date, this.props);\n                const selected = year === date.getFullYear();\n\n                array.push({ date, enabled, selected });\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showConfirm } = this.props;\n\n        switch (mode) {\n            case 'year':\n            case 'months':\n                return (\n                    <div style={{ display: 'flex' }}>\n                        {this.renderMenuMonths()}\n                        {this.renderMenuYear()}\n                    </div>\n                );\n            case 'month':\n                return (\n                    <MonthContainer>\n                        {this.renderMonth()}\n                        {showConfirm && this.renderConfirm()}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { date, value } = this.props;\n        const months = getMonthNames(true);\n        const month = value && value.getMonth();\n        const year = value && value.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { monthMatrix } = this;\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {monthMatrix.map((dates, i) => (\n                        <tr key={i}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    {getWeekOfYear(dates[0])}\n                                </td>\n                            )}\n                            {dates.map((date, j) => (\n                                <td className=\"day\" key={j}>\n                                    {this.renderDay(date)}\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderDay(day: Date): React.ReactNode {\n        const num = day.getDate();\n        const { value, date, selectWeek } = this.props;\n        let selected =\n            value &&\n            day.getDate() === value.getDate() &&\n            day.getMonth() === value.getMonth();\n        const current = day.getMonth() === date.getMonth();\n        const enabled = isEnabled('day', day, this.props);\n        const today = isToday(day);\n\n        if (selectWeek && value) {\n            selected = getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return (\n            <Day\n                data-date={day.toISOString()}\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={!enabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {num}\n            </Day>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={validDate === null}\n                    onClick={() => this.props.onSubmit(this.props.onToggle)}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private onSelectDay(e: React.SyntheticEvent<HTMLDivElement>): void {\n        const { onSelectDay, showConfirm, onSubmit, onToggle } = this.props;\n        const date = new Date(e.currentTarget.getAttribute('data-date')!);\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit(onToggle);\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        if (el) {\n            const selected = el.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n                el.scrollBy({ top: -10 });\n            }\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\nconst formatSplit = /[.|:|-|\\\\|_|\\s]/;\n\ntype FormatType = 'day' | 'month' | 'year' | 'hour' | 'minute' | 'second';\n\nexport function dateFormat(date: Date, format: string): string {\n    return moment(date).format(format);\n}\n\nexport function validateDate(\n    date: string | undefined,\n    format: string\n): Date | undefined {\n    const instance = moment(date, format, true);\n\n    return instance.isValid() ? instance.toDate() : undefined;\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/d/i.test(format)) {\n        return 'day';\n    }\n\n    if (/M/.test(format)) {\n        return 'month';\n    }\n\n    if (/y/i.test(format)) {\n        return 'year';\n    }\n\n    if (/h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n        const type = getFormatType(format);\n\n        switch (type) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n\n    return String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n}\n\nexport function formatNumber(number: Number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    return dateFormat(date, format).split(formatSplit);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplit);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    switch (parsingFlags.overflow) {\n        case 2:\n            return moment(\n                // @ts-ignore\n                new Date(...parsingFlags.parsedDateParts)\n            ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract'\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, 1);\n            if (direction === 'subtract') return subtractMinutes(date, 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, 1);\n            if (direction === 'subtract') return subtractSeconds(date, 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function dateEqual(dateA?: Date, dateB?: Date) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    return moment(dateA).diff(dateB) === 0;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    A: 65\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled\n} from './utils';\nimport { ReactTimebombProps } from './typings';\nimport { Button } from './button';\n\ninterface ValueProps {\n    open?: boolean;\n    value?: Date;\n    valueText?: string;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    allowValidation?: boolean;\n    onToggle(): void;\n    onChangeValueText(valueText?: string): void;\n    onSubmit(onToggle: () => void): void;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ClearButton = styled(ArrowButton)`\n    font-size: 18px;\n`;\n\nconst Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nconst Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '📅';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nexport class Value extends React.PureComponent<ValueProps> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (prevProps.value !== value && value) {\n                const parts = splitDate(value, format);\n                const input = this.searchInputs[0];\n\n                this.searchInputs.forEach(\n                    (input, i) => (input.innerText = parts[i])\n                );\n\n                if (input) {\n                    input.focus();\n                }\n            }\n\n            if ((open && !prevProps.open) || value !== prevProps.value) {\n                const input = this.searchInputs[0];\n\n                if (input) {\n                    if (input.innerText === '') {\n                        input.focus();\n                    } else {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <ArrowButton tabIndex={-1} className=\"react-timebomb-arrow\">\n                        {open ? '▲' : '▼'}\n                    </ArrowButton>\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onFocus}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const nextValue = numericValue + (isArrowUp ? 1 : -1);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, allowValidation } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            this.props.onSubmit(this.props.onToggle);\n\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            this.props.onToggle();\n\n            return;\n        }\n\n        const forbiddenKeys = [\n            keys.SHIFT,\n            keys.ARROW_LEFT,\n            keys.ARROW_RIGHT,\n            keys.ARROW_UP,\n            keys.ARROW_DOWN,\n            keys.TAB\n        ];\n\n        // focus next\n        if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !forbiddenKeys.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', innerText);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                focused &&\n                !focused.getAttribute('data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onChangeValueText(undefined);\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}