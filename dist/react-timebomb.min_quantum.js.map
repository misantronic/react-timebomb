{"version":3,"sources":["src/menu/index.tsx","src/menu/mobile.tsx"],"names":["React","$fsx","r","styled_components_1","utils_1","button_1","table_1","mobile_1","time_1","MonthAndYearContainer","default","div","props","mobile","MonthsContainer","MonthContainer","YearContainer","Confirm","exports","Menu","PureComponent","[object Object]","super","this","yearContainer","scrollToYear","timeout","delay","clearTimeout","setTimeout","selected","querySelector","scrollIntoView","scrollBy","top","state","onSelectMonth","bind","onSelectYear","onYearContainer","onChangeMonth","monthNames","getMonthNames","now","Date","date","isArray","selectedRange","fullYears","value","minDate","maxDate","valueDate","getDate","year","getFullYear","getDateConfig","newYear","setFullYear","enabled","isEnabled","setSeconds","getSeconds","setMinutes","getMinutes","setHours","getHours","setDate","setMonth","getMonth","currentYear","Array","fill","undefined","map","_","i","filter","obj","reverse","minYear","array","push","currentDate","allowPrev","subtractDays","startOfMonth","allowNext","addDays","endOfMonth","prevProps","dateEqual","mode","showDate","showConfirm","showTime","createElement","renderMenuMonths","renderMenuYear","renderMonth","renderTime","renderConfirm","ref","className","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","month","str","newDate","disabled","GestureWrapper","MenuTable","subtractMonths","selectRange","selectWeek","showCalendarWeek","onSubmit","onSelectDay","addMonths","MenuTime","timeStep","topDivider","onChange","onSelectTime","onSubmitTime","onCancel","valueText","format","validDate","validateDate","isValid","every","v","e","getAttribute","currentTarget","el","direction","react_with_gesture_1","MobileMenuTableWrapper","animate","down","xDir","x","setState","cooldown","deltaX","delta","translateX","cancel","Boolean","style","transform","children","__decorate","withGesture","mouse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2yMAAA,MAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBAEAE,EAAAH,EAAAC,EAAA,GAcAG,EAAAJ,EAAAC,EAAA,GAEAI,EAAAL,EAAAC,EAAA,GACAK,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GA8BMO,EAAwBN,EAAAO,QAAOC;;cAEvBC,GACNA,EAAMC,OAAS,OAAS;EAG1BC,EAAkBX,EAAAO,QAAOC;;;;;;;;;;;;iBAYdC,GACLA,EAAMC,OAAS,kBAAoB;;;;;;;;;EAWzCE,EAAiBZ,EAAAO,QAAOC;;;cAGhBC,GAAkCA,EAAMC,OAAS,MAAQ;;EAIjEG,EAAgBb,EAAAO,QAAOC;;;;;;;;;;;;;;;;;;;EAqBvBM,EAAUd,EAAAO,QAAOC;;;;;;;;EAUvBO,EAAAC,KAAA,cAA0BnB,EAAMoB,cAiI5BC,YAAYT,GACRU,MAAMV,GAvHFW,KAAAC,cAAuC,KA6VvCD,KAAAE,aAAe,MACnB,IAAIC,EAEJ,OAAOC,IACHC,aAAaF,GAEbA,EAAUG,WAAW,KACjB,GAAIN,KAAKC,cAAe,CACpB,MAAMM,EAAWP,KAAKC,cAAcO,cAChC,aAGAD,IACAA,EAASE,iBAELT,KAAKC,cAAcS,UACnBV,KAAKC,cAAcS,SAAS,CAAEC,KAAM,QAIjDP,KApBY,GApOnBJ,KAAKY,MAAQ,GAEbZ,KAAKa,cAAgBb,KAAKa,cAAcC,KAAKd,MAC7CA,KAAKe,aAAef,KAAKe,aAAaD,KAAKd,MAC3CA,KAAKgB,gBAAkBhB,KAAKgB,gBAAgBF,KAAKd,MACjDA,KAAKiB,cAAgBjB,KAAKiB,cAAcH,KAAKd,MAE7CA,KAAKkB,WAAarC,EAAAsC,eAAc,GAxIpCC,UACI,OAAO,IAAIC,KAGPvB,QAAQwB,GACZ,OAAQzC,EAAA0C,QAAQD,GAAQA,EAAKtB,KAAKX,MAAMmC,eAAiBF,EAK7DG,gBACI,MAAMC,MAAEA,EAAAC,QAAOA,EAAAC,QAASA,GAAY5B,KAAKX,MACnCwC,EAAY7B,KAAK8B,QAAQJ,GACzBK,EAAO/B,KAAK8B,QAAQ9B,KAAKX,MAAMiC,MAAMU,cAErCC,EAAgB,CAACX,EAAYY,MAC/BZ,EAAO,IAAID,KAAKC,IACXa,YAAYD,GAEjB,MAAME,EAAUvD,EAAAwD,UAAU,OAAQf,EAAMtB,KAAKX,OACvCkB,EAAWwB,IAASG,EAU1B,OARIR,IACAJ,EAAKgB,WAAWT,EAAUU,cAC1BjB,EAAKkB,WAAWX,EAAUY,cAC1BnB,EAAKoB,SAASb,EAAUc,YACxBrB,EAAKsB,QAAQf,EAAUC,WACvBR,EAAKuB,SAAShB,EAAUiB,aAGrB,CAAExB,KAAAA,EAAMc,QAAAA,EAAS7B,SAAAA,IAG5B,GAAIoB,IAAYC,EAAS,CACrB,MAAMmB,EAAcpB,EAAQK,cAE5B,OAAOgB,MAAM,KACRC,UAAKC,GACLC,IAAI,CAACC,EAAGC,IAAMpB,EAAcN,EAASoB,EAAcM,IACnDC,OAAOC,GAAOA,EAAInB,SACpB,IAAKT,GAAWC,EAAS,CAC5B,MAAMmB,EAAcnB,EAAQI,cAE5B,OAAOgB,MAAM,KACRC,UAAKC,GACLC,IAAI,CAACC,EAAGC,IAAMpB,EAAcL,EAASmB,EAAcM,IACnDC,OAAOC,GAAOA,EAAInB,SAClBoB,UACF,GAAI7B,GAAWC,EAAS,CAC3B,MAAM6B,EAAU9B,EAAQK,cAElB0B,EAIA,GAEN,IAAK,IAAIL,EAPOzB,EAAQI,cAOFqB,GAAKI,EAASJ,IAChCK,EAAMC,KAAK1B,EAAcL,EAASyB,IAGtC,OAAOK,EAAMF,UACV,CACH,MAAMpC,EAAMpB,KAAKoB,IACXwC,EAAc/B,EAAYT,EAAMS,EAAYT,EAC5C2B,EAAca,EAAY5B,cAEhC,OAAOgB,MAAM,KACRC,UAAKC,GACLC,IAAI,CAACC,EAAGC,KACL,MAAM/B,EAAO,IAAID,KAAKuC,GAEtBtC,EAAKa,YAAYY,EAAcM,GAE/B,MAAMjB,EAAUvD,EAAAwD,UAAU,OAAQf,EAAMtB,KAAKX,OACvCkB,EAAWwB,IAAST,EAAKU,cAE/B,MAAO,CAAEV,KAAAA,EAAMc,QAAAA,EAAS7B,SAAAA,KAE3B+C,OAAOC,GAAOA,EAAInB,SAClBoB,WAIbK,gBACI,MAAMlC,QAAEA,GAAY3B,KAAKX,MACzB,IAAIiC,EAAOtB,KAAKX,MAAMiC,KAEtB,QAAKK,IAID9C,EAAA0C,QAAQD,KACRA,EAAOA,EAAK,IAGZA,GACIzC,EAAAiF,aAAajF,EAAAkF,aAAazC,GAAO,GAAKK,IAQlDqC,gBACI,MAAMpC,QAAEA,GAAY5B,KAAKX,MACzB,IAAIiC,EAAOtB,KAAKX,MAAMiC,KAEtB,QAAKM,IAID/C,EAAA0C,QAAQD,KACRA,EAAOA,EAAK,IAGZA,GACIzC,EAAAoF,QAAQpF,EAAAqF,WAAW5C,GAAO,GAAKM,IAqBpC9B,mBAAmBqE,GACjBtF,EAAAuF,UAAUD,EAAU7C,KAAMtB,KAAKX,MAAMiC,OACtCtB,KAAKE,aAAa,IAInBJ,SACH,MAAMuE,KAAEA,EAAA/E,OAAMA,EAAAgF,SAAQA,EAAAC,YAAUA,EAAAC,SAAaA,GAAaxE,KAAKX,MAE/D,GAAIiF,GAAYE,EACZ,OAAQH,GACJ,IAAK,OACL,IAAK,QACD,OACI5F,EAAAgG,cAACvF,EAAqB,CAACI,OAAQA,GAC1BU,KAAK0E,mBACL1E,KAAK2E,kBAGlB,IAAK,MACL,IAAK,OACL,IAAK,SACL,IAAK,SACD,OACIlG,EAAAgG,cAACjF,EAAc,CAACF,OAAQA,GACnBgF,GAAYtE,KAAK4E,cACjBJ,GAAYxE,KAAK6E,aACjBN,GAAevE,KAAK8E,iBAMzC,OAAO,KAGHhF,iBACJ,OACIrB,EAAAgG,cAAChF,EAAa,CAACsF,IAAK/E,KAAKgB,gBAAiBgE,UAAU,SAC/ChF,KAAKyB,UACD0B,IAAI,EAAG7B,KAAAA,EAAMf,SAAAA,MACV,MAAM0E,EAAW3D,EAAKU,cAChBkD,EAAU5D,EAAK6D,cAErB,OACI1G,EAAAgG,cAAC3F,EAAAsG,OAAM,CACHC,IAAKH,EACLI,UAAW,EACXN,UAAWzE,EAAW,gBAAa2C,EACnC3C,SAAUA,EACVjB,OAAQU,KAAKX,MAAMC,OAAMiG,YACdL,EACXM,QAASxF,KAAKe,cAEbkE,KAIZzB,WAKT1D,mBACJ,MAAM4B,MAAEA,EAAApC,OAAOA,GAAWU,KAAKX,MACzBwC,EAAY7B,KAAK8B,QAAQJ,GACzBJ,EAAOtB,KAAK8B,QAAQ9B,KAAKX,MAAMiC,MAC/BmE,EAAQ/D,GAASG,EAAUiB,WAC3Bf,EAAOL,GAASG,EAAUG,cAEhC,OACIvD,EAAAgG,cAAClF,EAAe,CAACD,OAAQA,EAAQ0F,UAAU,UACtChF,KAAKkB,WAAWiC,IAAI,CAACuC,EAAKrC,KACvB,MAAMsC,EAAU,IAAItE,KAAKC,GAEzBqE,EAAQ9C,SAASQ,GAEjB,MAAMjB,EAAUvD,EAAAwD,UAAU,QAASsD,EAAS3F,KAAKX,OAC3CkB,EACFkF,IAAUE,EAAQ7C,YAClBf,IAAS4D,EAAQ3D,cAErB,OACIvD,EAAAgG,cAAC3F,EAAAsG,OAAM,CACHC,IAAKK,EACLJ,UAAW,EACXN,UAAWzE,EAAW,gBAAa2C,EACnC3C,SAAUA,EACVqF,UAAWxD,EACX9C,OAAQU,KAAKX,MAAMC,OAAMiG,YACdI,EAAQR,cACnBK,QAASxF,KAAKa,eAEb6E,MAQjB5F,cACJ,MAAMR,OAAEA,GAAWU,KAAKX,MAExB,OAAIC,EAEIb,EAAAgG,cAACzF,EAAA6G,eAAc,CACX7B,UAAWhE,KAAKgE,UAChBH,UAAW7D,KAAK6D,UAChB5C,cAAejB,KAAKiB,eAEpBxC,EAAAgG,cAAC1F,EAAA+G,UAAS,CACNxE,KAAMzC,EAAAkH,eAAe/F,KAAK8B,QAAQ9B,KAAKX,MAAMiC,MAAO,GACpDK,QAAS3B,KAAKX,MAAMsC,QACpBC,QAAS5B,KAAKX,MAAMuC,QACpBtC,OAAQU,KAAKX,MAAMC,OACnB0G,YAAahG,KAAKX,MAAM2G,YACxBxE,cAAexB,KAAKX,MAAMmC,cAC1ByE,WAAYjG,KAAKX,MAAM4G,WACvBC,iBAAkBlG,KAAKX,MAAM6G,iBAC7B3B,YAAavE,KAAKX,MAAMkF,YACxBC,SAAUxE,KAAKX,MAAMmF,SACrB9C,MAAO7C,EAAAkH,eACH/F,KAAK8B,QAAQ9B,KAAKX,MAAMqC,OACxB,GAEJyE,SAAUnG,KAAKX,MAAM8G,SACrBC,YAAapG,KAAKX,MAAM+G,cAE5B3H,EAAAgG,cAAC1F,EAAA+G,UAAS,CACNxE,KAAMtB,KAAKX,MAAMiC,KACjBK,QAAS3B,KAAKX,MAAMsC,QACpBC,QAAS5B,KAAKX,MAAMuC,QACpBtC,OAAQU,KAAKX,MAAMC,OACnB0G,YAAahG,KAAKX,MAAM2G,YACxBxE,cAAexB,KAAKX,MAAMmC,cAC1ByE,WAAYjG,KAAKX,MAAM4G,WACvBC,iBAAkBlG,KAAKX,MAAM6G,iBAC7B3B,YAAavE,KAAKX,MAAMkF,YACxBC,SAAUxE,KAAKX,MAAMmF,SACrB9C,MAAO1B,KAAKX,MAAMqC,MAClByE,SAAUnG,KAAKX,MAAM8G,SACrBC,YAAapG,KAAKX,MAAM+G,cAE5B3H,EAAAgG,cAAC1F,EAAA+G,UAAS,CACNxE,KAAMzC,EAAAwH,UAAUrG,KAAK8B,QAAQ9B,KAAKX,MAAMiC,MAAO,GAC/CK,QAAS3B,KAAKX,MAAMsC,QACpBC,QAAS5B,KAAKX,MAAMuC,QACpBtC,OAAQU,KAAKX,MAAMC,OACnB0G,YAAahG,KAAKX,MAAM2G,YACxBxE,cAAexB,KAAKX,MAAMmC,cAC1ByE,WAAYjG,KAAKX,MAAM4G,WACvBC,iBAAkBlG,KAAKX,MAAM6G,iBAC7B3B,YAAavE,KAAKX,MAAMkF,YACxBC,SAAUxE,KAAKX,MAAMmF,SACrB9C,MAAO7C,EAAAwH,UAAUrG,KAAK8B,QAAQ9B,KAAKX,MAAMqC,OAAQ,GACjDyE,SAAUnG,KAAKX,MAAM8G,SACrBC,YAAapG,KAAKX,MAAM+G,eAOpC3H,EAAAgG,cAAC1F,EAAA+G,UAAS,CACNxE,KAAMtB,KAAKX,MAAMiC,KACjBK,QAAS3B,KAAKX,MAAMsC,QACpBC,QAAS5B,KAAKX,MAAMuC,QACpBtC,OAAQU,KAAKX,MAAMC,OACnB0G,YAAahG,KAAKX,MAAM2G,YACxBxE,cAAexB,KAAKX,MAAMmC,cAC1ByE,WAAYjG,KAAKX,MAAM4G,WACvBC,iBAAkBlG,KAAKX,MAAM6G,iBAC7B3B,YAAavE,KAAKX,MAAMkF,YACxBC,SAAUxE,KAAKX,MAAMmF,SACrB9C,MAAO1B,KAAKX,MAAMqC,MAClByE,SAAUnG,KAAKX,MAAM8G,SACrBC,YAAapG,KAAKX,MAAM+G,cAK5BtG,aACJ,OACIrB,EAAAgG,cAACxF,EAAAqH,SAAQ,CACLhF,KAAMtB,KAAKX,MAAMiC,KACjBiF,SAAUvG,KAAKX,MAAMkH,SACrBC,WAAYxG,KAAKX,MAAMiF,SACvBmC,SAAUzG,KAAKX,MAAMqH,aACrBP,SAAUnG,KAAKX,MAAMsH,aACrBC,SAAU5G,KAAKX,MAAMsH,eAKzB7G,gBACJ,MAAM+G,UAAEA,EAAAC,OAAWA,GAAW9G,KAAKX,MAC7B0H,EAAYlI,EAAAmI,aAAaH,EAAWC,GACpCG,IAAUF,IACVlI,EAAA0C,QAAQwF,GACJA,EAAUG,MAAMC,GAAKtI,EAAAwD,UAAU,MAAO8E,EAAGnH,KAAKX,QAC9CR,EAAAwD,UAAU,MAAO0E,EAAW/G,KAAKX,QAG3C,OACIZ,EAAAgG,cAAC/E,EAAO,KACJjB,EAAAgG,cAAC3F,EAAAsG,OAAM,CACHE,UAAW,EACXM,UAAWqB,EACX3H,OAAQU,KAAKX,MAAMC,OACnBkG,QAAS,IAAMxF,KAAKX,MAAM8G,YAAU,OAgC5CrG,cAAcsH,GAClB,MAAM9F,EAAO,IAAID,KAAKxC,EAAAwI,aAAaD,EAAEE,cAAe,cAEpDhH,WAAW,IAAMN,KAAKX,MAAMwB,cAAcS,GAAO,GAG7CxB,aAAasH,GACjB,MAAM9F,EAAO,IAAID,KAAKxC,EAAAwI,aAAaD,EAAEE,cAAe,cAEpDhH,WAAW,IAAMN,KAAKX,MAAM0B,aAAaO,GAAO,GAG5CxB,gBAAgByH,GACpBvH,KAAKC,cAAgBsH,EAErBvH,KAAKE,aAAa,GAGdJ,cAAc0H,GAClB,MAAMvG,cAAEA,GAAkBjB,KAAKX,MACzBiC,EAAOtB,KAAK8B,QAAQ9B,KAAKX,MAAMiC,MAErC,OAAQkG,GACJ,IAAK,OACDvG,EAAcpC,EAAAwH,UAAU/E,EAAM,IAC9B,MACJ,IAAK,OACDL,EAAcpC,EAAAkH,eAAezE,EAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;m+EClhBnD,MAAA7C,EAAAC,EAAAC,EAAA,SACA8I,EAAA/I,EAAAC,EAAA,sBAGM+I,EAFNhJ,EAAAC,EAAA,qBAE+BQ,QAAOC;;;;;kBAKpBC,GACVA,EAAMsI,QAAU,2BAA6B;EAarD,IAAa9B,EAAb,cAAoCpH,EAAMoB,cAQtCC,YAAYT,GACRU,MAAMV,GAENW,KAAKY,MAAQ,GAGVd,mBAAmBqE,GACtB,MAAM9E,EAAQW,KAAKX,OACb2E,UAAEA,EAAAH,UAAWA,EAAA+D,KAAWA,GAASvI,EAEvC,GAAI8E,EAAUyD,OAASA,EAAM,CACzB,MAAOC,GAAQxI,EAAMmI,UACrB,IACIA,EADAM,EAAI,GAWR,GARID,EAAO,GACPC,EAAI,QACJN,EAAY,QACLK,EAAO,IACdC,EAAI,SACJN,EAAY,QAGZM,GAAKN,EAAW,CAChB,GACmB,SAAfA,IAA0BxD,GACX,SAAdwD,IAAyB3D,EAE1B,OAGJ7D,KAAK+H,SAAS,CAAED,EAAAA,EAAGE,UAAU,GAAQ,KACjC1H,WAAW,KACPN,KAAK+H,SAAS,CAAED,OAAG5E,GAAa,KAC5BlD,KAAKX,MAAM4B,cAAcuG,GACzBxH,KAAK+H,SAAS,CAAEC,UAAU,OAE/B,SAMZlI,SACH,MAAMT,EAAQW,KAAKX,OACbyI,EAAEA,EAAAE,SAAGA,GAAahI,KAAKY,MAC7B,IAAKqH,GAAU5I,EAAM6I,OAEhBlI,KAAKX,MAAM2E,WAAaiE,EAAS,IAClCA,EAAS,IAGRjI,KAAKX,MAAMwE,WAAaoE,EAAS,IAClCA,EAAS,GAGb,IAAIE,EAAaL,MAAQzI,EAAMuI,KAAOK,EAAS,MAM/C,OAJID,GAAY3I,EAAM+I,QAClB/I,EAAM+I,SAIN3J,EAAAgG,cAACiD,EAAsB,CACnBC,QAASU,QAAQP,GACjBQ,MAAO,CAAEC,wBAAyBJ,OAEjC9I,EAAMmJ,YA3EV3C,EAAc4C,EAAA,CADzBhB,EAAAiB,YAAY,CAAEC,OAAO,qCACV9C,GAAAlG,EAAAkG,eAAAA","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '../';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getAttribute,\n    isArray,\n    dateEqual,\n    addMonths,\n    subtractMonths,\n    startOfMonth,\n    subtractDays,\n    addDays,\n    endOfMonth\n} from '../utils';\nimport { Button } from '../components/button';\nimport { ReactTimebombDate, FormatType } from '../typings';\nimport { MenuTable } from './table';\nimport { GestureWrapper, GestureDirection } from './mobile';\nimport { MenuTime } from './time';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    timeStep: ReactTimebombProps['timeStep'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    /** month was selected, value will change to `date` */\n    onSelectMonth(date: Date): void;\n    /** month was selected but value will not change to `date` */\n    onChangeMonth(date: Date): void;\n    onSelectTime(date: Date, mode: FormatType): void;\n    onSubmitTime(date: Date | undefined, mode: FormatType): void;\n    onSubmit(): void;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0;\n    height: ${(props: { mobile?: boolean }) => (props.mobile ? '100' : 'auto')};\n    overflow: hidden;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private monthNames!: string[];\n\n    private get now(): Date {\n        return new Date();\n    }\n\n    private getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[this.props.selectedRange] : date)!;\n    }\n\n    private yearContainer: HTMLDivElement | null = null;\n\n    private get fullYears() {\n        const { value, minDate, maxDate } = this.props;\n        const valueDate = this.getDate(value);\n        const year = this.getDate(this.props.date).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, this.props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = this.now;\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    private get allowPrev() {\n        const { minDate } = this.props;\n        let date = this.props.date;\n\n        if (!minDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (subtractDays(startOfMonth(date), 1) < minDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private get allowNext() {\n        const { maxDate } = this.props;\n        let date = this.props.date;\n\n        if (!maxDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (addDays(endOfMonth(date), 1) > maxDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onYearContainer = this.onYearContainer.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n\n        this.monthNames = getMonthNames(true);\n    }\n\n    public componentDidUpdate(prevProps: MenuProps) {\n        if (!dateEqual(prevProps.date, this.props.date)) {\n            this.scrollToYear(64);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { mode, mobile, showDate, showConfirm, showTime } = this.props;\n\n        if (showDate || showTime) {\n            switch (mode) {\n                case 'year':\n                case 'month':\n                    return (\n                        <MonthAndYearContainer mobile={mobile}>\n                            {this.renderMenuMonths()}\n                            {this.renderMenuYear()}\n                        </MonthAndYearContainer>\n                    );\n                case 'day':\n                case 'hour':\n                case 'minute':\n                case 'second':\n                    return (\n                        <MonthContainer mobile={mobile}>\n                            {showDate && this.renderMonth()}\n                            {showTime && this.renderTime()}\n                            {showConfirm && this.renderConfirm()}\n                        </MonthContainer>\n                    );\n            }\n        }\n\n        return null;\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                mobile={this.props.mobile}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { value, mobile } = this.props;\n        const valueDate = this.getDate(value);\n        const date = this.getDate(this.props.date);\n        const month = value && valueDate.getMonth();\n        const year = value && valueDate.getFullYear();\n\n        return (\n            <MonthsContainer mobile={mobile} className=\"months\">\n                {this.monthNames.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            mobile={this.props.mobile}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { mobile } = this.props;\n\n        if (mobile) {\n            return (\n                <GestureWrapper\n                    allowNext={this.allowNext}\n                    allowPrev={this.allowPrev}\n                    onChangeMonth={this.onChangeMonth}\n                >\n                    <MenuTable\n                        date={subtractMonths(this.getDate(this.props.date), 1)}\n                        minDate={this.props.minDate}\n                        maxDate={this.props.maxDate}\n                        mobile={this.props.mobile}\n                        selectRange={this.props.selectRange}\n                        selectedRange={this.props.selectedRange}\n                        selectWeek={this.props.selectWeek}\n                        showCalendarWeek={this.props.showCalendarWeek}\n                        showConfirm={this.props.showConfirm}\n                        showTime={this.props.showTime}\n                        value={subtractMonths(\n                            this.getDate(this.props.value),\n                            1\n                        )}\n                        onSubmit={this.props.onSubmit}\n                        onSelectDay={this.props.onSelectDay}\n                    />\n                    <MenuTable\n                        date={this.props.date}\n                        minDate={this.props.minDate}\n                        maxDate={this.props.maxDate}\n                        mobile={this.props.mobile}\n                        selectRange={this.props.selectRange}\n                        selectedRange={this.props.selectedRange}\n                        selectWeek={this.props.selectWeek}\n                        showCalendarWeek={this.props.showCalendarWeek}\n                        showConfirm={this.props.showConfirm}\n                        showTime={this.props.showTime}\n                        value={this.props.value}\n                        onSubmit={this.props.onSubmit}\n                        onSelectDay={this.props.onSelectDay}\n                    />\n                    <MenuTable\n                        date={addMonths(this.getDate(this.props.date), 1)}\n                        minDate={this.props.minDate}\n                        maxDate={this.props.maxDate}\n                        mobile={this.props.mobile}\n                        selectRange={this.props.selectRange}\n                        selectedRange={this.props.selectedRange}\n                        selectWeek={this.props.selectWeek}\n                        showCalendarWeek={this.props.showCalendarWeek}\n                        showConfirm={this.props.showConfirm}\n                        showTime={this.props.showTime}\n                        value={addMonths(this.getDate(this.props.value), 1)}\n                        onSubmit={this.props.onSubmit}\n                        onSelectDay={this.props.onSelectDay}\n                    />\n                </GestureWrapper>\n            );\n        }\n\n        return (\n            <MenuTable\n                date={this.props.date}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                mobile={this.props.mobile}\n                selectRange={this.props.selectRange}\n                selectedRange={this.props.selectedRange}\n                selectWeek={this.props.selectWeek}\n                showCalendarWeek={this.props.showCalendarWeek}\n                showConfirm={this.props.showConfirm}\n                showTime={this.props.showTime}\n                value={this.props.value}\n                onSubmit={this.props.onSubmit}\n                onSelectDay={this.props.onSelectDay}\n            />\n        );\n    }\n\n    private renderTime(): React.ReactNode {\n        return (\n            <MenuTime\n                date={this.props.date}\n                timeStep={this.props.timeStep}\n                topDivider={this.props.showDate}\n                onChange={this.props.onSelectTime}\n                onSubmit={this.props.onSubmitTime}\n                onCancel={this.props.onSubmitTime}\n            />\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isArray(validDate)\n                ? validDate.every(v => isEnabled('day', v, this.props))\n                : isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    mobile={this.props.mobile}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private scrollToYear = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (delay: number) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                if (this.yearContainer) {\n                    const selected = this.yearContainer.querySelector(\n                        '.selected'\n                    );\n\n                    if (selected) {\n                        selected.scrollIntoView();\n\n                        if (this.yearContainer.scrollBy) {\n                            this.yearContainer.scrollBy({ top: -10 });\n                        }\n                    }\n                }\n            }, delay);\n        };\n    })();\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        this.yearContainer = el;\n\n        this.scrollToYear(0);\n    }\n\n    private onChangeMonth(direction: GestureDirection) {\n        const { onChangeMonth } = this.props;\n        const date = this.getDate(this.props.date);\n\n        switch (direction) {\n            case 'next':\n                onChangeMonth(addMonths(date, 1));\n                break;\n            case 'prev':\n                onChangeMonth(subtractMonths(date, 1));\n                break;\n        }\n    }\n}\n","import * as React from 'react';\nimport { withGesture, GestureState } from 'react-with-gesture';\nimport styled from 'styled-components';\n\nconst MobileMenuTableWrapper = styled.div`\n    display: flex;\n    width: 300%;\n    position: relative;\n    left: -100%;\n    transition: ${(props: { animate: boolean }) =>\n        props.animate ? 'transform 0.15s ease-out' : 'none'};\n`;\n\nexport type GestureDirection = 'next' | 'prev';\n\ninterface GestureWrapperProps extends GestureState {\n    children: React.ReactNode;\n    allowPrev: boolean;\n    allowNext: boolean;\n    onChangeMonth(direction: GestureDirection): void;\n}\n\n@(withGesture({ mouse: false }) as any)\nexport class GestureWrapper extends React.PureComponent<\n    {\n        allowPrev: boolean;\n        allowNext: boolean;\n        onChangeMonth(direction: GestureDirection): void;\n    },\n    { x?: string; cooldown?: boolean }\n> {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    public componentDidUpdate(prevProps: GestureWrapperProps) {\n        const props = this.props as GestureWrapperProps;\n        const { allowNext, allowPrev, down } = props;\n\n        if (prevProps.down && !down) {\n            const [xDir] = props.direction;\n            let x = '';\n            let direction: GestureDirection | undefined;\n\n            if (xDir > 0) {\n                x = '33.3%';\n                direction = 'prev';\n            } else if (xDir < 0) {\n                x = '-33.3%';\n                direction = 'next';\n            }\n\n            if (x && direction) {\n                if (\n                    (direction === 'next' && !allowNext) ||\n                    (direction === 'prev' && !allowPrev)\n                ) {\n                    return;\n                }\n\n                this.setState({ x, cooldown: true }, () => {\n                    setTimeout(() => {\n                        this.setState({ x: undefined }, () => {\n                            this.props.onChangeMonth(direction!);\n                            this.setState({ cooldown: false });\n                        });\n                    }, 167);\n                });\n            }\n        }\n    }\n\n    public render() {\n        const props = this.props as GestureWrapperProps;\n        const { x, cooldown } = this.state;\n        let [deltaX] = props.delta;\n\n        if (!this.props.allowNext && deltaX < 0) {\n            deltaX = 0;\n        }\n\n        if (!this.props.allowPrev && deltaX > 0) {\n            deltaX = 0;\n        }\n\n        let translateX = x || `${props.down ? deltaX : 0}px`;\n\n        if (cooldown && props.cancel) {\n            props.cancel();\n        }\n\n        return (\n            <MobileMenuTableWrapper\n                animate={Boolean(x)}\n                style={{ transform: `translateX(${translateX})` }}\n            >\n                {props.children}\n            </MobileMenuTableWrapper>\n        );\n    }\n}\n"]}