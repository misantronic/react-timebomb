{"version":3,"sources":["src/menu-day.tsx"],"names":["React","$fsx","r","utils_1","styled_components_1","Flex","default","div","StyledDay","props","current","selected","today","disabled","exports","Day","PureComponent","[object Object]","super","this","state","enabled","onSelectDay","bind","value","selectWeek","day","getWeekOfYear","dateEqual","getMonth","date","isEnabled","isToday","updateState","prevProps","createElement","className","onClick","getDate","minDate","maxDate","dayChanged","minMaxChanged","setState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sLAAA,MAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,GACAE,EAAAH,EAAAC,EAAA,qBA2BMG,EAAOD,EAAAE,QAAOC;;;EAKdC,EAAYJ,EAAAE,QAAOD;;;;;aAKZI,GAA4BA,EAAMC,QAAU,UAAY;wBAC7CD,GAChBA,EAAME,SACA,OACAF,EAAMG,MACN,2BACA;mBACKH,GACXA,EAAME,SAAW,OAAS;sBACZF,GACdA,EAAMI,SAAW,OAAS;;eAEnBJ,GAA4BA,EAAMI,SAAW,GAAM;;;4BAGtCJ,GAChBA,EAAME,SAAW,OAAS;;EAItCG,EAAAC,IAAA,cAAyBf,EAAMgB,cAC3BC,YAAYR,GACRS,MAAMT,GAENU,KAAKC,MAAQ,CACTV,SAAS,EACTW,SAAS,EACTT,OAAO,EACPD,UAAU,GAGdQ,KAAKG,YAAcH,KAAKG,YAAYC,KAAKJ,MAG7CR,eACI,MAAMa,MAAEA,EAAAC,WAAOA,EAAAC,IAAYA,GAAQP,KAAKV,MAExC,OAAIgB,GAAcD,EACPrB,EAAAwB,cAAcH,KAAWrB,EAAAwB,cAAcD,GAG3CvB,EAAAyB,UAAUJ,EAAOE,GAG5BhB,cACI,OAAOS,KAAKV,MAAMiB,IAAIG,aAAeV,KAAKV,MAAMqB,KAAKD,WAGzDR,cACI,OAAOlB,EAAA4B,UAAU,MAAOZ,KAAKV,MAAMiB,IAAKP,KAAKV,OAGjDG,YACI,OAAOT,EAAA6B,QAAQb,KAAKV,MAAMiB,KAGvBT,oBACHE,KAAKc,cAGFhB,mBAAmBiB,GACtBf,KAAKc,YAAYC,GAGdjB,SACH,MAAMS,IAAEA,GAAQP,KAAKV,OACfE,SAAEA,EAAAD,QAAUA,EAAAW,QAASA,EAAAT,MAASA,GAAUO,KAAKC,MAEnD,OACIpB,EAAAmC,cAAC3B,EAAS,CACN4B,UAAWzB,EAAW,iBAAmB,QACzCA,SAAUA,EACVD,QAASA,EACTG,UAAWQ,EACXT,MAAOA,EACPyB,QAASlB,KAAKG,aAEbI,EAAIY,WAKTrB,YAAYiB,EAA+B,IAC/C,MAAMR,IAAEA,EAAAa,QAAKA,EAAAC,QAASA,GAAYrB,KAAKV,MACjCgC,GAActC,EAAAyB,UAAUM,EAAUR,IAAKA,GACvCgB,GACDvC,EAAAyB,UAAUM,EAAUK,QAASA,KAC7BpC,EAAAyB,UAAUM,EAAUM,QAASA,GAElCrB,KAAKwB,SAAS,CACVjC,QAASS,KAAKT,QACdW,QACIoB,GAAcC,EAAgBvB,KAAKE,QAAUF,KAAKC,MAAMC,QAC5DT,MAAO6B,EAAatB,KAAKP,MAAQO,KAAKC,MAAMR,MAC5CD,SAAUQ,KAAKR,WAIfM,cACJE,KAAKV,MAAMa,YAAYH,KAAKV,MAAMiB","sourcesContent":["import * as React from 'react';\nimport { getWeekOfYear, dateEqual, isEnabled, isToday } from './utils';\nimport styled from 'styled-components';\nimport { MenuProps } from './menu';\n\ninterface DayProps {\n    day: Date;\n    value: MenuProps['value'];\n    date: MenuProps['date'];\n    selectWeek: MenuProps['selectWeek'];\n    minDate: MenuProps['minDate'];\n    maxDate: MenuProps['maxDate'];\n    onSelectDay: MenuProps['onSelectDay'];\n}\n\ninterface DayState {\n    current: boolean;\n    enabled: boolean;\n    today: boolean;\n    selected: boolean;\n}\n\ninterface StyledDayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst StyledDay = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: StyledDayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: ${(props: StyledDayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: StyledDayProps) =>\n        props.selected ? 'bold' : 'normal'};\n    pointer-events: ${(props: StyledDayProps) =>\n        props.disabled ? 'none' : 'auto'};\n    user-select: none;\n    opacity: ${(props: StyledDayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: StyledDayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\nexport class Day extends React.PureComponent<DayProps, DayState> {\n    constructor(props: DayProps) {\n        super(props);\n\n        this.state = {\n            current: false,\n            enabled: true,\n            today: false,\n            selected: false\n        };\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n    }\n\n    private get selected() {\n        const { value, selectWeek, day } = this.props;\n\n        if (selectWeek && value) {\n            return getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return dateEqual(value, day);\n    }\n\n    private get current() {\n        return this.props.day.getMonth() === this.props.date.getMonth();\n    }\n\n    private get enabled() {\n        return isEnabled('day', this.props.day, this.props);\n    }\n\n    private get today() {\n        return isToday(this.props.day);\n    }\n\n    public componentDidMount() {\n        this.updateState();\n    }\n\n    public componentDidUpdate(prevProps: DayProps) {\n        this.updateState(prevProps);\n    }\n\n    public render() {\n        const { day } = this.props;\n        const { selected, current, enabled, today } = this.state;\n\n        return (\n            <StyledDay\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={!enabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {day.getDate()}\n            </StyledDay>\n        );\n    }\n\n    private updateState(prevProps: Partial<DayProps> = {}) {\n        const { day, minDate, maxDate } = this.props;\n        const dayChanged = !dateEqual(prevProps.day, day);\n        const minMaxChanged =\n            !dateEqual(prevProps.minDate, minDate) ||\n            !dateEqual(prevProps.maxDate, maxDate);\n\n        this.setState({\n            current: this.current,\n            enabled:\n                dayChanged || minMaxChanged ? this.enabled : this.state.enabled,\n            today: dayChanged ? this.today : this.state.today,\n            selected: this.selected\n        });\n    }\n\n    private onSelectDay() {\n        this.props.onSelectDay(this.props.day);\n    }\n}\n"]}