{"version":3,"sources":["src/utils.ts","src/components/number-input.tsx"],"names":["moment_1","$fsx","r","momentImport","moment","default","dateFormat","date","format","isArray","map","getFormatType","test","exports","formatSplitExpr","validateDate","dates","instance","isValid","toDate","undefined","filter","d","Boolean","length","formatIsActualNumber","validateFormatGroup","input","formatType","isFinite","int","parseInt","char","String","strLen","startsWith","validateFormatType","stringFromCharCode","parts","strParts","part","HTMLElement","innerText","val","dateA","startOfDay","dBi","dateB","i","getTime","value","replaceSpaceWithNbsp","str","replace","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","DOT","COMMA","React","styled_components_1","utils_1","Steps","div","Step","button","InputContainer","Input","NumberInput","PureComponent","[object Object]","props","super","this","ref","createRef","state","onChange","bind","onFocusIn","onFocusOut","onStepUp","onStepDown","onKeyUp","renderedValue","focused","formatNumberRaw","setStateValue","prevProps","prevState","mode","setDateValue","step","createElement","className","onMouseEnter","onMouseLeave","data-react-timebomb-selectable","type","onFocus","onBlur","tabIndex","onClick","setState","getDateValue","newDate","Date","newValue","setHours","setMinutes","getHours","getMinutes","document","querySelector","current","e","currentTarget","preventDefault","keyCode","onSubmit","onCancel","defaultProps"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\nimport { ReactTimebombDate, FormatType } from './typings';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\n\nexport const formatSplitExpr = /[.|:|\\-|\\\\|_|\\s]/;\n\nexport function dateFormat(date: Date, format: string): string;\nexport function dateFormat(date: Date[], format: string): string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[] {\n    if (isArray(date)) {\n        return date.map(date => moment(date).format(format));\n    } else {\n        return moment(date).format(format);\n    }\n}\n\nexport function validateDate(\n    date: string | string[] | undefined,\n    format: string\n): ReactTimebombDate {\n    if (isArray(date)) {\n        const dates = date\n            .map(date => {\n                const instance = moment(date, format, true);\n\n                return instance.isValid() ? instance.toDate() : undefined;\n            })\n            .filter(d => Boolean(d)) as Date[];\n\n        return dates.length === 0 ? undefined : dates;\n    } else {\n        const instance = moment(date, format, true);\n\n        return instance.isValid() ? instance.toDate() : undefined;\n    }\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/^D/.test(format)) {\n        return 'day';\n    }\n\n    if (/^M/.test(format)) {\n        return 'month';\n    }\n\n    if (/^Y/.test(format)) {\n        return 'year';\n    }\n\n    if (/^H/.test(format)) {\n        return 'hour';\n    }\n\n    if (/^m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/^s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\nexport function formatIsActualNumber(format: string) {\n    // day / year\n    if (/D|Y|H|m|s/.test(format)) {\n        return true;\n    }\n\n    // month\n    if (format === 'M' || format === 'MM') {\n        return true;\n    }\n\n    return false;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    const formatType = getFormatType(format);\n\n    return validateFormatType(input, formatType);\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatType(\n    input: string | number,\n    formatType?: FormatType\n) {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n\n        switch (formatType) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nconst ALLOWED_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n    const char = String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n\n    if (ALLOWED_CHARS.includes(char)) {\n        return char;\n    }\n\n    return '';\n}\n\nexport function formatNumber(number: number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function formatNumberRaw(number: number): string {\n    if (number <= 9) {\n        return `0${number || 0}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    const formattedDate = dateFormat(date, format);\n\n    return formattedDate\n        .split(formatSplitExpr)\n        .filter(group => group && formatSplitExpr.test(group) === false);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplitExpr);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function selectElement(\n    el: HTMLElement | undefined,\n    caret?: number[]\n): void {\n    if (el) {\n        const range = document.createRange();\n        const sel = getSelection();\n\n        if (caret === undefined) {\n            range.selectNodeContents(el);\n        } else {\n            const [start, end] = caret;\n\n            range.setStart(el, start);\n            range.setEnd(el, end);\n        }\n\n        sel.removeAllRanges();\n        sel.addRange(range);\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract',\n    timeStep?: number\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractMinutes(date, timeStep || 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractSeconds(date, timeStep || 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function dateEqual(\n    dateA?: ReactTimebombDate,\n    dateB?: ReactTimebombDate,\n    considerTime = false\n) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    if (considerTime) {\n        if (isArray(dateA)) {\n            dateA = dateA.map(startOfDay);\n        } else {\n            dateA = startOfDay(dateA);\n        }\n\n        if (isArray(dateB)) {\n            dateB = dateB.map(startOfDay);\n        } else {\n            dateB = startOfDay(dateB);\n        }\n    }\n\n    if (isArray(dateA) && isArray(dateB)) {\n        return dateA.every((date, i) => {\n            const dBi = dateB![i];\n\n            if (date && dBi) {\n                return date.getTime() === dBi.getTime();\n            }\n\n            return false;\n        });\n    } else if (isArray(dateA) && dateB instanceof Date) {\n        return dateA.some(d => d.getTime() === (dateB as Date).getTime());\n    } else if (isArray(dateB) && dateA instanceof Date) {\n        return dateB.some(d => d.getTime() === (dateA as Date).getTime());\n    } else if (!isArray(dateA) && !isArray(dateB)) {\n        return dateA.getTime() === dateB.getTime();\n    }\n\n    return false;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function getWeekdayNames() {\n    return moment.weekdaysShort();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport function isDateFormat(format: string) {\n    return Boolean(/D|M|Y/.test(format));\n}\n\nexport function isTimeFormat(format: string) {\n    return Boolean(/H|h|m|k|a|S|s/.test(format));\n}\n\nexport function sortDates(a: Date, b: Date) {\n    return a.getTime() - b.getTime();\n}\n\nexport function isArray(val: any): val is any[] {\n    return Array.isArray(val);\n}\n\nexport function fillZero(value: string | number, formatType: FormatType) {\n    value = String(value);\n\n    switch (formatType) {\n        case 'day':\n            if (value === '1' || value === '2' || value === '3') {\n                return `0${value}`;\n            }\n            break;\n        case 'month':\n            if (value === '1') {\n                return `0${value}`;\n            }\n            break;\n    }\n\n    return undefined;\n}\n\nexport function replaceSpaceWithNbsp(str?: string) {\n    if (!str) {\n        return str;\n    }\n\n    return str.replace(' ', ' ');\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    DOT: 190,\n    COMMA: 188\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { FormatType } from '../typings';\nimport { formatNumberRaw, keys } from '../utils';\n\nconst Steps = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 24px;\n    height: 100%;\n    border-width: 0 1px;\n    border-style: solid;\n    border-color: #ccc;\n    visibility: hidden;\n`;\n\nconst Step = styled.button`\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    border: none;\n    flex: 1;\n    font-size: 8px;\n    color: #ccc;\n    cursor: pointer;\n    -webkit-appearance: none;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:hover {\n        background: #eee;\n        color: #000;\n    }\n`;\n\nconst InputContainer = styled.div`\n    position: relative;\n    flex: 1;\n    display: flex;\n\n    &:hover {\n        ${Steps} {\n            visibility: visible;\n        }\n    }\n\n    &:last-child {\n        ${Steps} {\n            border-right: none;\n        }\n    }\n`;\n\nconst Input = styled.input`\n    flex: 1;\n    padding: 0 25px 0 6px;\n    margin: 0;\n    width: 50%;\n    min-height: 32px;\n    text-align: center;\n    border: none;\n\n    // @see https://stackoverflow.com/a/4298216/1138860\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n        /* display: none; <- Crashes Chrome on hover */\n        -webkit-appearance: none;\n        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    &:focus {\n        background: #eee;\n\n        + ${Steps} {\n            visibility: visible;\n        }\n    }\n`;\n\ninterface NumberInputProps {\n    date: Date;\n    mode: FormatType;\n    step?: number;\n    onChange(date: Date, mode: FormatType): void;\n    onSubmit(date: Date, mode: FormatType): void;\n    onCancel(date: undefined, mode: FormatType): void;\n}\n\ninterface NumberInputState {\n    value?: any;\n    focused?: boolean;\n}\n\nexport class NumberInput extends React.PureComponent<\n    NumberInputProps,\n    NumberInputState\n> {\n    private ref = React.createRef<HTMLInputElement>();\n\n    private get renderedValue() {\n        if (this.state.focused) {\n            return this.state.value;\n        } else {\n            return isFinite(this.state.value)\n                ? formatNumberRaw(this.state.value)\n                : '';\n        }\n    }\n\n    constructor(props: NumberInputProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onChange = this.onChange.bind(this);\n        this.onFocusIn = this.onFocusIn.bind(this);\n        this.onFocusOut = this.onFocusOut.bind(this);\n        this.onStepUp = this.onStepUp.bind(this);\n        this.onStepDown = this.onStepDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n    }\n\n    public static defaultProps: Partial<NumberInputProps> = {\n        step: 1\n    };\n\n    public componentDidMount() {\n        const { date } = this.props;\n\n        if (date) {\n            this.setStateValue();\n        }\n    }\n\n    public componentDidUpdate(\n        prevProps: NumberInputProps,\n        prevState: NumberInputState\n    ) {\n        const { date, mode, onChange } = this.props;\n        const { value, focused } = this.state;\n\n        if (date && prevProps.date.getTime() !== date.getTime()) {\n            this.setStateValue();\n        }\n\n        if (prevState.value !== value && value !== '' && focused) {\n            const newDate = this.setDateValue(value);\n\n            onChange(newDate, mode);\n        }\n    }\n\n    public render() {\n        const { step, mode } = this.props;\n\n        return (\n            <InputContainer\n                className={`react-timebomb-number-input ${mode}`}\n                onMouseEnter={this.onFocusIn}\n                onMouseLeave={this.onFocusOut}\n            >\n                <Input\n                    data-react-timebomb-selectable\n                    type=\"number\"\n                    ref={this.ref}\n                    step={step}\n                    value={this.renderedValue}\n                    onChange={this.onChange}\n                    onFocus={this.onFocusIn}\n                    onBlur={this.onFocusOut}\n                    onKeyUp={this.onKeyUp}\n                />\n                <Steps>\n                    <Step\n                        data-react-timebomb-selectable\n                        tabIndex={-1}\n                        onClick={this.onStepUp}\n                    >\n                        ▲\n                    </Step>\n                    <Step\n                        data-react-timebomb-selectable\n                        tabIndex={-1}\n                        onClick={this.onStepDown}\n                    >\n                        ▼\n                    </Step>\n                </Steps>\n            </InputContainer>\n        );\n    }\n\n    private setStateValue(value = this.props.date) {\n        this.setState({ value: this.getDateValue(value) });\n    }\n\n    private setDateValue(value: string | number) {\n        const newDate = new Date(this.props.date);\n        const newValue = parseInt((value as any) || '0', 10);\n\n        switch (this.props.mode) {\n            case 'hour':\n                newDate.setHours(newValue);\n                break;\n            case 'minute':\n                newDate.setMinutes(newValue);\n                break;\n        }\n\n        return newDate;\n    }\n\n    private getDateValue(date: Date) {\n        switch (this.props.mode) {\n            case 'hour':\n                return date.getHours();\n            case 'minute':\n                return date.getMinutes();\n        }\n\n        return 0;\n    }\n\n    private onFocusIn() {\n        this.setState({ focused: true });\n    }\n\n    private onFocusOut() {\n        if (document.querySelector(':focus') !== this.ref.current) {\n            this.setState({ focused: false });\n        }\n    }\n\n    private onChange(e: React.SyntheticEvent<HTMLInputElement>) {\n        const { date } = this.props;\n        const { value } = e.currentTarget;\n\n        if (value.length > 2) {\n            e.preventDefault();\n            return;\n        }\n\n        if (value === '') {\n            this.setState({ value });\n        } else if (date) {\n            const newDate = this.setDateValue(value);\n\n            this.setStateValue(newDate);\n        }\n    }\n\n    private onStepUp() {\n        const { date, step } = this.props;\n        const { value } = this.state;\n\n        if (date && value !== undefined) {\n            const newDate = this.setDateValue(value + step!);\n\n            this.setStateValue(newDate);\n        }\n    }\n\n    private onStepDown() {\n        const { date, step } = this.props;\n        const { value } = this.state;\n\n        if (date && value !== undefined) {\n            const newDate = this.setDateValue(value - step!);\n\n            this.setStateValue(newDate);\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLInputElement>) {\n        switch (e.keyCode) {\n            case keys.ENTER:\n                this.props.onSubmit(this.props.date, this.props.mode);\n                break;\n            case keys.ESC:\n                this.props.onCancel(undefined, this.props.mode);\n                break;\n        }\n    }\n}\n"]}