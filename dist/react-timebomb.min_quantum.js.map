{"version":3,"sources":["src/menu/index.tsx","src/components/button.tsx","src/menu/table.tsx"],"names":["React","$fsx","r","styled_components_1","button_1","utils_1","mobile_1","table_1","time_1","MonthAndYearContainer","default","div","props","mobile","MonthsContainer","MonthContainer","YearContainer","Confirm","MobileMenuTable","MenuTable","getDate","date","selectedRange","isArray","MenuMonths","value","monthNames","useState","getMonthNames","valueDate","month","getMonth","year","getFullYear","onChangeMonth","e","Date","getAttribute","currentTarget","setTimeout","createElement","className","map","str","i","newDate","setMonth","enabled","isEnabled","selected","Button","key","tabIndex","undefined","disabled","data-date","toISOString","onClick","MenuYear","minDate","maxDate","yearContainer","setYearContainer","scrollToYear","querySelector","scrollIntoView","scrollBy","top","onSelectYear","onChangeYear","useEffect","ref","el","getDateConfig","newYear","setFullYear","setSeconds","getSeconds","setMinutes","getMinutes","setHours","getHours","setDate","currentYear","Array","fill","_","filter","obj","reverse","minYear","array","push","now","currentDate","getFullYears","fullYear","dateStr","MenuConfirm","valueText","format","validDate","validateDate","isValid","every","v","onSubmit","MonthWrapper","GestureWrapper","allowNext","addDays","endOfMonth","allowPrev","subtractDays","startOfMonth","direction","addMonths","subtractMonths","selectRange","showCalendarWeek","showConfirm","showTime","onSelectDay","hoverDate","onHoverDays","exports","Menu","mode","showDate","ConfirmComponent","confirmComponent","Object","assign","MenuTime","timeStep","topDivider","onChange","onSelectTime","onSubmitTime","onCancel","StyledButton","button","css","data-react-timebomb-selectable","data-role","type","SmallButton","ArrowButton","id","open","day_1","Table","table","hoverDays","setHoverDays","selectedDates","setSelectedDates","current","weekdayNames","useRef","getWeekdayNames","sun","mon","tue","wed","thu","fri","sat","c","Boolean","join","monthMatrix","useMemo","dateMonth","dateYear","weeks","base","week","startOfWeek","endOfWeek","weekStart","getCacheKey","onDayMouseEnter","day","days","firstDay","onDayMouseLeave","reduce","memo","dates","config","dayWeekOfYear","getWeekOfYear","some","length","firstHover","lastHover","dateEqual","getSelected","cellSpacing","cellPadding","weekNum","d","isSameDay","WeekNum","hover","hoverDay","selectedStart","selectedEnd","Day","onMouseEnter","onMouseLeave"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState } from '../';\nimport { Button } from '../components/button';\nimport { ReactTimebombDate, ReactTimebombMenuProps } from '../typings';\nimport {\n    addDays,\n    addMonths,\n    endOfMonth,\n    getAttribute,\n    getMonthNames,\n    isArray,\n    isEnabled,\n    startOfMonth,\n    subtractDays,\n    subtractMonths,\n    validateDate\n} from '../utils';\nimport { GestureDirection, GestureWrapper } from './mobile';\nimport { MenuTable } from './table';\nimport { MenuTime } from './time';\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0;\n    height: 100%;\n    overflow: hidden;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst MobileMenuTable = styled(MenuTable)`\n    width: 33.3%;\n`;\n\nfunction getDate(\n    date: ReactTimebombDate,\n    selectedRange: ReactTimebombState['selectedRange']\n) {\n    return (isArray(date) ? date[selectedRange] : date)!;\n}\n\nfunction MenuMonths(props: ReactTimebombMenuProps) {\n    const { value, mobile, selectedRange } = props;\n    const [monthNames] = React.useState(getMonthNames(true));\n    const valueDate = getDate(value, selectedRange);\n    const date = getDate(props.date, selectedRange);\n    const month = value && valueDate.getMonth();\n    const year = value && valueDate.getFullYear();\n\n    function onChangeMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onChangeMonth(date), 0);\n    }\n\n    return (\n        <MonthsContainer mobile={mobile} className=\"months\">\n            {monthNames.map((str, i) => {\n                const newDate = new Date(date);\n\n                newDate.setMonth(i);\n\n                const enabled = isEnabled('month', newDate, props);\n                const selected =\n                    month === newDate.getMonth() &&\n                    year === newDate.getFullYear();\n\n                return (\n                    <Button\n                        key={str}\n                        tabIndex={-1}\n                        className={selected ? 'selected' : undefined}\n                        selected={selected}\n                        disabled={!enabled}\n                        mobile={props.mobile}\n                        data-date={newDate.toISOString()}\n                        onClick={onChangeMonth}\n                    >\n                        {str}\n                    </Button>\n                );\n            })}\n        </MonthsContainer>\n    );\n}\n\nfunction MenuYear(props: ReactTimebombMenuProps) {\n    const { value, minDate, maxDate } = props;\n    const [\n        yearContainer,\n        setYearContainer\n    ] = React.useState<HTMLDivElement | null>(null);\n\n    React.useEffect(scrollToYear, [props.date]);\n\n    function scrollToYear() {\n        if (yearContainer) {\n            const selected = yearContainer.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n\n                if (yearContainer.scrollBy) {\n                    yearContainer.scrollBy({ top: -10 });\n                }\n            }\n        }\n    }\n\n    function getFullYears() {\n        const valueDate = getDate(value, props.selectedRange);\n        const year = getDate(props.date, props.selectedRange).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = new Date();\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    function onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onChangeYear(date), 0);\n    }\n\n    function onYearContainer(el: HTMLDivElement | null) {\n        setYearContainer(el);\n        scrollToYear();\n    }\n\n    return (\n        <YearContainer ref={onYearContainer} className=\"years\">\n            {getFullYears()\n                .map(({ date, selected }) => {\n                    const fullYear = date.getFullYear();\n                    const dateStr = date.toISOString();\n\n                    return (\n                        <Button\n                            key={dateStr}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            mobile={props.mobile}\n                            data-date={dateStr}\n                            onClick={onSelectYear}\n                        >\n                            {fullYear}\n                        </Button>\n                    );\n                })\n                .reverse()}\n        </YearContainer>\n    );\n}\n\nfunction MenuConfirm(props: ReactTimebombMenuProps) {\n    const { valueText, format } = props;\n    const validDate = validateDate(valueText, format);\n    const isValid = validDate\n        ? isArray(validDate)\n            ? validDate.every(v => isEnabled('day', v, props))\n            : isEnabled('day', validDate, props)\n        : false;\n\n    return (\n        <Confirm>\n            <Button\n                tabIndex={-1}\n                disabled={!isValid}\n                mobile={props.mobile}\n                onClick={() => props.onSubmit()}\n            >\n                Ok\n            </Button>\n        </Confirm>\n    );\n}\n\nfunction MonthWrapper(props: ReactTimebombMenuProps) {\n    const { minDate, maxDate, mobile } = props;\n\n    function allowPrev() {\n        let date = props.date;\n\n        if (!minDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (subtractDays(startOfMonth(date), 1) < minDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function allowNext() {\n        let date = props.date;\n\n        if (!maxDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (addDays(endOfMonth(date), 1) > maxDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function onChangeMonth(direction: GestureDirection) {\n        const { onChangeMonth } = props;\n        const date = getDate(props.date, props.selectedRange);\n\n        switch (direction) {\n            case 'next':\n                onChangeMonth(addMonths(date, 1));\n                break;\n            case 'prev':\n                onChangeMonth(subtractMonths(date, 1));\n                break;\n        }\n    }\n\n    if (mobile) {\n        return (\n            <GestureWrapper\n                allowNext={allowNext()}\n                allowPrev={allowPrev()}\n                onChangeMonth={onChangeMonth}\n            >\n                <MobileMenuTable\n                    date={subtractMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={subtractMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={props.date}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={props.value}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={addMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={addMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n            </GestureWrapper>\n        );\n    }\n\n    return (\n        <MenuTable\n            date={props.date}\n            minDate={props.minDate}\n            maxDate={props.maxDate}\n            mobile={props.mobile}\n            selectRange={props.selectRange}\n            selectedRange={props.selectedRange}\n            showCalendarWeek={props.showCalendarWeek}\n            showConfirm={props.showConfirm}\n            showTime={props.showTime}\n            value={props.value}\n            hoverDate={props.hoverDate}\n            onSubmit={props.onSubmit}\n            onSelectDay={props.onSelectDay}\n            onHoverDays={props.onHoverDays}\n        />\n    );\n}\n\nexport function Menu(props: ReactTimebombMenuProps) {\n    const { mode, mobile, showDate, showConfirm, showTime } = props;\n    const ConfirmComponent = props.confirmComponent || MenuConfirm;\n\n    if (showDate || showTime) {\n        switch (mode) {\n            case 'year':\n            case 'month':\n                return (\n                    <MonthAndYearContainer mobile={mobile}>\n                        <MenuMonths {...props} />\n                        <MenuYear {...props} />\n                    </MonthAndYearContainer>\n                );\n            case 'day':\n            case 'hour':\n            case 'minute':\n            case 'second':\n                return (\n                    <MonthContainer>\n                        {showDate && <MonthWrapper {...props} />}\n                        {showTime && (\n                            <MenuTime\n                                date={props.date}\n                                timeStep={props.timeStep}\n                                topDivider={props.showDate}\n                                format={props.format}\n                                onChange={props.onSelectTime}\n                                onSubmit={props.onSubmitTime}\n                                onCancel={props.onSubmitTime}\n                            />\n                        )}\n                        {showConfirm && <ConfirmComponent {...props} />}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    return null;\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\n\nexport interface ButtonProps {\n    selected?: boolean;\n    mobile?: boolean;\n}\n\nconst StyledButton = styled.button`\n    margin-right: 5px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n    padding: 3px 6px;\n    height: 21px;\n    line-height: 1;\n    box-sizing: border-box;\n    background: ${(props: ButtonProps) => (props.selected ? '#ccc' : '#fff')};\n\n    ${(props: ButtonProps) =>\n        props.mobile\n            ? css`\n                  font-size: 16px;\n                  margin-right: 6px;\n                  padding: 6px 12px;\n                  height: auto;\n                  min-height: 21px;\n              `\n            : ''}\n\n    &:focus {\n        outline: none;\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    &:not(:disabled) {\n        cursor: pointer;\n    }\n\n    &:not(:disabled):hover {\n        background-color: ${(props: ButtonProps) =>\n            props.selected ? '#ccc' : '#efefef'};\n    }\n\n    &:last-child {\n        margin-right: 0;\n    }\n`;\n\nexport const Button = (props: ButtonProps & React.ButtonHTMLAttributes<{}>) => (\n    <StyledButton\n        data-react-timebomb-selectable\n        data-role=\"button\"\n        type=\"button\"\n        {...props}\n    />\n);\n\nexport const SmallButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n\n    &:hover:not(:disabled) {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport interface ArrowButtonProps {\n    open?: boolean;\n    disabled?: boolean;\n    id?: string;\n    onClick?(): void;\n}\n\nexport const ArrowButton = (props: ArrowButtonProps) => (\n    <SmallButton\n        className=\"react-timebomb-arrow\"\n        id={props.id}\n        disabled={props.disabled}\n        tabIndex={-1}\n        onClick={props.onClick}\n    >\n        {props.open ? '▲' : '▼'}\n    </SmallButton>\n);\n","import * as React from 'react';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombDate\n} from '../typings';\nimport {\n    startOfMonth,\n    startOfWeek,\n    endOfWeek,\n    addDays,\n    getWeekdayNames,\n    getWeekOfYear,\n    isArray,\n    dateEqual,\n    isEnabled,\n    isSameDay\n} from '../utils';\nimport styled from 'styled-components';\nimport { WeekNum, Day } from './day';\n\ninterface MenuTableProps {\n    className?: string;\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    hoverDate?: ReactTimebombState['hoverDate'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    onSelectDay(date: Date): void;\n    onHoverDays?(dates: Date[]): void;\n    onSubmit(): void;\n}\n\nconst Table = styled.table`\n    width: 100%;\n    height: 186px;\n    table-layout: fixed;\n    font-size: inherit;\n    user-select: none;\n    padding: 5px 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        th {\n            padding: 3px 2px;\n            width: 14.285714286%;\n            text-align: center;\n        }\n\n        td {\n            width: 14.285714286%;\n        }\n    }\n`;\n\nfunction getSelected(config: {\n    day: Date;\n    value: ReactTimebombDate;\n    selectRange: ReactTimebombProps['selectRange'];\n    hoverDays: Date[];\n    showTime?: boolean;\n}) {\n    const { day, value, hoverDays, showTime, selectRange } = config;\n\n    if (value) {\n        if (selectRange === 'week') {\n            const dayWeekOfYear = getWeekOfYear(day);\n\n            if (isArray(value)) {\n                return value.some(v => getWeekOfYear(v) === dayWeekOfYear);\n            }\n\n            return getWeekOfYear(value) === dayWeekOfYear;\n        }\n\n        if (selectRange && isArray(value)) {\n            const [minDate, maxDate] = value;\n\n            if (value.length === 1 && hoverDays.length) {\n                const firstHover = hoverDays[0];\n                const lastHover = hoverDays[hoverDays.length - 1];\n\n                return isEnabled('day', day, {\n                    minDate: minDate < firstHover ? minDate : firstHover,\n                    maxDate: minDate > lastHover ? minDate : lastHover\n                });\n            }\n\n            if (value.length === 2) {\n                return isEnabled('day', day, {\n                    minDate,\n                    maxDate\n                });\n            }\n        }\n    }\n\n    return dateEqual(value, day, showTime);\n}\n\nexport function MenuTable(props: MenuTableProps) {\n    const {\n        value,\n        showCalendarWeek,\n        selectRange,\n        selectedRange,\n        showConfirm,\n        hoverDate,\n        showTime,\n        onSubmit\n    } = props;\n    const [hoverDays, setHoverDays] = React.useState<Date[]>(\n        getDefaultHoverDays()\n    );\n    const [selectedDates, setSelectedDates] = React.useState<Date[]>([]);\n    const { current: weekdayNames } = React.useRef(getWeekdayNames());\n    const [sun, mon, tue, wed, thu, fri, sat] = weekdayNames;\n    const className = ['month', props.className]\n        .filter(c => Boolean(c))\n        .join(' ');\n\n    const monthMatrix = React.useMemo(() => {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }, [getCacheKey()]);\n\n    React.useEffect(() => {\n        if (props.onHoverDays) {\n            props.onHoverDays(hoverDays);\n        }\n    }, [hoverDays]);\n\n    React.useEffect(() => {\n        setSelectedDates(\n            monthMatrix.reduce((memo, dates) => {\n                memo.push(\n                    ...dates.filter(day =>\n                        getSelected({\n                            day,\n                            value,\n                            selectRange,\n                            hoverDays,\n                            showTime\n                        })\n                    )\n                );\n\n                return memo;\n            }, [])\n        );\n    }, [monthMatrix, hoverDays, value]);\n\n    function getDefaultHoverDays() {\n        if (!hoverDate) {\n            return [];\n        }\n\n        if (isArray(value)) {\n            return [value[0], hoverDate];\n        }\n\n        return [];\n    }\n\n    function getCacheKey() {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        return `${dateMonth}-${dateYear}`;\n    }\n\n    function getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[selectedRange] : date)!;\n    }\n\n    function onSelectDay(date: Date): void {\n        props.onSelectDay(date);\n\n        if (!showConfirm && !selectRange) {\n            onSubmit();\n        }\n    }\n\n    function onDayMouseEnter(day: Date) {\n        if (typeof selectRange === 'number') {\n            const days = Array(selectRange)\n                .fill(null)\n                .map((_, i) => addDays(day, i));\n\n            setHoverDays(days);\n        } else if (selectRange === 'week') {\n            const firstDay = startOfWeek(day);\n            const days = Array(7)\n                .fill(null)\n                .map((_, i) => addDays(firstDay, i));\n\n            setHoverDays(days);\n        } else {\n            setHoverDays([day]);\n        }\n    }\n\n    function onDayMouseLeave() {\n        setHoverDays([]);\n    }\n\n    return (\n        <Table className={className} cellSpacing={0} cellPadding={0}>\n            <thead>\n                <tr>\n                    {showCalendarWeek && <th className=\"calendar-week\" />}\n                    <th>{mon}</th>\n                    <th>{tue}</th>\n                    <th>{wed}</th>\n                    <th>{thu}</th>\n                    <th>{fri}</th>\n                    <th>{sat}</th>\n                    <th>{sun}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {monthMatrix.map(dates => {\n                    const weekNum = getWeekOfYear(dates[0]);\n                    const selected = dates.some(day =>\n                        selectedDates.some(d => isSameDay(d, day))\n                    );\n                    const selectedStart = dates.some(day =>\n                        dateEqual(selectedDates[0], day)\n                    );\n                    const selectedEnd = dates.some(day =>\n                        dateEqual(selectedDates[selectedDates.length - 1], day)\n                    );\n\n                    const className = [\n                        'day',\n                        selected && 'selected',\n                        selectedStart && 'selected-start',\n                        selectedEnd && 'selected-end'\n                    ]\n                        .filter(c => c)\n                        .join(' ');\n\n                    return (\n                        <tr key={weekNum} className={className}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    <WeekNum\n                                        day={dates[0]}\n                                        onClick={onSelectDay}\n                                    >\n                                        {weekNum}\n                                    </WeekNum>\n                                </td>\n                            )}\n                            {dates.map(day => {\n                                const hover = hoverDays.some(hoverDay =>\n                                    dateEqual(hoverDay, day)\n                                );\n                                const selected = selectedDates.some(d =>\n                                    isSameDay(d, day)\n                                );\n                                const selectedStart = dateEqual(\n                                    selectedDates[0],\n                                    day\n                                );\n                                const selectedEnd = dateEqual(\n                                    selectedDates[selectedDates.length - 1],\n                                    day\n                                );\n                                const className = [\n                                    'day',\n                                    selected && 'selected',\n                                    selectedStart && 'selected-start',\n                                    selectedEnd && 'selected-end'\n                                ]\n                                    .filter(c => c)\n                                    .join(' ');\n\n                                return (\n                                    <td\n                                        key={day.toISOString()}\n                                        className={className}\n                                    >\n                                        <Day\n                                            day={day}\n                                            hover={hover}\n                                            selected={selected}\n                                            selectedStart={selectedStart}\n                                            selectedEnd={selectedEnd}\n                                            date={props.date}\n                                            minDate={props.minDate}\n                                            maxDate={props.maxDate}\n                                            showTime={props.showTime}\n                                            onSelectDay={onSelectDay}\n                                            onMouseEnter={onDayMouseEnter}\n                                            onMouseLeave={onDayMouseLeave}\n                                        />\n                                    </td>\n                                );\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </Table>\n    );\n}\n"]}