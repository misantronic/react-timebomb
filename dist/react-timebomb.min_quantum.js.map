{"version":3,"sources":["src/number-input.tsx"],"names":["React","$fsx","r","styled_components_1","utils_1","Steps","default","div","Step","button","InputContainer","Input","input","NumberInput","PureComponent","[object Object]","props","super","this","state","onChange","bind","onFocusIn","onFocusOut","onStepUp","onStepDown","renderedValue","focused","value","isFinite","formatNumberRaw","date","setState","getDateValue","prevProps","prevState","mode","getTime","manipulateDate","step","createElement","className","onMouseEnter","onMouseLeave","data-react-timebomb-selectable","type","onFocus","tabIndex","onClick","newDate","Date","newValue","parseInt","setHours","setMinutes","getHours","getMinutes","e","currentTarget","undefined","defaultProps","exports"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { FormatType } from './typings';\nimport { formatNumberRaw } from './utils';\n\nconst Steps = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 24px;\n    height: 100%;\n    border-width: 0 1px;\n    border-style: solid;\n    border-color: #ccc;\n    visibility: hidden;\n`;\n\nconst Step = styled.button`\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    border: none;\n    flex: 1;\n    font-size: 8px;\n    color: #ccc;\n    cursor: pointer;\n    -webkit-appearance: none;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:hover {\n        background: #eee;\n        color: #000;\n    }\n`;\n\nconst InputContainer = styled.div`\n    position: relative;\n    flex: 1;\n    display: flex;\n\n    &:hover {\n        ${Steps} {\n            visibility: visible;\n        }\n    }\n\n    &:last-child {\n        ${Steps} {\n            border-right: none;\n        }\n    }\n`;\n\nconst Input = styled.input`\n    flex: 1;\n    padding: 0 25px 0 6px;\n    margin: 0;\n    width: 50%;\n    min-height: 32px;\n    text-align: center;\n    border: none;\n\n    // @see https://stackoverflow.com/a/4298216/1138860\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n        /* display: none; <- Crashes Chrome on hover */\n        -webkit-appearance: none;\n        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    &:focus {\n        background: #eee;\n\n        + ${Steps} {\n            visibility: visible;\n        }\n    }\n`;\n\ninterface NumberInputProps {\n    date: Date;\n    mode: FormatType;\n    step?: number;\n    onChange(date: Date, mode: FormatType): void;\n}\n\ninterface NumberInputState {\n    value?: any;\n    focused?: boolean;\n}\n\nexport class NumberInput extends React.PureComponent<\n    NumberInputProps,\n    NumberInputState\n> {\n    private get renderedValue() {\n        if (this.state.focused) {\n            return this.state.value;\n        } else {\n            return isFinite(this.state.value)\n                ? formatNumberRaw(this.state.value)\n                : '';\n        }\n    }\n\n    constructor(props: NumberInputProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onChange = this.onChange.bind(this);\n        this.onFocusIn = this.onFocusIn.bind(this);\n        this.onFocusOut = this.onFocusOut.bind(this);\n        this.onStepUp = this.onStepUp.bind(this);\n        this.onStepDown = this.onStepDown.bind(this);\n    }\n\n    public static defaultProps: Partial<NumberInputProps> = {\n        step: 1\n    };\n\n    public componentDidMount() {\n        const { date } = this.props;\n\n        if (date) {\n            this.setState({ value: this.getDateValue(date) });\n        }\n    }\n\n    public componentDidUpdate(\n        prevProps: NumberInputProps,\n        prevState: NumberInputState\n    ) {\n        const { date, mode, onChange } = this.props;\n        const { value, focused } = this.state;\n\n        if (date && prevProps.date.getTime() !== date.getTime()) {\n            this.setState({ value: this.getDateValue(date) });\n        }\n\n        if (prevState.value !== value && value !== '' && focused) {\n            const newDate = this.manipulateDate(value);\n\n            onChange(newDate, mode);\n        }\n    }\n\n    public render() {\n        const { step, mode } = this.props;\n\n        return (\n            <InputContainer\n                className={`react-timebomb-number-input ${mode}`}\n                onMouseEnter={this.onFocusIn}\n                onMouseLeave={this.onFocusOut}\n            >\n                <Input\n                    data-react-timebomb-selectable\n                    type=\"number\"\n                    step={step}\n                    value={this.renderedValue}\n                    onChange={this.onChange}\n                    onFocus={this.onFocusIn}\n                />\n                <Steps>\n                    <Step\n                        data-react-timebomb-selectable\n                        tabIndex={-1}\n                        onClick={this.onStepUp}\n                    >\n                        ▲\n                    </Step>\n                    <Step\n                        data-react-timebomb-selectable\n                        tabIndex={-1}\n                        onClick={this.onStepDown}\n                    >\n                        ▼\n                    </Step>\n                </Steps>\n            </InputContainer>\n        );\n    }\n\n    private manipulateDate(value: string | number) {\n        const newDate = new Date(this.props.date);\n        const newValue = parseInt((value as any) || '0', 10);\n\n        switch (this.props.mode) {\n            case 'hour':\n                newDate.setHours(newValue);\n                break;\n            case 'minute':\n                newDate.setMinutes(newValue);\n                break;\n        }\n\n        return newDate;\n    }\n\n    private getDateValue(date: Date) {\n        switch (this.props.mode) {\n            case 'hour':\n                return date.getHours();\n            case 'minute':\n                return date.getMinutes();\n        }\n\n        return 0;\n    }\n\n    private onFocusIn() {\n        this.setState({ focused: true });\n    }\n\n    private onFocusOut() {\n        this.setState({ focused: false });\n    }\n\n    private onChange(e: React.SyntheticEvent<HTMLInputElement>) {\n        const { date } = this.props;\n        const { value } = e.currentTarget;\n\n        if (value === '') {\n            this.setState({ value });\n        } else if (date) {\n            const newDate = this.manipulateDate(value);\n\n            this.setState({ value: this.getDateValue(newDate) });\n        }\n    }\n\n    private onStepUp() {\n        const { date, step } = this.props;\n        const { value } = this.state;\n\n        if (date && value !== undefined) {\n            const newDate = this.manipulateDate(value + step!);\n\n            this.setState({ value: this.getDateValue(newDate) });\n        }\n    }\n\n    private onStepDown() {\n        const { date, step } = this.props;\n        const { value } = this.state;\n\n        if (date && value !== undefined) {\n            const newDate = this.manipulateDate(value - step!);\n\n            this.setState({ value: this.getDateValue(newDate) });\n        }\n    }\n}\n"]}