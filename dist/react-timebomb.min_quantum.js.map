{"version":3,"sources":["src/index.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","onChangeFormatGroup","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","mobileWidth","MENU_WIDTH","MENU_HEIGHT","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","selectWeek","onOpen","menuWidth","Math","max","createElement","Select","open","onToggle","onRef","showMenu","getMobileMenuContainer","ref","renderValue","MenuTitle","onMonth","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","getFormatType","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps","button_1","arrow_button_1","Flex","Input","span","ClearButton","SmallButton","Placeholder","Icon","icon","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","PureComponent","inputs","e","currentTarget","selectElement","allSelected","formatGroup","getAttribute","onSearchRef","onKeyDown","onKeyUp","onClick","onDblClick","onBlur","formatGroups","reduce","memo","char","prevChar","substr","focused","document","querySelector","iconClass","some","inp","parts","splitDate","forEach","i","innerText","focus","find","el","forceUpdate","ArrowButtonComp","ArrowButton","showPlaceholder","showClearer","timeOnly","data-role","tabIndex","contentEditable","group","separator","data-react-timebomb-selectable","data-placeholder","data-separator","key","data-group","onDoubleClick","nextSibling","previousSibling","sel","getSelection","hasSelection","focusOffset","baseOffset","numericValue","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","manipulateDate","shiftKey","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","blur","parentNode","target","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n} from './typings';\nimport { ValueMulti } from './value-multi';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    position: relative;\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  max-height: 100%;\n                  font-size: 16px;\n\n                  /* TODO: add this to Button-component */\n                  button {\n                      font-size: 16px;\n                      margin-right: 6px;\n                      padding: 6px 12px;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentClass<MenuContainerProps, any>\n    ) {\n        if (!this.MobileMenuContainer) {\n            const mobileWidth = ReactTimebomb.MENU_WIDTH + 40;\n\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 50% !important;\n                top: 50% !important;\n                max-width: 96%;\n                width: ${mobileWidth}px !important;\n                height: ${ReactTimebomb.MENU_HEIGHT}px !important;\n                margin-left: -${mobileWidth / 2}px;\n                margin-top: -${ReactTimebomb.MENU_HEIGHT / 2}px;\n\n                @media (max-width: ${mobileWidth}px) {\n                    left: 0 !important;\n                    margin-left: 0;\n                    max-width: 100% !important;\n                    width: 100% !important;\n                }\n\n                &:before {\n                    content: '';\n                    position: fixed;\n                    background: rgba(0, 0, 0, 0.12);\n                    left: 0;\n                    top: 0;\n                    right: 0;\n                    top: 0;\n                    width: 100%;\n                    height: 100%;\n                    pointer-events: none;\n                }\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'day',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled,\n    selectElement\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { SmallButton } from './button';\nimport { ArrowButton } from './arrow-button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format, mode } = this.props;\n        const hasFocus = this.inputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.inputs[0];\n\n                    this.inputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const [input] = this.inputs;\n\n                    if (input) {\n                        selectElement(input);\n                    }\n                }\n            }\n        }\n\n        if (open && prevProps.mode !== mode && !this.state.allSelected) {\n            const input = this.inputs.find(el => {\n                const format = getAttribute(el, 'data-group');\n                const type = getFormatType(format);\n\n                return type === mode;\n            });\n\n            selectElement(input);\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n        }\n\n        if (open && prevProps.value && !value) {\n            this.inputs.forEach(input => (input.innerText = ''));\n        }\n\n        if (!open) {\n            this.setState({ allSelected: false });\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp disabled={disabled} open={open} />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = e.shiftKey ? 10 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        // TODO: this doesn't work quite how suppossed to\n        // if (this.state.allSelected) {\n        //     const char = stringFromCharCode(e.keyCode);\n        //     this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n        //     this.inputs[0].innerText = char;\n        // }\n\n        // validate group\n        if (!hasSelection && innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}