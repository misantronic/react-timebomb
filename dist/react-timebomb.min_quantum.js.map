{"version":3,"sources":["src/value/value.tsx","src/typings.ts","src/value/value-multi.tsx"],"names":["React","$fsx","r","styled_components_1","button_1","utils_1","exports","Flex","default","div","Container","props","disabled","Input","span","ClearButton","SmallButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","showTime","showDate","createElement","getIcon","className","DefaultClearComponent","tabIndex","onClick","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","Value","PureComponent","[object Object]","super","this","inputs","onFocus","timeout","e","clearTimeout","input","currentTarget","selectElement","setTimeout","state","allSelected","formatGroup","getAttribute","onChangeFormatGroup","onSearchRef","bind","onKeyDown","onKeyUp","onDblClick","onBlur","onChange","onClear","onToggle","formatGroups","format","split","reduce","memo","char","prevChar","length","substr","formatSplitExpr","test","focused","document","querySelector","prevProps","open","value","mode","allowValidation","hasFocus","some","inp","allowTextSelection","parts","splitDate","forEach","i","innerText","focus","find","el","getFormatType","setState","forceUpdate","placeholder","arrowButtonId","iconComponent","ArrowButtonComp","arrowButtonComponent","ArrowButton","ClearComponent","clearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","undefined","data-role","renderValue","id","mobile","LabelComponent","labelComponent","contentEditable","Object","assign","map","group","g","separator","data-react-timebomb-selectable","data-placeholder","data-separator","replaceSpaceWithNbsp","key","data-group","ref","onDoubleClick","push","onChangeValueText","timeStep","nextSibling","previousSibling","numericFormat","formatIsActualNumber","sel","getSelection","hasSelection","Boolean","focusOffset","anchorOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","newDate","manipulateDate","isEnabled","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","firstInput","validatedChar","clearSelection","onSubmit","blur","parentNode","onAllSelect","target","dataGroup","filledValue","fillZero","stopPropagation","ReactTimebombArrowButtonProps","ArrowButtonProps","value_1","Fragment","d","dateFormat","join","ValueMulti","useEffect","body","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton, SmallButton } from '../components/button';\nimport {\n    ClearComponentProps,\n    IconProps,\n    ReactTimebombValueProps\n} from '../typings';\nimport {\n    clearSelection,\n    fillZero,\n    formatIsActualNumber,\n    formatNumber,\n    formatSplitExpr,\n    getAttribute,\n    getFormatType,\n    isEnabled,\n    joinDates,\n    keys,\n    manipulateDate,\n    replaceSpaceWithNbsp,\n    selectElement,\n    splitDate,\n    stringFromCharCode,\n    validateFormatGroup\n} from '../utils';\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = (props: ClearComponentProps) => (\n    <ClearButton\n        className=\"react-timebomb-clearer\"\n        tabIndex={-1}\n        disabled={props.disabled}\n        onClick={props.onClick}\n    >\n        <ClearButtonX>×</ClearButtonX>\n    </ClearButton>\n);\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<\n    ReactTimebombValueProps,\n    ValueState\n> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ReactTimebombValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ReactTimebombValueProps): void {\n        setTimeout(() => {\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n                        const input = this.inputs[0];\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (input && allowTextSelection) {\n                            input.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            const [input] = this.inputs;\n\n                            if (input) {\n                                selectElement(input);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearComponent\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        />\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const LabelComponent = this.props.labelComponent;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...this.props} />;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = sel\n            ? Boolean(sel.focusOffset - sel.anchorOffset)\n            : false;\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n","import { ArrowButtonProps } from './components/button';\n\nexport type ReactTimebombDate = Date | undefined | Date[];\n\ntype ReactComponent<P = {}> =\n    | React.ComponentClass<P>\n    | React.StatelessComponent<P>;\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectRange?: 'week' | number | boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: any;\n    mobile?: boolean;\n    arrowButtonId?: string;\n    arrowButtonComponent?: ReactComponent<ArrowButtonProps>;\n    clearComponent?: ReactComponent<ClearComponentProps>;\n    iconComponent?: ReactComponent<IconProps> | null;\n    labelComponent?: ReactComponent<\n        ReactTimebombValueProps | ReactTimebombMultiValueProps\n    >;\n    timeStep?: number;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode?: FormatType;\n    showDate?: boolean;\n    showTime?: boolean;\n    selectedRange: number;\n    menuHeight: number | 'none';\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\nexport type FormatType =\n    | 'day'\n    | 'month'\n    | 'year'\n    | 'hour'\n    | 'minute'\n    | 'second';\n\nexport interface ReactTimebombValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    clearComponent: ReactTimebombProps['clearComponent'];\n    arrowButtonId: ReactTimebombProps['arrowButtonId'];\n    iconComponent: ReactTimebombProps['iconComponent'];\n    labelComponent: ReactTimebombProps['labelComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    timeStep: ReactTimebombProps['timeStep'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\nexport type ReactTimebombMultiValueProps = Omit<\n    ReactTimebombValueProps,\n    'value'\n> & {\n    value: undefined | Date[];\n};\n\nexport interface IconProps {\n    showDate?: boolean;\n    showTime?: boolean;\n}\n\nexport interface ClearComponentProps {\n    disabled?: boolean;\n    onClick(e: React.MouseEvent<HTMLButtonElement>): void;\n}\n\nexport { ClearComponentProps as ReactTimebombClearComponentProps };\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n","import * as React from 'react';\nimport { ArrowButton } from '../components/button';\nimport { ReactTimebombMultiValueProps } from '../typings';\nimport { dateFormat, keys } from '../utils';\nimport {\n    Container,\n    DefaultClearComponent,\n    Flex,\n    Icon,\n    Placeholder\n} from './value';\n\nconst DefaultIcon = () => <Icon className=\"react-timebomb-icon\" icon=\"📅\" />;\n\nfunction Value(props: ReactTimebombMultiValueProps) {\n    const { value } = props;\n    const LabelComponent = props.labelComponent;\n\n    if (!value) {\n        return null;\n    }\n\n    if (LabelComponent) {\n        return <LabelComponent {...props} />;\n    }\n\n    return <>{value.map(d => dateFormat(d, 'DD.MM.YYYY')).join(' – ')}</>;\n}\n\nexport function ValueMulti(props: ReactTimebombMultiValueProps) {\n    const {\n        placeholder,\n        value,\n        open,\n        disabled,\n        arrowButtonId,\n        iconComponent,\n        onToggle\n    } = props;\n    const ArrowButtonComp = props.arrowButtonComponent || ArrowButton;\n    const ClearComponent = props.clearComponent || DefaultClearComponent;\n    const showPlaceholder = placeholder && !open;\n    const IconComponent =\n        iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n    React.useEffect(() => {\n        document.body.addEventListener('keyup', onKeyUp);\n\n        return () => {\n            document.body.removeEventListener('keyup', onKeyUp);\n        };\n    }, []);\n\n    function onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        props.onClear();\n    }\n\n    function onKeyUp(e: KeyboardEvent) {\n        switch (e.keyCode) {\n            case keys.ESC:\n                if (open) {\n                    onToggle();\n                }\n                break;\n        }\n    }\n\n    return (\n        <Container\n            data-role=\"value\"\n            className=\"react-slct-value react-timebomb-value\"\n            disabled={disabled}\n            onClick={disabled ? undefined : onToggle}\n        >\n            <Flex>\n                {IconComponent && <IconComponent />}\n                <Flex>\n                    <Value {...props} />\n                    {showPlaceholder && (\n                        <Placeholder className=\"react-timebomb-placeholder\">\n                            {placeholder}\n                        </Placeholder>\n                    )}\n                </Flex>\n            </Flex>\n            <Flex>\n                {value && (\n                    <ClearComponent disabled={disabled} onClick={onClear} />\n                )}\n                <ArrowButtonComp\n                    id={arrowButtonId}\n                    disabled={disabled}\n                    open={open}\n                />\n            </Flex>\n        </Container>\n    );\n}\n"]}