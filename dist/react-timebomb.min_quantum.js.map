{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/menu-day.tsx","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","minDate","maxDate","selectRange","showConfirm","isBefore","Error","this","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","format","showTime","isTimeFormat","showDate","isDateFormat","className","classNames","push","error","join","defaultDateValue","value","date","Date","isAfter","startOfDay","allowValidation","mode","valueText","dateFormat","undefined","selectedRange","prevProps","prevState","setState","valueTextDidUpdate","commit","validDate","validateDate","Array","isArray","every","d","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showCalendarWeek","selectWeek","MENU_HEIGHT","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","showMenu","ref","renderValue","Math","max","MENU_WIDTH","MenuTitle","onMonths","onYear","Menu","onSubmit","type","onFocus","multiValue","ValueMulti","Value","clearSelection","setTimeout","onError","onChange","dateEqual","Boolean","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps","button_1","menu_day_1","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","css","PureComponent","monthMatrixCache","Map","now","monthMatrix","getDate","dateMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","weekStart","addDays","set","fullYears","year","currentYear","fill","_","i","setFullYear","enabled","selected","filter","obj","reverse","minYear","array","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","onYearContainer","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","months","getMonthNames","month","str","disabled","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","WeekNum","Day","isValid","e","getAttribute","currentTarget","el","querySelector","scrollIntoView","scrollBy","top","Flex","StyledDay","current","today","dayWeekOfYear","some","dayMonth","isToday","updateState","dayChanged","minMaxChanged","children","Input","span","ArrowButton","ClearButton","Placeholder","Icon","icon","WHITELIST_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","searchInputs","onSearchRef","onKeyDown","onKeyUp","onBlur","formatGroups","reduce","memo","char","prevChar","substr","focused","document","iconClass","currentFormatGroup","inp","parts","splitDate","forEach","innerText","focus","selectText","showPlaceholder","timeOnly","data-role","group","separator","contentEditable","data-placeholder","data-separator","data-group","data-react-timebomb-selectable","range","createRange","sel","getSelection","selectNodeContents","removeAllRanges","addRange","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","keyCode","ENTER","ESC","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatGroup","formatType","getFormatType","direction","manipulateDate","shiftKey","dateParts","nextValue","valid","validateFormatGroup","formatNumber","joinDates","dataValue","dataGroup","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","blur","setAttribute","target","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate\n} from './typings';\nimport { ValueMulti } from './value-multi';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n\n        return {\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'month',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = Array.isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange\n        } = this.state;\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate;\n\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={Math.max(\n                                        ReactTimebomb.MENU_WIDTH,\n                                        menuWidth || 0\n                                    )}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const { minDate, maxDate, format, selectRange } = this.props;\n        const { showDate, showTime, allowValidation } = this.state;\n\n        if (selectRange || Array.isArray(value)) {\n            const multiValue = value\n                ? Array.isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                    open={open}\n                    placeholder={placeholder}\n                    value={multiValue}\n                />\n            );\n        }\n\n        return (\n            <Value\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState);\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange(date: ReactTimebombDate, commit: boolean): void {\n        const { value, showConfirm, onChange } = this.props;\n\n        if (!showConfirm) {\n            commit = true;\n        }\n\n        if (dateEqual(value, date)) {\n            return;\n        }\n\n        if (commit) {\n            if (Array.isArray(date)) {\n                onChange(...date);\n            } else {\n                onChange(date);\n            }\n        }\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (Array.isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : Array.isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    Array.isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = Array.isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = Array.isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (Array.isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = Array.isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    getAttribute\n} from './utils';\nimport { Button } from './button';\nimport { Day, WeekNum } from './menu-day';\nimport { ReactTimebombDate } from './typings';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: 220px;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 46px;\n        border: none;\n        margin: 0 0 4px;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private getDate(date: ReactTimebombDate) {\n        return (Array.isArray(date) ? date[this.props.selectedRange] : date)!;\n    }\n\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const date = this.getDate(this.props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { minDate, maxDate } = this.props;\n        const year = this.getDate(this.props.date).getFullYear();\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(minDate);\n\n                    date.setFullYear(currentYear + i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(maxDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                const date = new Date(maxDate);\n\n                date.setFullYear(i);\n\n                const enabled = isEnabled('year', date, this.props);\n                const selected = year === date.getFullYear();\n\n                array.push({ date, enabled, selected });\n            }\n\n            return array.reverse();\n        } else {\n            const currentDate = this.now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showDate, showConfirm } = this.props;\n\n        if (showDate) {\n            switch (mode) {\n                case 'year':\n                case 'months':\n                    return (\n                        <MonthAndYearContainer>\n                            {this.renderMenuMonths()}\n                            {this.renderMenuYear()}\n                        </MonthAndYearContainer>\n                    );\n                case 'month':\n                    return (\n                        <MonthContainer>\n                            {this.renderMonth()}\n                            {showConfirm && this.renderConfirm()}\n                        </MonthContainer>\n                    );\n            }\n        }\n\n        return null;\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { value } = this.props;\n        const valueDate = this.getDate(value);\n        const date = this.getDate(this.props.date);\n        const months = getMonthNames(true);\n        const month = value && valueDate.getMonth();\n        const year = value && valueDate.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">\n                                        <WeekNum\n                                            day={dates[0]}\n                                            onClick={this.onSelectDay}\n                                        >\n                                            {weekNum}\n                                        </WeekNum>\n                                    </td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            day={date}\n                                            date={this.props.date}\n                                            value={this.props.value}\n                                            minDate={this.props.minDate}\n                                            maxDate={this.props.maxDate}\n                                            selectWeek={this.props.selectWeek}\n                                            selectRange={this.props.selectRange}\n                                            showTime={this.props.showTime}\n                                            onSelectDay={this.onSelectDay}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? Array.isArray(validDate)\n                ? validDate.every(v => isEnabled('day', v, this.props))\n                : isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        if (el) {\n            const selected = el.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n                el.scrollBy({ top: -10 });\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport { getWeekOfYear, dateEqual, isEnabled, isToday } from './utils';\nimport styled from 'styled-components';\nimport { MenuProps } from './menu';\n\ninterface DayProps {\n    day: Date;\n    value: MenuProps['value'];\n    date: MenuProps['date'];\n    selectWeek: MenuProps['selectWeek'];\n    selectRange: MenuProps['selectRange'];\n    minDate: MenuProps['minDate'];\n    maxDate: MenuProps['maxDate'];\n    onSelectDay: MenuProps['onSelectDay'];\n    showTime: MenuProps['showTime'];\n}\n\ninterface DayState {\n    current: boolean;\n    enabled: boolean;\n    today: boolean;\n    selected: boolean;\n}\n\ninterface StyledDayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst StyledDay = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: StyledDayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: ${(props: StyledDayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n            ? 'rgba(172, 206, 247, 0.4)'\n            : 'transparent'};\n    font-weight: ${(props: StyledDayProps) =>\n        props.selected ? 'bold' : 'normal'};\n    pointer-events: ${(props: StyledDayProps) =>\n        props.disabled ? 'none' : 'auto'};\n    user-select: none;\n    opacity: ${(props: StyledDayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: StyledDayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\nexport class Day extends React.PureComponent<DayProps, DayState> {\n    constructor(props: DayProps) {\n        super(props);\n\n        this.state = {\n            current: false,\n            enabled: true,\n            today: false,\n            selected: false\n        };\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n    }\n\n    private get selected() {\n        const { value, selectWeek, selectRange, day } = this.props;\n\n        if (value) {\n            if (selectWeek) {\n                const dayWeekOfYear = getWeekOfYear(day);\n\n                if (Array.isArray(value)) {\n                    return value.some(v => getWeekOfYear(v) === dayWeekOfYear);\n                }\n\n                return getWeekOfYear(value) === dayWeekOfYear;\n            }\n\n            if (selectRange && Array.isArray(value) && value.length === 2) {\n                const [minDate, maxDate] = value;\n\n                return isEnabled('day', day, {\n                    minDate,\n                    maxDate\n                });\n            }\n        }\n\n        return dateEqual(value, day, this.props.showTime);\n    }\n\n    private get current() {\n        const { day, date } = this.props;\n        const dayMonth = day.getMonth();\n\n        if (Array.isArray(date)) {\n            return date.some(d => d.getMonth() === dayMonth);\n        }\n\n        if (date) {\n            return dayMonth === date.getMonth();\n        }\n\n        return false;\n    }\n\n    private get enabled() {\n        return isEnabled('day', this.props.day, this.props);\n    }\n\n    private get today() {\n        return isToday(this.props.day);\n    }\n\n    public componentDidMount() {\n        this.updateState();\n    }\n\n    public componentDidUpdate(prevProps: DayProps) {\n        this.updateState(prevProps);\n    }\n\n    public render() {\n        const { day } = this.props;\n        const { selected, current, enabled, today } = this.state;\n\n        return (\n            <StyledDay\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={!enabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {day.getDate()}\n            </StyledDay>\n        );\n    }\n\n    private updateState(prevProps: Partial<DayProps> = {}) {\n        const { day, minDate, maxDate } = this.props;\n        const dayChanged = !dateEqual(prevProps.day, day);\n        const minMaxChanged =\n            !dateEqual(prevProps.minDate, minDate) ||\n            !dateEqual(prevProps.maxDate, maxDate);\n\n        this.setState({\n            current: this.current,\n            enabled:\n                dayChanged || minMaxChanged ? this.enabled : this.state.enabled,\n            today: dayChanged ? this.today : this.state.today,\n            selected: this.selected\n        });\n    }\n\n    private onSelectDay() {\n        this.props.onSelectDay(this.props.day);\n    }\n}\n\ninterface WeekNumProps {\n    day: Date;\n    onClick(day: Date): void;\n}\n\nexport class WeekNum extends React.PureComponent<WeekNumProps> {\n    constructor(props: WeekNumProps) {\n        super(props);\n\n        this.onClick = this.onClick.bind(this);\n    }\n\n    public render() {\n        return <div onClick={this.onClick}>{this.props.children}</div>;\n    }\n\n    private onClick() {\n        this.props.onClick(this.props.day);\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled,\n    isTimeFormat,\n    isDateFormat\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { Button } from './button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    currentFormatGroup?: string;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nexport const ArrowButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport const ClearButton = styled(ArrowButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n        const { currentFormatGroup } = this.state;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        if (!currentFormatGroup) {\n            return 'calendar';\n        }\n\n        if (isDateFormat(currentFormatGroup)) {\n            return 'calendar';\n        }\n\n        if (isTimeFormat(currentFormatGroup)) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.searchInputs[0];\n\n                    this.searchInputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const input = this.searchInputs[0];\n\n                    if (input) {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, showDate, showTime, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButton\n                            tabIndex={-1}\n                            className=\"react-timebomb-arrow\"\n                        >\n                            {open ? '▲' : '▼'}\n                        </ArrowButton>\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const nextValue = numericValue + (isArrowUp ? 1 : -1);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            allowValidation,\n            onSubmit,\n            onToggle\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        // focus prev\n        if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                this.selectText(previousSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        // focus next\n        else if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !FORBIDDEN_KEYS.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', input.innerText);\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const currentFormatGroup = getAttribute(input, 'data-group');\n\n        this.selectText(e.currentTarget);\n\n        this.setState({ currentFormatGroup });\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}