{"version":3,"sources":["src/index.tsx","src/typings.ts"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","menuWidth","showCalendarWeek","selectWeek","onOpen","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","MenuContainer","showMenu","ref","renderValue","Math","max","MENU_WIDTH","MenuTitle","onMonths","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","clearSelection","onError","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps","arrow_button_1","ArrowButtonProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n} from './typings';\nimport { ValueMulti } from './value-multi';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'month',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={Math.max(\n                                        ReactTimebomb.MENU_WIDTH,\n                                        menuWidth || 0\n                                    )}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                disabled={disabled}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","import { ArrowButtonProps } from './arrow-button';\n\nexport type ReactTimebombDate = Date | undefined | Date[];\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectWeek?: boolean;\n    selectRange?: boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: boolean;\n    arrowButtonComponent?: React.ComponentType<ArrowButtonProps>;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode: 'year' | 'months' | 'month';\n    showDate?: boolean;\n    showTime?: boolean;\n    selectedRange: number;\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\n\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n"]}