{"version":3,"sources":["src/index.tsx","src/menu/day.tsx","src/value/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","value_multi_1","__exportStar","exports","Container","default","div","MenuWrapper","props","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","valueRef","createRef","emitChange","timeout","date","clearTimeout","setTimeout","__awaiter","value","onChange","dateEqual","isArray","setStateAsync","allowValidation","Boolean","preventClose","minDate","maxDate","isBefore","console","error","state","initialState","onChangeValueText","bind","emitChangeAndClose","onSelectDay","onModeDay","onModeYear","onModeMonth","onChangeMonth","onChangeYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onHoverDays","onMultiValueSelect","onPaste","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","className","classNames","push","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","hoverDate","menuHeight","selectedRange","prevProps","prevState","selectRange","showConfirm","setState","stringEqual","result","validateValueText","emitError","rangeIsComplete","length","Promise","resolve","validDate","validateDate","some","d","isEnabled","isUndefined","placeholder","showCalendarWeek","timeStep","confirmComponent","onOpen","menuWidth","Math","max","MENU_WIDTH","menuLeft","current","getBoundingClientRect","left","width","createElement","Select","open","onToggle","onRef","showMenu","onClick","onCloseMenu","onOpenMenu","getMobileMenuContainer","ref","renderValue","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","clearComponent","labelComponent","isMulti","ValueComponent","ValueMulti","Value","componentValue","sort","a","b","getTime","onAllSelect","onValueSelect","clearSelection","onError","newDate","date0","date1","index","Object","assign","valueText0","day","valueDate","startOfWeek","endOfWeek","addDays","setDate","getHours","getMinutes","dateArr","getSelectedRange","sortDates","currentDate","setMonth","getMonth","time","commit","map","text","e","target","HTMLDivElement","classList","contains","defaultProps","StyledDay","button","Day","hover","enabled","setEnabled","useState","today","setToday","useMemo","dayMonth","useEffect","isToday","classes","selected","selectedStart","selectedEnd","getClassNames","stopPropagation","preventDefault","onMouseEnter","onMouseLeave","onMouseDown","getDate","WeekNum","children","button_1","Flex","Input","span","ClearButton","SmallButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","getIcon","DefaultClearComponent","tabIndex","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","PureComponent","inputs","mounted","currentTarget","selectElement","allSelected","formatGroup","getAttribute","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","formatGroups","split","reduce","memo","char","prevChar","substr","formatSplitExpr","test","focused","document","querySelector","firstInput","i","filter","s","findIndex","isDayFormat","hasFocus","inp","allowTextSelection","parts","splitDate","forEach","innerText","focus","find","el","forceUpdate","ArrowButtonComp","ArrowButton","ClearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","data-role","innerRef","id","LabelComponent","contentEditable","group","g","separator","hasFormatType","data-react-timebomb-selectable","data-placeholder","data-separator","replaceSpaceWithNbsp","key","data-group","onDoubleClick","nextSibling","previousSibling","numericFormat","formatIsActualNumber","sel","getSelection","hasSelection","focusOffset","anchorOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","manipulateDate","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","validatedChar","dataGroup","blur","validateFormatType","parentNode","filledValue","fillZero","clipboardData","getData","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType,\n    addDays,\n    stringEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport * from './typings';\n\ninterface MenuWrapperProps {\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n\n    private onToggle?: () => void;\n    private onCloseMenu?: () => void;\n    private onOpenMenu?: () => void;\n    private valueRef = React.createRef<HTMLDivElement>();\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentType<MenuContainerProps>\n    ) {\n        return styled(MenuContainer)`\n            position: fixed;\n            left: 0 !important;\n            top: 0 !important;\n            right: 0 !important;\n            bottom: 0 !important;\n            width: 100% !important;\n            height: 100% !important;\n            background: rgba(0, 0, 0, 0.12);\n            transform: none;\n        `;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            hoverDate: undefined,\n            menuHeight: 'auto',\n            selectedRange: 0,\n            preventClose: false\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            console.error(\n                '[react-timebomb]: minDate must appear before maxDate'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.emitChangeAndClose = this.emitChangeAndClose.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onChangeYear = this.onChangeYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onHoverDays = this.onHoverDays.bind(this);\n        this.onMultiValueSelect = this.onMultiValueSelect.bind(this);\n        this.onPaste = this.onPaste.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public async componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ) {\n        const { valueText, showDate, showTime, preventClose } = this.state;\n        const { value, format, selectRange, showConfirm } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (!stringEqual(prevState.valueText, valueText)) {\n            const result = await this.validateValueText();\n\n            if (result.error) {\n                this.emitError(result.error, result.valueText);\n            }\n\n            if (result.date) {\n                const rangeIsComplete =\n                    selectRange &&\n                    isArray(result.date) &&\n                    result.date.length === 2;\n\n                if (\n                    (!showConfirm && !selectRange && showDate) ||\n                    rangeIsComplete\n                ) {\n                    if (prevState.mode === 'day' && !preventClose) {\n                        this.emitChangeAndClose(result.date);\n                    } else {\n                        this.emitChange(result.date);\n                    }\n                }\n\n                if (!showDate && showTime) {\n                    this.emitChange(result.date);\n                }\n            }\n        }\n    }\n\n    private setStateAsync(state: Partial<ReactTimebombState>) {\n        return new Promise((resolve) => {\n            this.setState(state as any, resolve);\n        });\n    }\n\n    private validateValueText(): Promise<{\n        date?: ReactTimebombDate;\n        error?: ReactTimebombError;\n        valueText?: string | string[];\n    }> {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        return new Promise(async (resolve) => {\n            if (validDate) {\n                await this.setStateAsync({ allowValidation: true });\n\n                const enabled = isArray(validDate)\n                    ? validDate.some((d) => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    await this.setStateAsync({ date: validDate });\n\n                    resolve({ date: validDate });\n                } else {\n                    resolve({ error: 'outOfRange', valueText });\n                }\n            } else if (valueText) {\n                resolve({ error: 'invalidDate', valueText });\n            } else if (!isUndefined(valueText) && allowValidation) {\n                resolve({ date: undefined });\n            }\n        });\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            confirmComponent,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate,\n            hoverDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuLeft =\n            isArray(value) &&\n            value.length === 1 &&\n            this.valueRef.current &&\n            selectRange === true\n                ? this.valueRef.current.getBoundingClientRect().left +\n                  this.valueRef.current.getBoundingClientRect().width -\n                  menuWidth\n                : undefined;\n\n        return (\n            <Select\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({\n                    placeholder,\n                    open,\n                    onToggle,\n                    onClose,\n                    onOpen,\n                    onRef,\n                    MenuContainer\n                }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n                    const className = [this.className];\n                    const onClick = mobile\n                        ? this.onMobileMenuContainerClick\n                        : undefined;\n\n                    if (showMenu) {\n                        className.push('open');\n                    }\n\n                    this.onToggle = onToggle;\n                    this.onCloseMenu = onClose;\n                    this.onOpenMenu = onOpen;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={className.join(' ')}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuLeft={menuLeft}\n                                    menuWidth={menuWidth}\n                                    menuHeight={this.state.menuHeight}\n                                    onClick={onClick}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            hoverDate={hoverDate}\n                                            confirmComponent={confirmComponent}\n                                            onHoverDays={this.onHoverDays}\n                                            onSelectDay={this.onSelectDay}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onChangeYear={this.onChangeYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.emitChangeAndClose}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId,\n            clearComponent,\n            labelComponent\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            allowValidation,\n            mode,\n            hoverDate\n        } = this.state;\n        const isMulti = selectRange || isArray(value);\n        const ValueComponent = isMulti ? ValueMulti : Value;\n\n        let componentValue = isMulti\n            ? value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined\n            : value;\n\n        if (\n            isArray(componentValue) &&\n            componentValue.length === 1 &&\n            hoverDate\n        ) {\n            componentValue = [...componentValue, hoverDate].sort(\n                (a, b) => a.getTime() - b.getTime()\n            );\n        }\n\n        placeholder = open && !isMulti ? undefined : placeholder;\n\n        return (\n            <ValueComponent\n                ref={this.valueRef}\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                selectRange={selectRange}\n                value={componentValue as any}\n                hoverDate={hoverDate}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                clearComponent={clearComponent}\n                labelComponent={labelComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle}\n                onSubmit={this.emitChangeAndClose}\n                onAllSelect={this.onModeDay}\n                onValueSelect={this.onMultiValueSelect}\n                onPaste={this.onPaste}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        // get rid of this timeout\n        // fixme\n        setTimeout(async () => {\n            clearSelection();\n\n            await this.setStateAsync(this.initialState);\n\n            if (this.props.onClose) {\n                this.props.onClose();\n            }\n        }, 16);\n    }\n\n    private async emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ) {\n        if (this.state.allowValidation) {\n            await this.setStateAsync({ allowValidation: false });\n\n            if (this.props.onError) {\n                this.props.onError(error, value);\n            }\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(async () => {\n                const { value, onChange } = this.props;\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                const changeDate = isArray(date) ? date : [date];\n\n                onChange(...changeDate);\n\n                await this.setStateAsync({\n                    allowValidation: Boolean(date),\n                    preventClose: false\n                });\n            }, 0);\n        };\n    })();\n\n    private async emitChangeAndClose(newDate?: ReactTimebombDate) {\n        if (this.onCloseMenu) {\n            this.onCloseMenu();\n        }\n        clearSelection();\n\n        const { date } = newDate\n            ? { date: newDate }\n            : await this.validateValueText();\n\n        if (date) {\n            this.emitChange(date);\n        }\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private async onClear() {\n        await this.setStateAsync({ valueText: undefined });\n\n        this.emitChange(undefined);\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText, preventClose: true });\n    }\n\n    private async onChangeFormatGroup(format?: string) {\n        await this.setStateAsync({\n            menuHeight: 'auto',\n            mode: format ? getFormatType(format) : undefined\n        });\n    }\n\n    private onHoverDays([date0, date1]: (Date | undefined)[]) {\n        const hoverDate = date1 || date0;\n\n        if (\n            isArray(this.state.valueText) &&\n            isArray(this.state.date) &&\n            this.state.valueText.length === 1 &&\n            this.state.date.length === 1 &&\n            hoverDate\n        ) {\n            this.setState({ hoverDate });\n        }\n    }\n\n    private async onMultiValueSelect(date: Date, index: number) {\n        if (index === 0) {\n            await this.setStateAsync({ ...this.initialState, hoverDate: date });\n        }\n\n        if (\n            index === 1 &&\n            isArray(this.state.valueText) &&\n            isArray(this.state.date)\n        ) {\n            const [valueText0] = this.state.valueText;\n            const [date0] = this.state.date;\n\n            await this.setStateAsync({\n                ...this.initialState,\n                valueText: [valueText0],\n                date: [date0],\n                hoverDate: date\n            });\n        }\n\n        // since closing of the menu is delayed (16ms), we need to deplay the opening as well\n        // fixme\n        setTimeout(async () => {\n            if (this.onOpenMenu) {\n                this.onOpenMenu();\n            }\n\n            await this.setStateAsync({ hoverDate: date });\n        }, 32);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, selectRange } = this.props;\n        const format = this.props.format!;\n\n        const valueDate = (() => {\n            if (value instanceof Date) {\n                return value;\n            }\n\n            if (isArray(value)) {\n                return value[0];\n            }\n\n            return day;\n        })();\n\n        if (selectRange === 'week') {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (typeof selectRange === 'number') {\n            const date = [day, addDays(day, selectRange - 1)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (selectRange === true) {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(this.state.valueText[0], format) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format);\n\n            this.setState({\n                date: dateArr,\n                valueText,\n                selectedRange,\n                hoverDate: undefined\n            });\n        } else {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onChangeYear(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private async onSelectTime(time: Date, mode: FormatType, commit = false) {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map((d) => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        await this.setStateAsync({ mode, valueText });\n\n        if (commit) {\n            this.emitChange(newDate);\n        }\n    }\n\n    private onPaste(text: string) {\n        const date = validateDate(text, this.props.format!);\n\n        if (date instanceof Date) {\n            this.onSelectDay(date);\n        }\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombMenuProps } from '../typings';\nimport { isArray, isEnabled, isToday } from '../utils';\n\ninterface DayProps {\n    day: Date;\n    hover: boolean;\n    selected: boolean;\n    selectedStart: boolean;\n    selectedEnd: boolean;\n    date: ReactTimebombMenuProps['date'];\n    minDate: ReactTimebombMenuProps['minDate'];\n    maxDate: ReactTimebombMenuProps['maxDate'];\n    showTime: ReactTimebombMenuProps['showTime'];\n    onSelectDay: ReactTimebombMenuProps['onSelectDay'];\n    onMouseEnter(day: Date): void;\n    onMouseLeave(day: Date): void;\n}\n\ninterface StyledDayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n}\n\nconst StyledDay = styled.button`\n    display: flex;\n    align-items: center;\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: StyledDayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: transparent;\n    pointer-events: ${(props: StyledDayProps) =>\n        props.disabled ? 'none' : 'auto'};\n    width: 100%;\n    border: none;\n    opacity: ${(props: StyledDayProps) => (props.disabled ? 0.3 : 1)};\n\n    &.today {\n        background-color: rgba(172, 206, 247, 0.4);\n    }\n\n    &.hover {\n        background-color: #eee;\n    }\n\n    &.selected {\n        font-weight: bold;\n        background-color: rgba(221, 221, 221, 0.3);\n    }\n\n    &.selected-start,\n    &.selected-end {\n        background-color: rgba(221, 221, 221, 1);\n    }\n`;\n\nexport function Day(props: DayProps) {\n    const { day, date, hover, minDate, maxDate, showTime } = props;\n    const [enabled, setEnabled] = React.useState(true);\n    const [today, setToday] = React.useState(false);\n    const current = React.useMemo(getCurrent, [date, day, showTime]);\n\n    React.useEffect(() => {\n        setToday(isToday(day));\n    }, [day.getTime()]);\n\n    React.useEffect(() => {\n        setEnabled(\n            isEnabled('day', day, {\n                minDate: props.minDate,\n                maxDate: props.maxDate\n            })\n        );\n    }, [\n        minDate ? minDate.getTime() : minDate,\n        maxDate ? maxDate.getTime() : maxDate\n    ]);\n\n    function getCurrent() {\n        const dayMonth = day.getMonth();\n\n        if (isArray(date)) {\n            return date.some((d) => d.getMonth() === dayMonth);\n        }\n\n        if (date) {\n            return dayMonth === date.getMonth();\n        }\n\n        return false;\n    }\n\n    function onMouseDown(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    function onSelectDay(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        props.onSelectDay(day);\n    }\n\n    function onMouseEnter() {\n        props.onMouseEnter(day);\n    }\n\n    function onMouseLeave() {\n        props.onMouseLeave(day);\n    }\n\n    function getClassNames() {\n        const classes = ['value'];\n\n        if (props.selected) {\n            classes.push('selected');\n        }\n\n        if (props.selectedStart) {\n            classes.push('selected-start');\n        }\n\n        if (props.selectedEnd) {\n            classes.push('selected-end');\n        }\n\n        if (today) {\n            classes.push('today');\n        }\n\n        if (hover) {\n            classes.push('hover');\n        }\n\n        return classes.join(' ');\n    }\n\n    return (\n        <StyledDay\n            type=\"button\"\n            className={getClassNames()}\n            current={current}\n            disabled={!enabled}\n            onClick={onSelectDay}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onMouseDown={onMouseDown}\n        >\n            {day.getDate()}\n        </StyledDay>\n    );\n}\n\ninterface WeekNumProps {\n    day: Date;\n    children: React.ReactNode;\n    onClick(day: Date): void;\n}\n\nexport function WeekNum(props: WeekNumProps) {\n    function onClick() {\n        props.onClick(props.day);\n    }\n\n    return <div onClick={onClick}>{props.children}</div>;\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton, SmallButton } from '../components/button';\nimport {\n    ClearComponentProps,\n    IconProps,\n    ReactTimebombValueProps\n} from '../typings';\nimport {\n    clearSelection,\n    fillZero,\n    formatIsActualNumber,\n    formatNumber,\n    formatSplitExpr,\n    getAttribute,\n    getFormatType,\n    isDayFormat,\n    isEnabled,\n    joinDates,\n    keys,\n    manipulateDate,\n    replaceSpaceWithNbsp,\n    selectElement,\n    splitDate,\n    stringFromCharCode,\n    validateFormatGroup,\n    validateFormatType\n} from '../utils';\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n    pointer-events: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n    pointer-events: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n            default:\n                return '';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = (props: ClearComponentProps) => (\n    <ClearButton\n        className=\"react-timebomb-clearer\"\n        tabIndex={-1}\n        disabled={props.disabled}\n        onClick={props.onClick}\n    >\n        <ClearButtonX>×</ClearButtonX>\n    </ClearButton>\n);\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nclass ValueComponent extends React.PureComponent<\n    ReactTimebombValueProps,\n    ValueState\n> {\n    private inputs: HTMLSpanElement[] = [];\n    private mounted = false;\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce((memo, char) => {\n            const prevChar = memo[memo.length - 1];\n\n            if (\n                (prevChar && char === prevChar.substr(0, 1)) ||\n                (formatSplitExpr.test(prevChar) && formatSplitExpr.test(char))\n            ) {\n                memo[memo.length - 1] += char;\n            } else {\n                memo = [...memo, char];\n            }\n\n            return memo;\n        }, [] as string[]);\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get firstInput() {\n        const formatParts = this.props\n            .format!.split(formatSplitExpr)\n            .filter((s) => Boolean(s));\n        const i = formatParts.findIndex(isDayFormat);\n\n        return this.inputs[i === -1 ? 0 : i];\n    }\n\n    constructor(props: ReactTimebombValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onPaste = this.onPaste.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ReactTimebombValueProps): void {\n        setTimeout(() => {\n            if (!this.mounted) {\n                return;\n            }\n\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some((inp) => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    const { firstInput } = this;\n\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (firstInput && allowTextSelection) {\n                            firstInput.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            if (firstInput) {\n                                selectElement(firstInput);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find((el) => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach((input) => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        this.mounted = true;\n\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                ref={this.props.innerRef}\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearComponent\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        />\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const LabelComponent = this.props.labelComponent;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...this.props} />;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some((g) => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n                        const hasFormatType = Boolean(getFormatType(group));\n                        const placeholder = hasFormatType ? group : undefined;\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled || !hasFormatType}\n                                data-placeholder={placeholder}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                                onPaste={this.onPaste}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = sel\n            ? Boolean(sel.focusOffset - sel.anchorOffset)\n            : false;\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const dataGroup = getAttribute(input, 'data-group');\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC && onToggle) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach((el) => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= dataGroup.length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (\n                (e.keyCode === keys.DOT || e.keyCode === keys.COMMA) &&\n                innerText.length < dataGroup.length\n            ) {\n                const formatType = getFormatType(dataGroup);\n\n                if (!validateFormatType(innerText, formatType)) {\n                    return;\n                }\n            }\n\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (\n            input.parentNode &&\n            this.inputs.some((el) => Boolean(el.innerText))\n        ) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected && this.mounted) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.mounted &&\n                this.props.onToggle &&\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onPaste(e: React.ClipboardEvent<HTMLSpanElement>) {\n        e.preventDefault();\n\n        const text = e.clipboardData.getData('text/plain');\n\n        if (text) {\n            this.props.onPaste(text);\n\n            if (e.target instanceof HTMLSpanElement) {\n                e.target.blur();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (onToggle) {\n            if (!this.inputs.some((inp) => inp === e.target) || !open) {\n                onToggle();\n            }\n        }\n    }\n}\n\nexport const Value = React.forwardRef(\n    (props: ReactTimebombValueProps, ref: React.Ref<HTMLDivElement>) => (\n        <ValueComponent innerRef={ref} {...props} />\n    )\n);\n"]}