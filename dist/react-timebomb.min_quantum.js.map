{"version":3,"sources":["src/index.tsx","src/menu/index.tsx","src/typings.ts"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","value_multi_1","__export","Container","default","div","MenuWrapper","props","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","valueRef","createRef","emitChange","timeout","date","clearTimeout","setTimeout","__awaiter","value","onChange","dateEqual","isArray","setStateAsync","allowValidation","Boolean","preventClose","minDate","maxDate","isBefore","console","error","state","initialState","onChangeValueText","bind","emitChangeAndClose","onSelectDay","onModeDay","onModeYear","onModeMonth","onChangeMonth","onChangeYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onHoverDays","onMultiValueSelect","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","hoverDate","menuHeight","selectedRange","prevProps","prevState","selectRange","showConfirm","setState","stringEqual","result","validateValueText","emitError","rangeIsComplete","length","Promise","resolve","validDate","validateDate","some","d","isEnabled","isUndefined","placeholder","showCalendarWeek","timeStep","confirmComponent","onOpen","menuWidth","Math","max","MENU_WIDTH","menuLeft","current","getBoundingClientRect","left","width","createElement","Select","open","onToggle","onRef","showMenu","onClick","onCloseMenu","onOpenMenu","getMobileMenuContainer","ref","renderValue","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","clearComponent","labelComponent","isMulti","ValueComponent","ValueMulti","Value","componentValue","sort","a","b","getTime","onAllSelect","onValueSelect","clearSelection","onError","newDate","date0","date1","index","Object","assign","valueText0","day","valueDate","startOfWeek","endOfWeek","addDays","setDate","getHours","getMinutes","dateArr","getSelectedRange","sortDates","currentDate","setMonth","getMonth","time","commit","map","e","target","HTMLDivElement","classList","contains","defaultProps","exports","button_1","mobile_1","table_1","time_1","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","MobileMenuTable","MenuTable","getDate","MenuMonths","monthNames","useState","getMonthNames","month","year","getFullYear","getAttribute","currentTarget","str","i","enabled","selected","Button","key","tabIndex","data-date","toISOString","MenuYear","yearContainer","setYearContainer","scrollToYear","querySelector","scrollIntoView","scrollBy","top","onSelectYear","useEffect","el","getDateConfig","newYear","setFullYear","setSeconds","getSeconds","setMinutes","setHours","currentYear","Array","fill","_","filter","obj","reverse","minYear","array","now","getFullYears","fullYear","dateStr","MenuConfirm","isValid","every","v","MonthWrapper","GestureWrapper","allowNext","endOfMonth","allowPrev","subtractDays","startOfMonth","direction","addMonths","subtractMonths","ConfirmComponent","MenuTime","topDivider","onCancel","ReactTimebombArrowButtonProps","ArrowButtonProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType,\n    addDays,\n    stringEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport * from './typings';\n\ninterface MenuWrapperProps {\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n\n    private onToggle?: () => void;\n    private onCloseMenu?: () => void;\n    private onOpenMenu?: () => void;\n    private MobileMenuContainer?: React.ComponentType<MenuContainerProps>;\n    private valueRef = React.createRef<HTMLDivElement>();\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentType<MenuContainerProps>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            hoverDate: undefined,\n            menuHeight: undefined,\n            selectedRange: 0,\n            preventClose: false\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            console.error(\n                '[react-timebomb]: minDate must appear before maxDate'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.emitChangeAndClose = this.emitChangeAndClose.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onChangeYear = this.onChangeYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onHoverDays = this.onHoverDays.bind(this);\n        this.onMultiValueSelect = this.onMultiValueSelect.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public async componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ) {\n        const { valueText, showDate, showTime, preventClose } = this.state;\n        const { value, format, selectRange, showConfirm } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (!stringEqual(prevState.valueText, valueText)) {\n            const result = await this.validateValueText();\n\n            if (result.error) {\n                this.emitError(result.error, result.valueText);\n            }\n\n            if (result.date) {\n                const rangeIsComplete =\n                    selectRange &&\n                    isArray(result.date) &&\n                    result.date.length === 2;\n\n                if (\n                    (!showConfirm && !selectRange && showDate) ||\n                    rangeIsComplete\n                ) {\n                    if (prevState.mode === 'day' && !preventClose) {\n                        this.emitChangeAndClose(result.date);\n                    } else {\n                        this.emitChange(result.date);\n                    }\n                }\n\n                if (!showDate && showTime) {\n                    this.emitChange(result.date);\n                }\n            }\n        }\n    }\n\n    private setStateAsync<K extends keyof ReactTimebombState>(\n        state:\n            | ((\n                  prevState: Readonly<ReactTimebombState>,\n                  props: Readonly<ReactTimebombProps>\n              ) => Pick<ReactTimebombState, K> | ReactTimebombState | null)\n            | (Pick<ReactTimebombState, K> | ReactTimebombState | null)\n    ) {\n        return new Promise(resolve => {\n            this.setState(state, resolve);\n        });\n    }\n\n    private validateValueText(): Promise<{\n        date?: ReactTimebombDate;\n        error?: ReactTimebombError;\n        valueText?: string | string[];\n    }> {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        return new Promise(async resolve => {\n            if (validDate) {\n                await this.setStateAsync({ allowValidation: true });\n\n                const enabled = isArray(validDate)\n                    ? validDate.some(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    await this.setStateAsync({ date: validDate });\n\n                    resolve({ date: validDate });\n                } else {\n                    resolve({ error: 'outOfRange', valueText });\n                }\n            } else if (valueText) {\n                resolve({ error: 'invalidDate', valueText });\n            } else if (!isUndefined(valueText) && allowValidation) {\n                resolve({ date: undefined });\n            }\n        });\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            confirmComponent,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate,\n            hoverDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuLeft =\n            isArray(value) &&\n            value.length === 1 &&\n            this.valueRef.current &&\n            selectRange === true\n                ? this.valueRef.current.getBoundingClientRect().left +\n                  this.valueRef.current.getBoundingClientRect().width -\n                  menuWidth\n                : undefined;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({\n                    placeholder,\n                    open,\n                    onToggle,\n                    onClose,\n                    onOpen,\n                    onRef,\n                    MenuContainer\n                }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n                    const className = [this.className];\n                    const onClick = mobile\n                        ? this.onMobileMenuContainerClick\n                        : undefined;\n\n                    if (showMenu) {\n                        className.push('open');\n                    }\n\n                    this.onToggle = onToggle;\n                    this.onCloseMenu = onClose;\n                    this.onOpenMenu = onOpen;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={className.join(' ')}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuLeft={menuLeft}\n                                    menuWidth={menuWidth}\n                                    menuHeight={this.state.menuHeight}\n                                    onClick={onClick}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            hoverDate={hoverDate}\n                                            confirmComponent={confirmComponent}\n                                            onHoverDays={this.onHoverDays}\n                                            onSelectDay={this.onSelectDay}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onChangeYear={this.onChangeYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.emitChangeAndClose}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId,\n            clearComponent,\n            labelComponent\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            allowValidation,\n            mode,\n            hoverDate\n        } = this.state;\n        const isMulti = selectRange || isArray(value);\n        const ValueComponent = isMulti ? ValueMulti : Value;\n\n        let componentValue = isMulti\n            ? value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined\n            : value;\n\n        if (\n            isArray(componentValue) &&\n            componentValue.length === 1 &&\n            hoverDate\n        ) {\n            componentValue = [...componentValue, hoverDate].sort(\n                (a, b) => a.getTime() - b.getTime()\n            );\n        }\n\n        placeholder = open && !isMulti ? undefined : placeholder;\n\n        return (\n            <ValueComponent\n                ref={this.valueRef}\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                selectRange={selectRange}\n                value={componentValue as any}\n                hoverDate={hoverDate}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                clearComponent={clearComponent}\n                labelComponent={labelComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle}\n                onSubmit={this.emitChangeAndClose}\n                onAllSelect={this.onModeDay}\n                onValueSelect={this.onMultiValueSelect}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        // get rid of this timeout\n        // fixme\n        setTimeout(async () => {\n            clearSelection();\n\n            await this.setStateAsync(this.initialState);\n\n            if (this.props.onClose) {\n                this.props.onClose();\n            }\n        }, 16);\n    }\n\n    private async emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ) {\n        if (this.state.allowValidation) {\n            await this.setStateAsync({ allowValidation: false });\n\n            if (this.props.onError) {\n                this.props.onError(error, value);\n            }\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(async () => {\n                const { value, onChange } = this.props;\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                const changeDate = isArray(date) ? date : [date];\n\n                onChange(...changeDate);\n\n                await this.setStateAsync({\n                    allowValidation: Boolean(date),\n                    preventClose: false\n                });\n            }, 0);\n        };\n    })();\n\n    private async emitChangeAndClose(newDate?: ReactTimebombDate) {\n        if (this.onCloseMenu) {\n            this.onCloseMenu();\n        }\n        clearSelection();\n\n        const { date } = newDate\n            ? { date: newDate }\n            : await this.validateValueText();\n\n        if (date) {\n            this.emitChange(date);\n        }\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private async onClear() {\n        await this.setStateAsync({ valueText: undefined });\n\n        this.emitChange(undefined);\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText, preventClose: true });\n    }\n\n    private async onChangeFormatGroup(format?: string) {\n        await this.setStateAsync({\n            menuHeight: 'auto',\n            mode: format ? getFormatType(format) : undefined\n        });\n    }\n\n    private onHoverDays([date0, date1]: (Date | undefined)[]) {\n        const hoverDate = date1 || date0;\n\n        if (\n            isArray(this.state.valueText) &&\n            isArray(this.state.date) &&\n            this.state.valueText.length === 1 &&\n            this.state.date.length === 1 &&\n            hoverDate\n        ) {\n            this.setState({ hoverDate });\n        }\n    }\n\n    private async onMultiValueSelect(date: Date, index: number) {\n        if (index === 0) {\n            await this.setStateAsync({ ...this.initialState, hoverDate: date });\n        }\n\n        if (\n            index === 1 &&\n            isArray(this.state.valueText) &&\n            isArray(this.state.date)\n        ) {\n            const [valueText0] = this.state.valueText;\n            const [date0] = this.state.date;\n\n            await this.setStateAsync({\n                ...this.initialState,\n                valueText: [valueText0],\n                date: [date0],\n                hoverDate: date\n            });\n        }\n\n        // since closing of the menu is delayed (16ms), we need to deplay the opening as well\n        // fixme\n        setTimeout(async () => {\n            if (this.onOpenMenu) {\n                this.onOpenMenu();\n            }\n\n            await this.setStateAsync({ hoverDate: date });\n        }, 32);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, selectRange } = this.props;\n        const format = this.props.format!;\n\n        const valueDate = (() => {\n            if (value instanceof Date) {\n                return value;\n            }\n\n            if (isArray(value)) {\n                return value[0];\n            }\n\n            return day;\n        })();\n\n        if (selectRange === 'week') {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (typeof selectRange === 'number') {\n            const date = [day, addDays(day, selectRange - 1)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (selectRange === true) {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(this.state.valueText[0], format) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format);\n\n            this.setState({\n                date: dateArr,\n                valueText,\n                selectedRange,\n                hoverDate: undefined\n            });\n        } else {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onChangeYear(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private async onSelectTime(time: Date, mode: FormatType, commit = false) {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        await this.setStateAsync({ mode, valueText });\n\n        if (commit) {\n            this.emitChange(newDate);\n        }\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState } from '../';\nimport { Button } from '../components/button';\nimport { ReactTimebombDate, ReactTimebombMenuProps } from '../typings';\nimport {\n    addDays,\n    addMonths,\n    endOfMonth,\n    getAttribute,\n    getMonthNames,\n    isArray,\n    isEnabled,\n    startOfMonth,\n    subtractDays,\n    subtractMonths,\n    validateDate\n} from '../utils';\nimport { GestureDirection, GestureWrapper } from './mobile';\nimport { MenuTable } from './table';\nimport { MenuTime } from './time';\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0;\n    height: 100%;\n    overflow: hidden;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst MobileMenuTable = styled(MenuTable)`\n    width: 33.3%;\n`;\n\nfunction getDate(\n    date: ReactTimebombDate,\n    selectedRange: ReactTimebombState['selectedRange']\n) {\n    return (isArray(date) ? date[selectedRange] : date)!;\n}\n\nfunction MenuMonths(props: ReactTimebombMenuProps) {\n    const { value, mobile, selectedRange } = props;\n    const [monthNames] = React.useState(getMonthNames(true));\n    const valueDate = getDate(value, selectedRange);\n    const date = getDate(props.date, selectedRange);\n    const month = value && valueDate.getMonth();\n    const year = value && valueDate.getFullYear();\n\n    function onChangeMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onChangeMonth(date), 0);\n    }\n\n    return (\n        <MonthsContainer mobile={mobile} className=\"months\">\n            {monthNames.map((str, i) => {\n                const newDate = new Date(date);\n\n                newDate.setMonth(i);\n\n                const enabled = isEnabled('month', newDate, props);\n                const selected =\n                    month === newDate.getMonth() &&\n                    year === newDate.getFullYear();\n\n                return (\n                    <Button\n                        key={str}\n                        tabIndex={-1}\n                        className={selected ? 'selected' : undefined}\n                        selected={selected}\n                        disabled={!enabled}\n                        mobile={props.mobile}\n                        data-date={newDate.toISOString()}\n                        onClick={onChangeMonth}\n                    >\n                        {str}\n                    </Button>\n                );\n            })}\n        </MonthsContainer>\n    );\n}\n\nfunction MenuYear(props: ReactTimebombMenuProps) {\n    const { value, minDate, maxDate } = props;\n    const [\n        yearContainer,\n        setYearContainer\n    ] = React.useState<HTMLDivElement | null>(null);\n\n    React.useEffect(scrollToYear, [props.date]);\n\n    function scrollToYear() {\n        if (yearContainer) {\n            const selected = yearContainer.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n\n                if (yearContainer.scrollBy) {\n                    yearContainer.scrollBy({ top: -10 });\n                }\n            }\n        }\n    }\n\n    function getFullYears() {\n        const valueDate = getDate(value, props.selectedRange);\n        const year = getDate(props.date, props.selectedRange).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = new Date();\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    function onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onChangeYear(date), 0);\n    }\n\n    function onYearContainer(el: HTMLDivElement | null) {\n        setYearContainer(el);\n        scrollToYear();\n    }\n\n    return (\n        <YearContainer ref={onYearContainer} className=\"years\">\n            {getFullYears()\n                .map(({ date, selected }) => {\n                    const fullYear = date.getFullYear();\n                    const dateStr = date.toISOString();\n\n                    return (\n                        <Button\n                            key={dateStr}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            mobile={props.mobile}\n                            data-date={dateStr}\n                            onClick={onSelectYear}\n                        >\n                            {fullYear}\n                        </Button>\n                    );\n                })\n                .reverse()}\n        </YearContainer>\n    );\n}\n\nfunction MenuConfirm(props: ReactTimebombMenuProps) {\n    const { valueText, format } = props;\n    const validDate = validateDate(valueText, format);\n    const isValid = validDate\n        ? isArray(validDate)\n            ? validDate.every(v => isEnabled('day', v, props))\n            : isEnabled('day', validDate, props)\n        : false;\n\n    return (\n        <Confirm>\n            <Button\n                tabIndex={-1}\n                disabled={!isValid}\n                mobile={props.mobile}\n                onClick={() => props.onSubmit()}\n            >\n                Ok\n            </Button>\n        </Confirm>\n    );\n}\n\nfunction MonthWrapper(props: ReactTimebombMenuProps) {\n    const { minDate, maxDate, mobile } = props;\n\n    function allowPrev() {\n        let date = props.date;\n\n        if (!minDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (subtractDays(startOfMonth(date), 1) < minDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function allowNext() {\n        let date = props.date;\n\n        if (!maxDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (addDays(endOfMonth(date), 1) > maxDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function onChangeMonth(direction: GestureDirection) {\n        const { onChangeMonth } = props;\n        const date = getDate(props.date, props.selectedRange);\n\n        switch (direction) {\n            case 'next':\n                onChangeMonth(addMonths(date, 1));\n                break;\n            case 'prev':\n                onChangeMonth(subtractMonths(date, 1));\n                break;\n        }\n    }\n\n    if (mobile) {\n        return (\n            <GestureWrapper\n                allowNext={allowNext()}\n                allowPrev={allowPrev()}\n                onChangeMonth={onChangeMonth}\n            >\n                <MobileMenuTable\n                    date={subtractMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={subtractMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={props.date}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={props.value}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={addMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={addMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n            </GestureWrapper>\n        );\n    }\n\n    return (\n        <MenuTable\n            date={props.date}\n            minDate={props.minDate}\n            maxDate={props.maxDate}\n            mobile={props.mobile}\n            selectRange={props.selectRange}\n            selectedRange={props.selectedRange}\n            showCalendarWeek={props.showCalendarWeek}\n            showConfirm={props.showConfirm}\n            showTime={props.showTime}\n            value={props.value}\n            hoverDate={props.hoverDate}\n            onSubmit={props.onSubmit}\n            onSelectDay={props.onSelectDay}\n            onHoverDays={props.onHoverDays}\n        />\n    );\n}\n\nexport function Menu(props: ReactTimebombMenuProps) {\n    const { mode, mobile, showDate, showConfirm, showTime } = props;\n    const ConfirmComponent = props.confirmComponent || MenuConfirm;\n\n    if (showDate || showTime) {\n        switch (mode) {\n            case 'year':\n            case 'month':\n                return (\n                    <MonthAndYearContainer mobile={mobile}>\n                        <MenuMonths {...props} />\n                        <MenuYear {...props} />\n                    </MonthAndYearContainer>\n                );\n            case 'day':\n            case 'hour':\n            case 'minute':\n            case 'second':\n                return (\n                    <MonthContainer>\n                        {showDate && <MonthWrapper {...props} />}\n                        {showTime && (\n                            <MenuTime\n                                date={props.date}\n                                timeStep={props.timeStep}\n                                topDivider={props.showDate}\n                                format={props.format}\n                                onChange={props.onSelectTime}\n                                onSubmit={props.onSubmitTime}\n                                onCancel={props.onSubmitTime}\n                            />\n                        )}\n                        {showConfirm && <ConfirmComponent {...props} />}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    return null;\n}\n","import { ArrowButtonProps } from './components/button';\n\nexport type ReactTimebombDate = undefined | Date | Date[];\n\ntype ReactComponent<P = {}> =\n    | React.ComponentClass<P>\n    | React.StatelessComponent<P>;\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectRange?: 'week' | number | boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: any;\n    mobile?: boolean;\n    arrowButtonId?: string;\n    arrowButtonComponent?: ReactComponent<ArrowButtonProps>;\n    clearComponent?: ReactComponent<ClearComponentProps>;\n    iconComponent?: ReactComponent<IconProps> | null;\n    labelComponent?: ReactComponent<\n        ReactTimebombValueProps | ReactTimebombMultiValueProps\n    >;\n    confirmComponent?: ReactComponent<ReactTimebombMenuProps>;\n    timeStep?: number;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode?: FormatType;\n    showDate?: boolean;\n    showTime?: boolean;\n    preventClose?: boolean;\n    selectedRange: number;\n    menuHeight?: 'auto';\n    hoverDate?: Date;\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\nexport type FormatType =\n    | 'day'\n    | 'month'\n    | 'year'\n    | 'hour'\n    | 'minute'\n    | 'second';\n\nexport interface ReactTimebombValueProps {\n    className?: string;\n    innerRef?: React.Ref<HTMLDivElement>;\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    clearComponent: ReactTimebombProps['clearComponent'];\n    arrowButtonId: ReactTimebombProps['arrowButtonId'];\n    iconComponent: ReactTimebombProps['iconComponent'];\n    labelComponent: ReactTimebombProps['labelComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    timeStep: ReactTimebombProps['timeStep'];\n    hoverDate: ReactTimebombState['hoverDate'];\n    selectRange: ReactTimebombProps['selectRange'];\n    onToggle?(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\nexport type ReactTimebombMultiValueProps = Omit<\n    ReactTimebombValueProps,\n    'value'\n> & {\n    value: undefined | Date[];\n    onValueSelect(date: Date, index: number): void;\n};\n\nexport interface ReactTimebombMenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    timeStep: ReactTimebombProps['timeStep'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    confirmComponent: ReactTimebombProps['confirmComponent'];\n    hoverDate: ReactTimebombState['hoverDate'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onChangeYear(date: Date): void;\n    onChangeMonth(date: Date): void;\n    onSelectTime(date: Date, mode: FormatType): void;\n    onSubmitTime(date: Date | undefined, mode: FormatType): void;\n    onHoverDays(dates: Date[]): void;\n    onSubmit(): void;\n}\n\nexport interface IconProps {\n    showDate?: boolean;\n    showTime?: boolean;\n}\n\nexport interface ClearComponentProps {\n    disabled?: boolean;\n    onClick(e: React.MouseEvent<HTMLButtonElement>): void;\n}\n\nexport { ClearComponentProps as ReactTimebombClearComponentProps };\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n"]}