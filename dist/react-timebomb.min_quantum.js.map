{"version":3,"sources":["src/index.tsx","src/value/value.tsx","src/typings.ts"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","value_multi_1","__export","Container","default","div","MenuWrapper","props","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","valueRef","createRef","emitChange","timeout","date","clearTimeout","setTimeout","__awaiter","value","onChange","dateEqual","isArray","setStateAsync","allowValidation","Boolean","preventClose","minDate","maxDate","isBefore","console","error","state","initialState","onChangeValueText","bind","emitChangeAndClose","onSelectDay","onModeDay","onModeYear","onModeMonth","onChangeMonth","onChangeYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onHoverDays","onMultiValueSelect","onPaste","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","hoverDate","menuHeight","selectedRange","prevProps","prevState","selectRange","showConfirm","setState","stringEqual","result","validateValueText","emitError","rangeIsComplete","length","Promise","resolve","validDate","validateDate","some","d","isEnabled","isUndefined","placeholder","showCalendarWeek","timeStep","confirmComponent","onOpen","menuWidth","Math","max","MENU_WIDTH","menuLeft","current","getBoundingClientRect","left","width","createElement","Select","open","onToggle","onRef","showMenu","onClick","onCloseMenu","onOpenMenu","getMobileMenuContainer","ref","renderValue","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","clearComponent","labelComponent","isMulti","ValueComponent","ValueMulti","Value","componentValue","sort","a","b","getTime","onAllSelect","onValueSelect","clearSelection","onError","newDate","date0","date1","index","Object","assign","valueText0","day","valueDate","startOfWeek","endOfWeek","addDays","setDate","getHours","getMinutes","dateArr","getSelectedRange","sortDates","currentDate","setMonth","getMonth","time","commit","map","text","e","target","HTMLDivElement","classList","contains","defaultProps","exports","button_1","Flex","Input","span","ClearButton","SmallButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","getIcon","DefaultClearComponent","tabIndex","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","PureComponent","inputs","mounted","currentTarget","selectElement","allSelected","formatGroup","getAttribute","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","formatGroups","split","reduce","memo","char","prevChar","substr","formatSplitExpr","test","focused","document","querySelector","hasFocus","inp","allowTextSelection","parts","splitDate","forEach","i","innerText","focus","find","el","forceUpdate","ArrowButtonComp","ArrowButton","ClearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","data-role","innerRef","id","LabelComponent","contentEditable","group","g","separator","hasFormatType","data-react-timebomb-selectable","data-placeholder","data-separator","replaceSpaceWithNbsp","key","data-group","onDoubleClick","nextSibling","previousSibling","numericFormat","formatIsActualNumber","sel","getSelection","hasSelection","focusOffset","anchorOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","manipulateDate","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","firstInput","validatedChar","blur","parentNode","dataGroup","filledValue","fillZero","clipboardData","getData","stopPropagation","forwardRef","ReactTimebombArrowButtonProps","ArrowButtonProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType,\n    addDays,\n    stringEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport * from './typings';\n\ninterface MenuWrapperProps {\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n\n    private onToggle?: () => void;\n    private onCloseMenu?: () => void;\n    private onOpenMenu?: () => void;\n    private MobileMenuContainer?: React.ComponentType<MenuContainerProps>;\n    private valueRef = React.createRef<HTMLDivElement>();\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentType<MenuContainerProps>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            hoverDate: undefined,\n            menuHeight: 'auto',\n            selectedRange: 0,\n            preventClose: false\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            console.error(\n                '[react-timebomb]: minDate must appear before maxDate'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.emitChangeAndClose = this.emitChangeAndClose.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onChangeYear = this.onChangeYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onHoverDays = this.onHoverDays.bind(this);\n        this.onMultiValueSelect = this.onMultiValueSelect.bind(this);\n        this.onPaste = this.onPaste.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public async componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ) {\n        const { valueText, showDate, showTime, preventClose } = this.state;\n        const { value, format, selectRange, showConfirm } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (!stringEqual(prevState.valueText, valueText)) {\n            const result = await this.validateValueText();\n\n            if (result.error) {\n                this.emitError(result.error, result.valueText);\n            }\n\n            if (result.date) {\n                const rangeIsComplete =\n                    selectRange &&\n                    isArray(result.date) &&\n                    result.date.length === 2;\n\n                if (\n                    (!showConfirm && !selectRange && showDate) ||\n                    rangeIsComplete\n                ) {\n                    if (prevState.mode === 'day' && !preventClose) {\n                        this.emitChangeAndClose(result.date);\n                    } else {\n                        this.emitChange(result.date);\n                    }\n                }\n\n                if (!showDate && showTime) {\n                    this.emitChange(result.date);\n                }\n            }\n        }\n    }\n\n    private setStateAsync<K extends keyof ReactTimebombState>(\n        state:\n            | ((\n                  prevState: Readonly<ReactTimebombState>,\n                  props: Readonly<ReactTimebombProps>\n              ) => Pick<ReactTimebombState, K> | ReactTimebombState | null)\n            | (Pick<ReactTimebombState, K> | ReactTimebombState | null)\n    ) {\n        return new Promise(resolve => {\n            this.setState(state, resolve);\n        });\n    }\n\n    private validateValueText(): Promise<{\n        date?: ReactTimebombDate;\n        error?: ReactTimebombError;\n        valueText?: string | string[];\n    }> {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        return new Promise(async resolve => {\n            if (validDate) {\n                await this.setStateAsync({ allowValidation: true });\n\n                const enabled = isArray(validDate)\n                    ? validDate.some(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    await this.setStateAsync({ date: validDate });\n\n                    resolve({ date: validDate });\n                } else {\n                    resolve({ error: 'outOfRange', valueText });\n                }\n            } else if (valueText) {\n                resolve({ error: 'invalidDate', valueText });\n            } else if (!isUndefined(valueText) && allowValidation) {\n                resolve({ date: undefined });\n            }\n        });\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            confirmComponent,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate,\n            hoverDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuLeft =\n            isArray(value) &&\n            value.length === 1 &&\n            this.valueRef.current &&\n            selectRange === true\n                ? this.valueRef.current.getBoundingClientRect().left +\n                  this.valueRef.current.getBoundingClientRect().width -\n                  menuWidth\n                : undefined;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({\n                    placeholder,\n                    open,\n                    onToggle,\n                    onClose,\n                    onOpen,\n                    onRef,\n                    MenuContainer\n                }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n                    const className = [this.className];\n                    const onClick = mobile\n                        ? this.onMobileMenuContainerClick\n                        : undefined;\n\n                    if (showMenu) {\n                        className.push('open');\n                    }\n\n                    this.onToggle = onToggle;\n                    this.onCloseMenu = onClose;\n                    this.onOpenMenu = onOpen;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={className.join(' ')}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuLeft={menuLeft}\n                                    menuWidth={menuWidth}\n                                    menuHeight={this.state.menuHeight}\n                                    onClick={onClick}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            hoverDate={hoverDate}\n                                            confirmComponent={confirmComponent}\n                                            onHoverDays={this.onHoverDays}\n                                            onSelectDay={this.onSelectDay}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onChangeYear={this.onChangeYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.emitChangeAndClose}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId,\n            clearComponent,\n            labelComponent\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            allowValidation,\n            mode,\n            hoverDate\n        } = this.state;\n        const isMulti = selectRange || isArray(value);\n        const ValueComponent = isMulti ? ValueMulti : Value;\n\n        let componentValue = isMulti\n            ? value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined\n            : value;\n\n        if (\n            isArray(componentValue) &&\n            componentValue.length === 1 &&\n            hoverDate\n        ) {\n            componentValue = [...componentValue, hoverDate].sort(\n                (a, b) => a.getTime() - b.getTime()\n            );\n        }\n\n        placeholder = open && !isMulti ? undefined : placeholder;\n\n        return (\n            <ValueComponent\n                ref={this.valueRef}\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                selectRange={selectRange}\n                value={componentValue as any}\n                hoverDate={hoverDate}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                clearComponent={clearComponent}\n                labelComponent={labelComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle}\n                onSubmit={this.emitChangeAndClose}\n                onAllSelect={this.onModeDay}\n                onValueSelect={this.onMultiValueSelect}\n                onPaste={this.onPaste}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        // get rid of this timeout\n        // fixme\n        setTimeout(async () => {\n            clearSelection();\n\n            await this.setStateAsync(this.initialState);\n\n            if (this.props.onClose) {\n                this.props.onClose();\n            }\n        }, 16);\n    }\n\n    private async emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ) {\n        if (this.state.allowValidation) {\n            await this.setStateAsync({ allowValidation: false });\n\n            if (this.props.onError) {\n                this.props.onError(error, value);\n            }\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(async () => {\n                const { value, onChange } = this.props;\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                const changeDate = isArray(date) ? date : [date];\n\n                onChange(...changeDate);\n\n                await this.setStateAsync({\n                    allowValidation: Boolean(date),\n                    preventClose: false\n                });\n            }, 0);\n        };\n    })();\n\n    private async emitChangeAndClose(newDate?: ReactTimebombDate) {\n        if (this.onCloseMenu) {\n            this.onCloseMenu();\n        }\n        clearSelection();\n\n        const { date } = newDate\n            ? { date: newDate }\n            : await this.validateValueText();\n\n        if (date) {\n            this.emitChange(date);\n        }\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private async onClear() {\n        await this.setStateAsync({ valueText: undefined });\n\n        this.emitChange(undefined);\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText, preventClose: true });\n    }\n\n    private async onChangeFormatGroup(format?: string) {\n        await this.setStateAsync({\n            menuHeight: 'auto',\n            mode: format ? getFormatType(format) : undefined\n        });\n    }\n\n    private onHoverDays([date0, date1]: (Date | undefined)[]) {\n        const hoverDate = date1 || date0;\n\n        if (\n            isArray(this.state.valueText) &&\n            isArray(this.state.date) &&\n            this.state.valueText.length === 1 &&\n            this.state.date.length === 1 &&\n            hoverDate\n        ) {\n            this.setState({ hoverDate });\n        }\n    }\n\n    private async onMultiValueSelect(date: Date, index: number) {\n        if (index === 0) {\n            await this.setStateAsync({ ...this.initialState, hoverDate: date });\n        }\n\n        if (\n            index === 1 &&\n            isArray(this.state.valueText) &&\n            isArray(this.state.date)\n        ) {\n            const [valueText0] = this.state.valueText;\n            const [date0] = this.state.date;\n\n            await this.setStateAsync({\n                ...this.initialState,\n                valueText: [valueText0],\n                date: [date0],\n                hoverDate: date\n            });\n        }\n\n        // since closing of the menu is delayed (16ms), we need to deplay the opening as well\n        // fixme\n        setTimeout(async () => {\n            if (this.onOpenMenu) {\n                this.onOpenMenu();\n            }\n\n            await this.setStateAsync({ hoverDate: date });\n        }, 32);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, selectRange } = this.props;\n        const format = this.props.format!;\n\n        const valueDate = (() => {\n            if (value instanceof Date) {\n                return value;\n            }\n\n            if (isArray(value)) {\n                return value[0];\n            }\n\n            return day;\n        })();\n\n        if (selectRange === 'week') {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (typeof selectRange === 'number') {\n            const date = [day, addDays(day, selectRange - 1)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (selectRange === true) {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(this.state.valueText[0], format) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format);\n\n            this.setState({\n                date: dateArr,\n                valueText,\n                selectedRange,\n                hoverDate: undefined\n            });\n        } else {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onChangeYear(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private async onSelectTime(time: Date, mode: FormatType, commit = false) {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        await this.setStateAsync({ mode, valueText });\n\n        if (commit) {\n            this.emitChange(newDate);\n        }\n    }\n\n    private onPaste(text: string) {\n        const date = validateDate(text, this.props.format!);\n\n        if (date instanceof Date) {\n            this.onSelectDay(date);\n        }\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton, SmallButton } from '../components/button';\nimport {\n    ClearComponentProps,\n    IconProps,\n    ReactTimebombValueProps\n} from '../typings';\nimport {\n    clearSelection,\n    fillZero,\n    formatIsActualNumber,\n    formatNumber,\n    formatSplitExpr,\n    getAttribute,\n    getFormatType,\n    isEnabled,\n    joinDates,\n    keys,\n    manipulateDate,\n    replaceSpaceWithNbsp,\n    selectElement,\n    splitDate,\n    stringFromCharCode,\n    validateFormatGroup\n} from '../utils';\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = (props: ClearComponentProps) => (\n    <ClearButton\n        className=\"react-timebomb-clearer\"\n        tabIndex={-1}\n        disabled={props.disabled}\n        onClick={props.onClick}\n    >\n        <ClearButtonX>×</ClearButtonX>\n    </ClearButton>\n);\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nclass ValueComponent extends React.PureComponent<\n    ReactTimebombValueProps,\n    ValueState\n> {\n    private inputs: HTMLSpanElement[] = [];\n    private mounted = false;\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ReactTimebombValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onPaste = this.onPaste.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ReactTimebombValueProps): void {\n        setTimeout(() => {\n            if (!this.mounted) {\n                return;\n            }\n\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n                        const input = this.inputs[0];\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (input && allowTextSelection) {\n                            input.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            const [input] = this.inputs;\n\n                            if (input) {\n                                selectElement(input);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        this.mounted = true;\n\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                ref={this.props.innerRef}\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearComponent\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        />\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const LabelComponent = this.props.labelComponent;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...this.props} />;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n                        const hasFormatType = Boolean(getFormatType(group));\n                        const placeholder = hasFormatType ? group : undefined;\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled || !hasFormatType}\n                                data-placeholder={placeholder}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                                onPaste={this.onPaste}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = sel\n            ? Boolean(sel.focusOffset - sel.anchorOffset)\n            : false;\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC && onToggle) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected && this.mounted) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.mounted &&\n                this.props.onToggle &&\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onPaste(e: React.ClipboardEvent<HTMLSpanElement>) {\n        e.preventDefault();\n\n        const text = e.clipboardData.getData('text/plain');\n\n        if (text) {\n            this.props.onPaste(text);\n\n            if (e.target instanceof HTMLSpanElement) {\n                e.target.blur();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (onToggle) {\n            if (!this.inputs.some(inp => inp === e.target) || !open) {\n                onToggle();\n            }\n        }\n    }\n}\n\nexport const Value = React.forwardRef(\n    (props: ReactTimebombValueProps, ref: React.Ref<HTMLDivElement>) => (\n        <ValueComponent innerRef={ref} {...props} />\n    )\n);\n","import { ArrowButtonProps } from './components/button';\n\nexport type ReactTimebombDate = undefined | Date | Date[];\n\ntype ReactComponent<P = {}> =\n    | React.ComponentClass<P>\n    | React.StatelessComponent<P>;\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectRange?: 'week' | number | boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: any;\n    mobile?: boolean;\n    arrowButtonId?: string;\n    arrowButtonComponent?: ReactComponent<ArrowButtonProps>;\n    clearComponent?: ReactComponent<ClearComponentProps>;\n    iconComponent?: ReactComponent<IconProps> | null;\n    labelComponent?: ReactComponent<\n        ReactTimebombValueProps | ReactTimebombMultiValueProps\n    >;\n    confirmComponent?: ReactComponent<ReactTimebombMenuProps>;\n    timeStep?: number;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode?: FormatType;\n    showDate?: boolean;\n    showTime?: boolean;\n    preventClose?: boolean;\n    selectedRange: number;\n    menuHeight?: 'auto';\n    hoverDate?: Date;\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\nexport type FormatType =\n    | 'day'\n    | 'month'\n    | 'year'\n    | 'hour'\n    | 'minute'\n    | 'second';\n\nexport interface ReactTimebombValueProps {\n    className?: string;\n    innerRef?: React.Ref<HTMLDivElement>;\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    clearComponent: ReactTimebombProps['clearComponent'];\n    arrowButtonId: ReactTimebombProps['arrowButtonId'];\n    iconComponent: ReactTimebombProps['iconComponent'];\n    labelComponent: ReactTimebombProps['labelComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    timeStep: ReactTimebombProps['timeStep'];\n    hoverDate: ReactTimebombState['hoverDate'];\n    selectRange: ReactTimebombProps['selectRange'];\n    onToggle?(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n    onPaste(text: string): void;\n}\n\nexport type ReactTimebombMultiValueProps = Omit<\n    ReactTimebombValueProps,\n    'value'\n> & {\n    value: undefined | Date[];\n    onValueSelect(date: Date, index: number): void;\n};\n\nexport interface ReactTimebombMenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    timeStep: ReactTimebombProps['timeStep'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    confirmComponent: ReactTimebombProps['confirmComponent'];\n    hoverDate: ReactTimebombState['hoverDate'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onChangeYear(date: Date): void;\n    onChangeMonth(date: Date): void;\n    onSelectTime(date: Date, mode: FormatType): void;\n    onSubmitTime(date: Date | undefined, mode: FormatType): void;\n    onHoverDays(dates: Date[]): void;\n    onSubmit(): void;\n}\n\nexport interface IconProps {\n    showDate?: boolean;\n    showTime?: boolean;\n}\n\nexport interface ClearComponentProps {\n    disabled?: boolean;\n    onClick(e: React.MouseEvent<HTMLButtonElement>): void;\n}\n\nexport { ClearComponentProps as ReactTimebombClearComponentProps };\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n"]}