{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/utils.ts","src/button.tsx","src/menu-title.tsx","src/value.tsx"],"names":["DEFAULT_FORMAT","utils_1","validateDate","valueText","format","isDisabled","validDate","this","props","value","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","state","dateFormat","date","now","startOfDay","Date","time","split","newDate","setDate","parseInt","splitted","setState","emitChange","exports","ReactTimebomb","mode","getFullYear","year","currentDate","endOfYear","selected","getMonthNames","month","getMonth","onSubmit","onToggle","e","currentTarget","getAttribute","onSelectYear","React","SyntheticEvent","_a","Object","tslib_1","__metadata","MouseEvent","_b","_c","Menu","moment_1","$fsx","r","momentImport","moment","default","formatSplit","getFormatType","test","setHours","endOfDay","addDays","num","add","toDate","instance","isValid","validateFormatGroup","input","isFinite","int","char","String","strLen","length","startsWith","stringFromCharCode","keyCode","charCode","Math","floor","fromCharCode","formatNumber","number","splitDate","joinDates","parts","strParts","map","part","HTMLElement","innerText","filter","val","splittedFormat","join","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","clearSelection","sel","getSelection","empty","removeAllRanges","getWeekOfYear","isoWeek","startOfWeek","startOf","endOfWeek","endOf","subtractDays","manipulateDate","subtract","isSame","monthsShort","minDate","maxDate","attr","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","A","styled_components_1","Button","button","button_1","Container","div","show","MenuTitle","PureComponent","prevDisabled","startOfMonth","nextDisabled","endOfMonth","[object Object]","onNextMonth","onPrevMonth","onMonths","onYear","months","createElement","tabIndex","disabled","onClick","prevChar","memo","searchInputs","some","inp","focused","open","document","createRange","push","el","onChangeValueText","allowValidation","preventDefault","formatGroup","i","dateParts","dataValue","forbiddenKeys","includes","target","lodash_decorators_1","bind","ReactNode","__decorate","Value"],"mappings":"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","sourcesContent":["import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isDisabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst DEFAULT_FORMAT = 'YYYY-MM-DD';\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    opacity: 0;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(\n                props.format && /H|h|m|k|a|S|s/.test(props.format)\n            )\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        this.state = {\n            allowValidation: false,\n            mode: 'month',\n            valueText: value ? dateFormat(value, format) : undefined,\n            date: value || startOfDay(new Date())\n        };\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate();\n        }\n    }\n\n    private valueTextDidUpdate(): void {\n        const { valueText, allowValidation } = this.state;\n        const { format = DEFAULT_FORMAT } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const disabled = isDisabled(validDate, this.props);\n\n                if (disabled) {\n                    this.emitError('outOfRange', valueText!);\n                } else {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate)\n                    );\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            value,\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format = DEFAULT_FORMAT\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 300;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n\n        return (\n            <Select<Date> value={value} placeholder={placeholder}>\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => (\n                    <Container ref={onRef as any} className=\"react-timebomb\">\n                        {open ? (\n                            <MenuContainer\n                                menuWidth={menuWidth}\n                                menuHeight={menuHeight}\n                            >\n                                <MenuWrapper menuHeight={menuHeight}>\n                                    <MenuTitle\n                                        mode={mode}\n                                        date={this.state.date}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onMonths={this.onModeMonths}\n                                        onYear={this.onModeYear}\n                                        onNextMonth={this.onNextMonth}\n                                        onPrevMonth={this.onPrevMonth}\n                                        onToday={this.onToday}\n                                    />\n                                    <Menu\n                                        showTime={showTime}\n                                        showConfirm={showConfirm}\n                                        showCalendarWeek={showCalendarWeek}\n                                        selectWeek={selectWeek}\n                                        date={this.state.date}\n                                        value={value}\n                                        valueText={valueText}\n                                        format={format}\n                                        mode={mode}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onSelectDay={this.onSelectDay}\n                                        onSelectMonth={this.onSelectMonth}\n                                        onSelectYear={this.onSelectYear}\n                                        onSelectTime={this.onSelectTime}\n                                        onToggle={onToggle}\n                                        onSubmit={this.onValueSubmit}\n                                    />\n                                </MenuWrapper>\n                            </MenuContainer>\n                        ) : (\n                            <>\n                                {this.onClose()}\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            </>\n                        )}\n                        <Value\n                            placeholder={open ? undefined : placeholder}\n                            format={format}\n                            value={value}\n                            valueText={valueText}\n                            minDate={minDate}\n                            maxDate={maxDate}\n                            allowValidation={allowValidation}\n                            open={open}\n                            onChangeValueText={this.onChangeValueText}\n                            onToggle={onToggle}\n                            onSubmit={this.onValueSubmit}\n                        />\n                    </Container>\n                )}\n            </Select>\n        );\n    }\n\n    private onClose(): null {\n        clearSelection();\n\n        setTimeout(() => {\n            const { format = DEFAULT_FORMAT } = this.props;\n            const validDate = validateDate(this.state.valueText, format);\n            const isValid = validDate\n                ? !isDisabled(validDate, this.props)\n                : validDate;\n\n            if (!isValid && this.props.value) {\n                const formattedDate = dateFormat(this.props.value, format);\n\n                if (this.state.valueText !== formattedDate) {\n                    this.setState({ valueText: formattedDate });\n                }\n            }\n        }, 0);\n\n        return null;\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.props.onError && this.state.allowValidation) {\n            this.props.onError(error, value);\n        }\n    }\n\n    private emitChange(date?: Date): void {\n        const { value } = this.props;\n\n        if (value && date && value.getTime() === date.getTime()) {\n            return;\n        }\n\n        this.props.onChange(date);\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    @bind\n    private onChangeValueText(valueText: string): void {\n        this.setState({ valueText });\n    }\n\n    @bind\n    private onValueSubmit(onToggle: () => void): void {\n        onToggle();\n        clearSelection();\n    }\n\n    @bind\n    private onSelectDay(day: Date): void {\n        const { value, format = DEFAULT_FORMAT } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format);\n\n        this.setState({ date, valueText }, () => this.emitChange(date));\n    }\n\n    @bind\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    @bind\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    @bind\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    @bind\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    @bind\n    private onToday(): void {\n        const now = startOfDay(new Date());\n\n        this.setState({ date: now });\n    }\n\n    @bind\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    @bind\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    @bind\n    private onSelectTime(time: string): void {\n        const { format = DEFAULT_FORMAT } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value));\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format);\n\n            this.setState({ valueText }, () => this.emitChange(newDate));\n        }\n    }\n}\n","import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isDisabled,\n    validateDate,\n    isToday,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    endOfYear\n} from './utils';\nimport { Button } from './button';\n\ninterface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    format: string;\n    onToggle(): void;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(onToggle: () => void): void;\n}\n\ninterface DayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n    today: boolean;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: center;\n    padding: 10px;\n\n    button {\n        width: 33%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        line-height: 3.13;\n        border: none;\n        margin: 0;\n        padding: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    font-size: 13px;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n        }\n    }\n`;\n\nconst Day = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: DayProps) => (props.current ? '#000' : '#aaa')};\n    background-color: ${(props: DayProps) =>\n        props.selected\n            ? '#ddd'\n            : props.today\n                ? 'rgba(172, 206, 247, 0.4)'\n                : 'transparent'};\n    font-weight: ${(props: DayProps) => (props.selected ? 'bold' : 'normal')};\n    pointer-events: ${(props: DayProps) => (props.disabled ? 'none' : 'auto')};\n    user-select: none;\n    opacity: ${(props: DayProps) => (props.disabled ? 0.3 : 1)};\n\n    &:hover {\n        background-color: ${(props: DayProps) =>\n            props.selected ? '#ddd' : '#eee'};\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    private get now(): Date {\n        return new Date();\n    }\n\n    private get monthMatrix(): (Date[])[] {\n        const { date } = this.props;\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }\n\n    public render(): React.ReactNode {\n        const { mode, showConfirm } = this.props;\n\n        switch (mode) {\n            case 'year':\n            case 'months':\n                return (\n                    <div style={{ display: 'flex' }}>\n                        {this.renderMenuMonths()}\n                        {this.renderMenuYear()}\n                    </div>\n                );\n            case 'month':\n                return (\n                    <MonthContainer>\n                        {this.renderMonth()}\n                        {showConfirm && this.renderConfirm()}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        const { date: currentDate } = this.props;\n        const currentYear = this.now.getFullYear();\n        const year = currentDate.getFullYear();\n\n        return (\n            <YearContainer className=\"years\">\n                {Array(100)\n                    .fill(undefined)\n                    .map((_, i) => {\n                        const newDate = new Date(currentDate);\n\n                        newDate.setFullYear(currentYear - i);\n\n                        const disabled = isDisabled(\n                            endOfYear(newDate),\n                            this.props\n                        );\n                        const selected = year === newDate.getFullYear();\n\n                        return (\n                            <Button\n                                key={i}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                disabled={disabled}\n                                data-date={newDate.toString()}\n                                onClick={this.onSelectYear}\n                            >\n                                {currentYear - i}\n                            </Button>\n                        );\n                    })}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { date, value } = this.props;\n        const months = getMonthNames(true);\n        const month = value && value.getMonth();\n        const year = value && value.getFullYear();\n\n        return (\n            <MonthsContainer className=\"months\">\n                {months.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    // TODO: funktioniet nicht ganz rund\n                    const disabled = isDisabled(newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={disabled}\n                            data-date={newDate.toString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { monthMatrix } = this;\n        const { showCalendarWeek, selectWeek } = this.props;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>Mo</th>\n                        <th>Di</th>\n                        <th>Mi</th>\n                        <th>Do</th>\n                        <th>Fr</th>\n                        <th>Sa</th>\n                        <th>So</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {monthMatrix.map((dates, i) => (\n                        <tr key={i}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    {getWeekOfYear(dates[0])}\n                                </td>\n                            )}\n                            {dates.map((date, j) => (\n                                <td className=\"day\" key={j}>\n                                    {this.renderDay(date)}\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderDay(day: Date): React.ReactNode {\n        const num = day.getDate();\n        const { value, date, selectWeek } = this.props;\n        let selected =\n            value &&\n            day.getDate() === value.getDate() &&\n            day.getMonth() === value.getMonth();\n        const current = day.getMonth() === date.getMonth();\n        const disabled = isDisabled(day, this.props);\n        const today = isToday(day);\n\n        if (selectWeek && value) {\n            selected = getWeekOfYear(value) === getWeekOfYear(day);\n        }\n\n        return (\n            <Day\n                data-date={day.toString()}\n                className={selected ? 'value selected' : 'value'}\n                selected={selected}\n                current={current}\n                disabled={disabled}\n                today={today}\n                onClick={this.onSelectDay}\n            >\n                {num}\n            </Day>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={validDate === null}\n                    onClick={() => this.props.onSubmit(this.props.onToggle)}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    @bind\n    private onSelectDay(e: React.SyntheticEvent<HTMLDivElement>): void {\n        const date = new Date(e.currentTarget.getAttribute('data-date')!);\n\n        this.props.onSelectDay(date);\n    }\n\n    @bind\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    @bind\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(e.currentTarget.getAttribute(\n            'data-date'\n        ) as string);\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\nconst formatSplit = /[.|:|-|\\\\|_|\\s]/;\n\ntype FormatType = 'day' | 'month' | 'year' | 'hour' | 'minute' | 'second';\n\nexport function dateFormat(date: Date, format: string): string {\n    return moment(date).format(format);\n}\n\nexport function validateDate(\n    date: string | undefined,\n    format: string\n): Date | null {\n    const instance = moment(date, format, true);\n\n    return instance.isValid() ? instance.toDate() : null;\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/d/i.test(format)) {\n        return 'day';\n    }\n\n    if (/M/.test(format)) {\n        return 'month';\n    }\n\n    if (/y/i.test(format)) {\n        return 'year';\n    }\n\n    if (/h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n        const type = getFormatType(format);\n\n        switch (type) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n\n    return String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n}\n\nexport function formatNumber(number: Number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    return dateFormat(date, format).split(formatSplit);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplit);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    switch (parsingFlags.overflow) {\n        case 2:\n            return moment(\n                // @ts-ignore\n                new Date(...parsingFlags.parsedDateParts)\n            ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function endOfYear(date: Date): Date {\n    return moment(date)\n        .endOf('year')\n        .toDate();\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract'\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, 1);\n            if (direction === 'subtract') return subtractMinutes(date, 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, 1);\n            if (direction === 'subtract') return subtractSeconds(date, 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function isDisabled(\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean | undefined {\n    return (\n        (minDate && date < startOfDay(minDate)) ||\n        (maxDate && date >= endOfDay(maxDate))\n    );\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    A: 65\n};\n","// @ts-ignore\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nexport const Button = styled.button`\n    margin-right: 5px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n    padding: 3px 6px;\n    min-height: 21px;\n    box-sizing: border-box;\n    background: ${(props: { selected?: boolean }) =>\n        props.selected ? '#ccc' : '#fff'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    &:not(:disabled) {\n        cursor: pointer;\n    }\n\n    &:not(:disabled):hover {\n        background-color: ${(props: { selected?: boolean }) =>\n            props.selected ? '#ccc' : '#efefef'};\n    }\n\n    &:last-child {\n        margin-right: 0;\n    }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { Button } from './button';\nimport {\n    subtractDays,\n    startOfMonth,\n    endOfMonth,\n    addDays,\n    getMonthNames\n} from './utils';\n\ninterface MenuTitleProps {\n    date: Date;\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    mode: ReactTimebombState['mode'];\n    onPrevMonth(): void;\n    onNextMonth(): void;\n    onToday(): void;\n    onMonths(): void;\n    onYear(): void;\n}\n\nconst Container = styled.div`\n    display: ${(props: { show: boolean }) => (props.show ? 'flex' : 'none')};\n    align-items: center;\n    width: 100%;\n    padding: 10px 10px 15px;\n    justify-content: space-between;\n    min-height: 21px;\n    box-sizing: border-box;\n`;\n\nexport class MenuTitle extends React.PureComponent<MenuTitleProps> {\n    private get prevDisabled(): boolean {\n        const { minDate, date } = this.props;\n\n        if (minDate) {\n            return subtractDays(startOfMonth(date), 1) < minDate;\n        }\n\n        return false;\n    }\n\n    private get nextDisabled(): boolean {\n        const { maxDate, date } = this.props;\n\n        if (maxDate) {\n            return addDays(endOfMonth(date), 1) > maxDate;\n        }\n\n        return false;\n    }\n\n    public render(): React.ReactNode {\n        const {\n            date,\n            mode,\n            onNextMonth,\n            onPrevMonth,\n            onMonths,\n            onYear\n        } = this.props;\n        const months = getMonthNames(true);\n        const show = mode === 'month';\n\n        return (\n            <Container show={show}>\n                <Button\n                    tabIndex={-1}\n                    disabled={this.prevDisabled}\n                    onClick={onPrevMonth}\n                >\n                    ◀\n                </Button>\n                <div>\n                    <Button tabIndex={-1} onClick={onMonths}>\n                        <b>{months[date.getMonth()]}</b>\n                    </Button>\n                    <Button tabIndex={-1} onClick={onYear}>\n                        {date.getFullYear()}\n                    </Button>\n                </div>\n                <Button\n                    tabIndex={-1}\n                    disabled={this.nextDisabled}\n                    onClick={onNextMonth}\n                >\n                    ▶\n                </Button>\n            </Container>\n        );\n    }\n}\n","import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isDisabled\n} from './utils';\nimport { ReactTimebombProps } from './typings';\n\ninterface ValueProps {\n    open?: boolean;\n    value?: Date;\n    valueText?: string;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    allowValidation?: boolean;\n    onToggle(): void;\n    onChangeValueText(valueText: string): void;\n    onSubmit(onToggle: () => void): void;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nconst Button = styled.button`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ClearButton = styled(Button)`\n    font-size: 18px;\n`;\n\nconst Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nconst Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '📅';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nexport class Value extends React.PureComponent<ValueProps> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (prevProps.value !== value && value) {\n                const parts = splitDate(value, format);\n                const input = this.searchInputs[0];\n\n                this.searchInputs.forEach(\n                    (input, i) => (input.innerText = parts[i])\n                );\n\n                if (input) {\n                    input.focus();\n                }\n            }\n\n            if ((open && !prevProps.open) || value !== prevProps.value) {\n                const input = this.searchInputs[0];\n\n                if (input) {\n                    if (input.innerText === '') {\n                        input.focus();\n                    } else {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <Button tabIndex={-1} className=\"react-timebomb-arrow\">\n                        {open ? '▲' : '▼'}\n                    </Button>\n                </Flex>\n            </Container>\n        );\n    }\n\n    @bind\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef as any}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onClick={this.onFocus}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    @bind\n    private onSearchRef(el?: HTMLSpanElement): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    @bind\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const nextValue = numericValue + (isArrowUp ? 1 : -1);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction\n                            );\n                            const disabled = isDisabled(newDate, this.props);\n\n                            if (!disabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group')!;\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    @bind\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, allowValidation } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        if (e.keyCode === keys.ENTER || e.keyCode === keys.ESC) {\n            if (this.focused) {\n                this.focused.blur();\n            }\n            this.props.onSubmit(this.props.onToggle);\n\n            return;\n        }\n\n        const forbiddenKeys = [\n            keys.SHIFT,\n            keys.ARROW_LEFT,\n            keys.ARROW_RIGHT,\n            keys.ARROW_UP,\n            keys.ARROW_DOWN,\n            keys.TAB\n        ];\n\n        // focus next\n        if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !forbiddenKeys.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', innerText);\n    }\n\n    @bind\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    @bind\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    @bind\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onChangeValueText('');\n    }\n\n    @bind\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (\n            this.searchInputs.some(inp => inp === e.target) === false ||\n            !open\n        ) {\n            onToggle();\n        }\n    }\n}\n"]}