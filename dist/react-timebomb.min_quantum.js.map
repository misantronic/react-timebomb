{"version":3,"sources":["src/index.tsx","src/utils.ts","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","onChangeFormatGroup","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","menuWidth","showCalendarWeek","selectWeek","onOpen","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","MenuContainer","showMenu","ref","renderValue","Math","max","MENU_WIDTH","MenuTitle","onMonth","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","getFormatType","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps","moment_1","momentImport","moment","formatSplit","test","dates","instance","isValid","toDate","filter","validateFormatGroup","isFinite","int","char","String","strLen","startsWith","ALLOWED_CHARS","setHours","addDays","num","add","Array","val","stringFromCharCode","keyCode","charCode","floor","fromCharCode","includes","formatNumber","number","splitDate","joinDates","parts","strParts","part","HTMLElement","innerText","splittedFormat","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","sel","getSelection","empty","removeAllRanges","selectElement","el","range","document","createRange","selectNodeContents","addRange","getWeekOfYear","isoWeek","startOf","endOf","subtractDays","manipulateDate","subtract","isSame","inp","dateA","isSameOrAfter","context","getAttribute","attr","a","b","getTime","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","DOT","COMMA","button_1","arrow_button_1","Flex","Input","span","ClearButton","SmallButton","Placeholder","Icon","icon","META_KEYS","FORBIDDEN_KEYS","PureComponent","inputs","e","currentTarget","allSelected","formatGroup","onSearchRef","onKeyDown","onKeyUp","onClick","onDblClick","onBlur","formatGroups","reduce","memo","prevChar","substr","focused","querySelector","iconClass","some","forEach","i","focus","find","forceUpdate","ArrowButtonComp","ArrowButton","showPlaceholder","timeOnly","data-role","tabIndex","group","separator","data-react-timebomb-selectable","contentEditable","data-placeholder","data-separator","key","data-group","onDoubleClick","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","preventDefault","HTMLSpanElement","isArrowUp","isNaN","formatType","direction","shiftKey","dateParts","nextValue","valid","dataGroup","groupValue","metaKey","ctrlKey","blur","parentNode","target","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n} from './typings';\nimport { ValueMulti } from './value-multi';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'day',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={Math.max(\n                                        ReactTimebomb.MENU_WIDTH,\n                                        menuWidth || 0\n                                    )}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\nimport { ReactTimebombDate, FormatType } from './typings';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\nconst formatSplit = /[.|:|-|\\\\|_|\\s]/;\n\nexport function dateFormat(\n    date: ReactTimebombDate,\n    format: string\n): string | string[] {\n    if (isArray(date)) {\n        return date.map(date => moment(date).format(format));\n    } else {\n        return moment(date).format(format);\n    }\n}\n\nexport function validateDate(\n    date: string | string[] | undefined,\n    format: string\n): ReactTimebombDate {\n    if (isArray(date)) {\n        const dates = date\n            .map(date => {\n                const instance = moment(date, format, true);\n\n                return instance.isValid() ? instance.toDate() : undefined;\n            })\n            .filter(d => Boolean(d)) as Date[];\n\n        return dates.length === 0 ? undefined : dates;\n    } else {\n        const instance = moment(date, format, true);\n\n        return instance.isValid() ? instance.toDate() : undefined;\n    }\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/d/i.test(format)) {\n        return 'day';\n    }\n\n    if (/M/.test(format)) {\n        return 'month';\n    }\n\n    if (/y/i.test(format)) {\n        return 'year';\n    }\n\n    if (/h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n        const type = getFormatType(format);\n\n        switch (type) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nconst ALLOWED_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n    const char = String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n\n    if (ALLOWED_CHARS.includes(char)) {\n        return char;\n    }\n\n    return '';\n}\n\nexport function formatNumber(number: Number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    return (dateFormat(date, format) as string).split(formatSplit);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplit);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function selectElement(el: HTMLElement | undefined): void {\n    if (el) {\n        const range = document.createRange();\n        const sel = getSelection();\n\n        range.selectNodeContents(el);\n\n        sel.removeAllRanges();\n        sel.addRange(range);\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract',\n    shift = false\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractHours(date, shift ? 10 : 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractMinutes(date, shift ? 10 : 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractSeconds(date, shift ? 10 : 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function dateEqual(\n    dateA?: ReactTimebombDate,\n    dateB?: ReactTimebombDate,\n    considerTime = false\n) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    if (considerTime) {\n        if (isArray(dateA)) {\n            dateA = dateA.map(startOfDay);\n        } else {\n            dateA = startOfDay(dateA);\n        }\n\n        if (isArray(dateB)) {\n            dateB = dateB.map(startOfDay);\n        } else {\n            dateB = startOfDay(dateB);\n        }\n    }\n\n    if (isArray(dateA) && isArray(dateB)) {\n        return dateA.every((date, i) => {\n            const dBi = dateB![i];\n\n            if (date && dBi) {\n                return date.getTime() === dBi.getTime();\n            }\n\n            return false;\n        });\n    } else if (isArray(dateA) && dateB instanceof Date) {\n        return dateA.some(d => d.getTime() === (dateB as Date).getTime());\n    } else if (isArray(dateB) && dateA instanceof Date) {\n        return dateB.some(d => d.getTime() === (dateA as Date).getTime());\n    } else if (!isArray(dateA) && !isArray(dateB)) {\n        return dateA.getTime() === dateB.getTime();\n    }\n\n    return false;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function getWeekdayNames() {\n    return moment.weekdaysShort();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport function isDateFormat(format: string) {\n    return Boolean(/D|M|Y/.test(format));\n}\n\nexport function isTimeFormat(format: string) {\n    return Boolean(/H|h|m|k|a|S|s/.test(format));\n}\n\nexport function sortDates(a: Date, b: Date) {\n    return a.getTime() - b.getTime();\n}\n\nexport function isArray(val: any): val is any[] {\n    return Array.isArray(val);\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    DOT: 190,\n    COMMA: 188\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled,\n    selectElement\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { SmallButton } from './button';\nimport { ArrowButton } from './arrow-button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format, mode } = this.props;\n        const hasFocus = this.inputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.inputs[0];\n\n                    this.inputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const [input] = this.inputs;\n\n                    if (input) {\n                        selectElement(input);\n                    }\n                }\n            }\n        }\n\n        if (open && prevProps.mode !== mode && !this.state.allSelected) {\n            const input = this.inputs.find(el => {\n                const format = getAttribute(el, 'data-group');\n                const type = getFormatType(format);\n\n                return type === mode;\n            });\n\n            selectElement(input);\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n        }\n\n        if (open && prevProps.value && !value) {\n            this.inputs.forEach(input => (input.innerText = ''));\n        }\n\n        if (!open) {\n            this.setState({ allSelected: false });\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const showPlaceholder = placeholder && !open;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp disabled={disabled} open={open} />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={!disabled}\n                                disabled={disabled}\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = e.shiftKey ? 10 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        // TODO: this doesn't work quite how suppossed to\n        // if (this.state.allSelected) {\n        //     const char = stringFromCharCode(e.keyCode);\n        //     this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n        //     this.inputs[0].innerText = char;\n        // }\n\n        // validate group\n        if (!hasSelection && innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!this.inputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}