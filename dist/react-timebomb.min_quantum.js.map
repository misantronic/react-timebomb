{"version":3,"sources":["src/value/value.tsx"],"names":["React","$fsx","r","styled_components_1","button_1","utils_1","exports","Flex","default","div","Container","props","disabled","Input","span","ClearButton","SmallButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","showTime","showDate","createElement","getIcon","className","DefaultClearComponent","tabIndex","onClick","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","ValueComponent","PureComponent","[object Object]","super","this","inputs","isMounted","onFocus","timeout","e","clearTimeout","input","currentTarget","selectElement","setTimeout","state","allSelected","formatGroup","getAttribute","onChangeFormatGroup","onSearchRef","bind","onKeyDown","onKeyUp","onDblClick","onBlur","onChange","onClear","onToggle","formatGroups","format","split","reduce","memo","char","prevChar","length","substr","formatSplitExpr","test","focused","document","querySelector","prevProps","open","value","mode","allowValidation","hasFocus","some","inp","allowTextSelection","parts","splitDate","forEach","i","innerText","focus","find","el","getFormatType","setState","forceUpdate","placeholder","arrowButtonId","iconComponent","ArrowButtonComp","arrowButtonComponent","ArrowButton","ClearComponent","clearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","undefined","data-role","ref","innerRef","renderValue","id","mobile","LabelComponent","labelComponent","contentEditable","Object","assign","map","group","g","separator","hasFormatType","Boolean","data-react-timebomb-selectable","data-placeholder","data-separator","replaceSpaceWithNbsp","key","data-group","onDoubleClick","push","onChangeValueText","timeStep","nextSibling","previousSibling","numericFormat","formatIsActualNumber","sel","getSelection","hasSelection","focusOffset","anchorOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","newDate","manipulateDate","isEnabled","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","firstInput","validatedChar","clearSelection","onSubmit","blur","parentNode","onAllSelect","target","dataGroup","filledValue","fillZero","stopPropagation","Value","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton, SmallButton } from '../components/button';\nimport {\n    ClearComponentProps,\n    IconProps,\n    ReactTimebombValueProps\n} from '../typings';\nimport {\n    clearSelection,\n    fillZero,\n    formatIsActualNumber,\n    formatNumber,\n    formatSplitExpr,\n    getAttribute,\n    getFormatType,\n    isEnabled,\n    joinDates,\n    keys,\n    manipulateDate,\n    replaceSpaceWithNbsp,\n    selectElement,\n    splitDate,\n    stringFromCharCode,\n    validateFormatGroup\n} from '../utils';\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = (props: ClearComponentProps) => (\n    <ClearButton\n        className=\"react-timebomb-clearer\"\n        tabIndex={-1}\n        disabled={props.disabled}\n        onClick={props.onClick}\n    >\n        <ClearButtonX>×</ClearButtonX>\n    </ClearButton>\n);\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nclass ValueComponent extends React.PureComponent<\n    ReactTimebombValueProps,\n    ValueState\n> {\n    private inputs: HTMLSpanElement[] = [];\n    private isMounted = false;\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ReactTimebombValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ReactTimebombValueProps): void {\n        setTimeout(() => {\n            if (!this.isMounted) {\n                return;\n            }\n\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n                        const input = this.inputs[0];\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (input && allowTextSelection) {\n                            input.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            const [input] = this.inputs;\n\n                            if (input) {\n                                selectElement(input);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        this.isMounted = true;\n\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.isMounted = false;\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                ref={this.props.innerRef}\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearComponent\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        />\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const LabelComponent = this.props.labelComponent;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...this.props} />;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n                        const hasFormatType = Boolean(getFormatType(group));\n                        const placeholder = hasFormatType ? group : undefined;\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled || !hasFormatType}\n                                data-placeholder={placeholder}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = sel\n            ? Boolean(sel.focusOffset - sel.anchorOffset)\n            : false;\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC && onToggle) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected && this.isMounted) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.isMounted &&\n                this.props.onToggle &&\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (onToggle) {\n            if (!this.inputs.some(inp => inp === e.target) || !open) {\n                onToggle();\n            }\n        }\n    }\n}\n\nexport const Value = React.forwardRef(\n    (props: ReactTimebombValueProps, ref: React.Ref<HTMLDivElement>) => (\n        <ValueComponent innerRef={ref} {...props} />\n    )\n);\n"]}