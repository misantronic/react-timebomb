{"version":3,"sources":["src/value/value.tsx"],"names":["React","$fsx","r","styled_components_1","button_1","utils_1","exports","Flex","default","div","Container","props","disabled","Input","span","ClearButton","SmallButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","showTime","showDate","createElement","getIcon","className","DefaultClearComponent","tabIndex","onClick","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","ValueComponent","PureComponent","[object Object]","super","this","inputs","mounted","onFocus","timeout","e","clearTimeout","input","currentTarget","selectElement","setTimeout","state","allSelected","formatGroup","getAttribute","onChangeFormatGroup","onSearchRef","bind","onKeyDown","onKeyUp","onDblClick","onBlur","onChange","onPaste","onClear","onToggle","formatGroups","format","split","reduce","memo","char","prevChar","length","substr","formatSplitExpr","test","focused","document","querySelector","firstInput","i","filter","s","Boolean","findIndex","isDayFormat","prevProps","open","value","mode","allowValidation","hasFocus","some","inp","allowTextSelection","parts","splitDate","forEach","innerText","focus","find","el","getFormatType","setState","forceUpdate","placeholder","arrowButtonId","iconComponent","ArrowButtonComp","arrowButtonComponent","ArrowButton","ClearComponent","clearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","undefined","data-role","ref","innerRef","renderValue","id","mobile","LabelComponent","labelComponent","contentEditable","Object","assign","map","group","g","separator","hasFormatType","data-react-timebomb-selectable","data-placeholder","data-separator","replaceSpaceWithNbsp","key","data-group","onDoubleClick","push","onChangeValueText","timeStep","nextSibling","previousSibling","numericFormat","formatIsActualNumber","sel","getSelection","hasSelection","focusOffset","anchorOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","newDate","manipulateDate","isEnabled","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","validatedChar","clearSelection","onSubmit","dataGroup","blur","validateFormatType","parentNode","onAllSelect","target","filledValue","fillZero","text","clipboardData","getData","stopPropagation","Value","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton, SmallButton } from '../components/button';\nimport {\n    ClearComponentProps,\n    IconProps,\n    ReactTimebombValueProps\n} from '../typings';\nimport {\n    clearSelection,\n    fillZero,\n    formatIsActualNumber,\n    formatNumber,\n    formatSplitExpr,\n    getAttribute,\n    getFormatType,\n    isDayFormat,\n    isEnabled,\n    joinDates,\n    keys,\n    manipulateDate,\n    replaceSpaceWithNbsp,\n    selectElement,\n    splitDate,\n    stringFromCharCode,\n    validateFormatGroup,\n    validateFormatType\n} from '../utils';\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n            default:\n                return '';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = (props: ClearComponentProps) => (\n    <ClearButton\n        className=\"react-timebomb-clearer\"\n        tabIndex={-1}\n        disabled={props.disabled}\n        onClick={props.onClick}\n    >\n        <ClearButtonX>×</ClearButtonX>\n    </ClearButton>\n);\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nclass ValueComponent extends React.PureComponent<\n    ReactTimebombValueProps,\n    ValueState\n> {\n    private inputs: HTMLSpanElement[] = [];\n    private mounted = false;\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce((memo, char) => {\n            const prevChar = memo[memo.length - 1];\n\n            if (\n                (prevChar && char === prevChar.substr(0, 1)) ||\n                (formatSplitExpr.test(prevChar) && formatSplitExpr.test(char))\n            ) {\n                memo[memo.length - 1] += char;\n            } else {\n                memo = [...memo, char];\n            }\n\n            return memo;\n        }, [] as string[]);\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get firstInput() {\n        const formatParts = this.props\n            .format!.split(formatSplitExpr)\n            .filter(s => Boolean(s));\n        const i = formatParts.findIndex(isDayFormat);\n\n        return this.inputs[i === -1 ? 0 : i];\n    }\n\n    constructor(props: ReactTimebombValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onPaste = this.onPaste.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ReactTimebombValueProps): void {\n        setTimeout(() => {\n            if (!this.mounted) {\n                return;\n            }\n\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    const { firstInput } = this;\n\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (firstInput && allowTextSelection) {\n                            firstInput.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            if (firstInput) {\n                                selectElement(firstInput);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        this.mounted = true;\n\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                ref={this.props.innerRef}\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearComponent\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        />\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const LabelComponent = this.props.labelComponent;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...this.props} />;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n                        const hasFormatType = Boolean(getFormatType(group));\n                        const placeholder = hasFormatType ? group : undefined;\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled || !hasFormatType}\n                                data-placeholder={placeholder}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                                onPaste={this.onPaste}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = sel\n            ? Boolean(sel.focusOffset - sel.anchorOffset)\n            : false;\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const dataGroup = getAttribute(input, 'data-group');\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC && onToggle) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= dataGroup.length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (\n                (e.keyCode === keys.DOT || e.keyCode === keys.COMMA) &&\n                innerText.length < dataGroup.length\n            ) {\n                const formatType = getFormatType(dataGroup);\n\n                if (!validateFormatType(innerText, formatType)) {\n                    return;\n                }\n            }\n\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected && this.mounted) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.mounted &&\n                this.props.onToggle &&\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onPaste(e: React.ClipboardEvent<HTMLSpanElement>) {\n        e.preventDefault();\n\n        const text = e.clipboardData.getData('text/plain');\n\n        if (text) {\n            this.props.onPaste(text);\n\n            if (e.target instanceof HTMLSpanElement) {\n                e.target.blur();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (onToggle) {\n            if (!this.inputs.some(inp => inp === e.target) || !open) {\n                onToggle();\n            }\n        }\n    }\n}\n\nexport const Value = React.forwardRef(\n    (props: ReactTimebombValueProps, ref: React.Ref<HTMLDivElement>) => (\n        <ValueComponent innerRef={ref} {...props} />\n    )\n);\n"]}