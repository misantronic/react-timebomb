{"version":3,"sources":["src/index.tsx","src/utils.ts","src/value.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","minDate","maxDate","isBefore","Error","this","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onToday","onNextMonth","onPrevMonth","onSelectTime","onClose","showTime","Boolean","test","format","className","classNames","push","join","defaultDateValue","value","date","Date","isAfter","startOfDay","allowValidation","mode","valueText","dateFormat","undefined","prevProps","prevState","setState","valueTextDidUpdate","commit","validDate","validateDate","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","Value","onSubmit","MenuTitle","onMonths","onYear","Menu","type","onFocus","setTimeout","clearSelection","error","onError","onChange","dateEqual","day","setDate","getHours","getMinutes","now","setMonth","getMonth","time","splitted","split","newDate","parseInt","defaultProps","moment_1","momentImport","moment","formatSplit","getFormatType","addDays","num","add","toDate","instance","isValid","validateFormatGroup","isFinite","int","char","String","strLen","length","startsWith","stringFromCharCode","keyCode","charCode","Math","floor","fromCharCode","formatNumber","number","splitDate","joinDates","parts","strParts","map","part","HTMLElement","innerText","filter","val","splittedFormat","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","sel","getSelection","empty","removeAllRanges","getWeekOfYear","isoWeek","startOfWeek","startOf","endOfWeek","endOf","setHours","subtractDays","manipulateDate","subtract","isSame","inp","dateA","diff","dateB","isSameOrAfter","context","getAttribute","attr","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","A","button_1","Flex","Input","span","ArrowButton","Button","ClearButton","Placeholder","Icon","WHITELIST_KEYS","PureComponent","searchInputs","onSearchRef","onKeyDown","onKeyUp","onBlur","onClear","formatGroups","reduce","memo","prevChar","substr","focused","document","querySelector","some","forEach","i","focus","selectText","showPlaceholder","data-role","onClick","renderValue","tabIndex","group","separator","contentEditable","data-placeholder","data-separator","key","data-group","data-react-timebomb-selectable","el","range","createRange","selectNodeContents","addRange","e","currentTarget","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","preventDefault","HTMLSpanElement","isArrowUp","isNaN","formatGroup","formatType","direction","dateParts","nextValue","valid","dataValue","dataGroup","groupValue","includes","metaKey","ctrlKey","blur","forbiddenKeys","setAttribute","target","fillZero","stopPropagation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(/H|h|m|k|a|S|s/.test(props.format!))\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'month',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onToday = this.onToday.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 320;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<Date>\n                value={value}\n                placeholder={placeholder}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            <Value\n                                placeholder={open ? undefined : placeholder}\n                                format={format!}\n                                value={value}\n                                valueText={valueText}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowValidation={allowValidation}\n                                open={open}\n                                onChangeValueText={this.onChangeValueText}\n                                onToggle={onToggle}\n                                onSubmit={this.onValueSubmit}\n                            />\n                            {open ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper menuHeight={menuHeight}>\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onToday={this.onToday}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private onClose() {\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState);\n        }, 0);\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange(date: Date | undefined, commit: boolean): void {\n        const { value, showConfirm, onChange } = this.props;\n\n        if (!showConfirm) {\n            commit = true;\n        }\n\n        if (dateEqual(value, date)) {\n            return;\n        }\n\n        if (commit) {\n            onChange(date);\n        }\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(\n        valueText: string | undefined,\n        commit = false\n    ): void {\n        this.setState({ valueText }, () => {\n            if (commit) {\n                this.emitChange(undefined, true);\n            }\n        });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format!);\n\n        this.setState({ date, valueText });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onToday(): void {\n        const now = startOfDay(new Date());\n\n        this.setState({ date: now });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value), false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\nconst formatSplit = /[.|:|-|\\\\|_|\\s]/;\n\ntype FormatType = 'day' | 'month' | 'year' | 'hour' | 'minute' | 'second';\n\nexport function dateFormat(date: Date, format: string): string {\n    return moment(date).format(format);\n}\n\nexport function validateDate(\n    date: string | undefined,\n    format: string\n): Date | undefined {\n    const instance = moment(date, format, true);\n\n    return instance.isValid() ? instance.toDate() : undefined;\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/d/i.test(format)) {\n        return 'day';\n    }\n\n    if (/M/.test(format)) {\n        return 'month';\n    }\n\n    if (/y/i.test(format)) {\n        return 'year';\n    }\n\n    if (/h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n        const type = getFormatType(format);\n\n        switch (type) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n\n    return String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n}\n\nexport function formatNumber(number: Number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    return dateFormat(date, format).split(formatSplit);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplit);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract'\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, 1);\n            if (direction === 'subtract') return subtractMinutes(date, 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, 1);\n            if (direction === 'subtract') return subtractSeconds(date, 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function dateEqual(dateA?: Date, dateB?: Date) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    return moment(dateA).diff(dateB) === 0;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    A: 65\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled\n} from './utils';\nimport { ReactTimebombProps } from './typings';\nimport { Button } from './button';\n\ninterface ValueProps {\n    open?: boolean;\n    value?: Date;\n    valueText?: string;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    allowValidation?: boolean;\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onSubmit(): void;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n`;\n\nconst Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ClearButton = styled(ArrowButton)`\n    font-size: 18px;\n`;\n\nconst Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nconst Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '📅';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nexport class Value extends React.PureComponent<ValueProps> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (prevProps.value !== value && value) {\n                const parts = splitDate(value, format);\n                const input = this.searchInputs[0];\n\n                this.searchInputs.forEach(\n                    (input, i) => (input.innerText = parts[i])\n                );\n\n                if (input) {\n                    input.focus();\n                }\n            }\n\n            if ((open && !prevProps.open) || value !== prevProps.value) {\n                const input = this.searchInputs[0];\n\n                if (input) {\n                    if (input.innerText === '') {\n                        input.focus();\n                    } else {\n                        this.selectText(input);\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <ArrowButton tabIndex={-1} className=\"react-timebomb-arrow\">\n                        {open ? '▲' : '▼'}\n                    </ArrowButton>\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onFocus}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const nextValue = numericValue + (isArrowUp ? 1 : -1);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, allowValidation } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            this.props.onSubmit();\n\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            this.props.onToggle();\n\n            return;\n        }\n\n        const forbiddenKeys = [\n            keys.SHIFT,\n            keys.ARROW_LEFT,\n            keys.ARROW_RIGHT,\n            keys.ARROW_UP,\n            keys.ARROW_DOWN,\n            keys.TAB\n        ];\n\n        // focus next\n        if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !forbiddenKeys.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', innerText);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                focused &&\n                !focused.getAttribute('data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onChangeValueText(undefined, true);\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n"]}