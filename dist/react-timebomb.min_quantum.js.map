{"version":3,"sources":["src/index.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","DEFAULT_FORMAT","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","showTime","Boolean","format","test","className","classNames","this","push","join","super","value","state","allowValidation","mode","valueText","dateFormat","undefined","date","startOfDay","Date","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onToday","onNextMonth","onPrevMonth","onSelectTime","prevProps","prevState","setState","valueTextDidUpdate","validDate","validateDate","isDisabled","emitError","emitChange","isUndefined","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","minDate","maxDate","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","MenuTitle","onMonths","onYear","Menu","onSubmit","Fragment","onClose","type","onFocus","Value","clearSelection","setTimeout","formattedDate","error","onError","getTime","onChange","day","setDate","getHours","getMinutes","now","setMonth","getMonth","time","splitted","split","newDate","parseInt"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isDisabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst DEFAULT_FORMAT = 'YYYY-MM-DD';\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    opacity: 0;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(\n                props.format && /H|h|m|k|a|S|s/.test(props.format)\n            )\n        };\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        return classNames.join(' ');\n    }\n\n    constructor(props) {\n        super(props);\n\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        this.state = {\n            allowValidation: false,\n            mode: 'month',\n            valueText: value ? dateFormat(value, format) : undefined,\n            date: value || startOfDay(new Date())\n        };\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onToday = this.onToday.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate();\n        }\n    }\n\n    private valueTextDidUpdate(): void {\n        const { valueText, allowValidation } = this.state;\n        const { format = DEFAULT_FORMAT } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const disabled = isDisabled(validDate, this.props);\n\n                if (disabled) {\n                    this.emitError('outOfRange', valueText!);\n                } else {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate)\n                    );\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            value,\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format = DEFAULT_FORMAT\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 300;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n\n        return (\n            <Select<Date> value={value} placeholder={placeholder}>\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => (\n                    <Container ref={onRef as any} className={this.className}>\n                        {open ? (\n                            <MenuContainer\n                                menuWidth={menuWidth}\n                                menuHeight={menuHeight}\n                            >\n                                <MenuWrapper menuHeight={menuHeight}>\n                                    <MenuTitle\n                                        mode={mode}\n                                        date={this.state.date}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onMonths={this.onModeMonths}\n                                        onYear={this.onModeYear}\n                                        onNextMonth={this.onNextMonth}\n                                        onPrevMonth={this.onPrevMonth}\n                                        onToday={this.onToday}\n                                    />\n                                    <Menu\n                                        showTime={showTime}\n                                        showConfirm={showConfirm}\n                                        showCalendarWeek={showCalendarWeek}\n                                        selectWeek={selectWeek}\n                                        date={this.state.date}\n                                        value={value}\n                                        valueText={valueText}\n                                        format={format}\n                                        mode={mode}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onSelectDay={this.onSelectDay}\n                                        onSelectMonth={this.onSelectMonth}\n                                        onSelectYear={this.onSelectYear}\n                                        onSelectTime={this.onSelectTime}\n                                        onToggle={onToggle}\n                                        onSubmit={this.onValueSubmit}\n                                    />\n                                </MenuWrapper>\n                            </MenuContainer>\n                        ) : (\n                            <>\n                                {this.onClose()}\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            </>\n                        )}\n                        <Value\n                            placeholder={open ? undefined : placeholder}\n                            format={format}\n                            value={value}\n                            valueText={valueText}\n                            minDate={minDate}\n                            maxDate={maxDate}\n                            allowValidation={allowValidation}\n                            open={open}\n                            onChangeValueText={this.onChangeValueText}\n                            onToggle={onToggle}\n                            onSubmit={this.onValueSubmit}\n                        />\n                    </Container>\n                )}\n            </Select>\n        );\n    }\n\n    private onClose(): null {\n        clearSelection();\n\n        setTimeout(() => {\n            const { format = DEFAULT_FORMAT } = this.props;\n            const validDate = validateDate(this.state.valueText, format);\n            const isValid = validDate\n                ? !isDisabled(validDate, this.props)\n                : validDate;\n\n            if (!isValid && this.props.value) {\n                const formattedDate = dateFormat(this.props.value, format);\n\n                if (this.state.valueText !== formattedDate) {\n                    this.setState({ valueText: formattedDate });\n                }\n            }\n        }, 0);\n\n        return null;\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.props.onError && this.state.allowValidation) {\n            this.props.onError(error, value);\n        }\n    }\n\n    private emitChange(date?: Date): void {\n        const { value } = this.props;\n\n        if (value && date && value.getTime() === date.getTime()) {\n            return;\n        }\n\n        this.props.onChange(date);\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(valueText: string): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(onToggle: () => void): void {\n        onToggle();\n        clearSelection();\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format = DEFAULT_FORMAT } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format);\n\n        this.setState({ date, valueText }, () => this.emitChange(date));\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onToday(): void {\n        const now = startOfDay(new Date());\n\n        this.setState({ date: now });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format = DEFAULT_FORMAT } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value));\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format);\n\n            this.setState({ valueText }, () => this.emitChange(newDate));\n        }\n    }\n}\n"]}