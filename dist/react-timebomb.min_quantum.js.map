{"version":3,"sources":["src/utils.ts","src/menu/table.tsx","src/menu/day.tsx"],"names":["moment_1","$fsx","r","momentImport","moment","default","dateFormat","date","format","isArray","map","getFormatType","test","exports","formatSplitExpr","validateDate","dates","instance","isValid","toDate","undefined","filter","d","Boolean","length","is24HoursFormat","getMeridiem","matcher","match","formatIsActualNumber","validateFormatGroup","input","formatType","isFinite","int","parseInt","char","String","strLen","startsWith","validateFormatType","stringFromCharCode","parts","strParts","part","HTMLElement","innerText","val","dateA","startOfDay","dBi","dateB","i","getTime","valueA","valueB","every","getMonthNames","monthsShort","minDate","maxDate","value","replaceSpaceWithNbsp","str","replace","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","DOT","COMMA","React","utils_1","styled_components_1","day_1","Table","table","MenuTable","props","showCalendarWeek","selectRange","selectedRange","showConfirm","hoverDate","showTime","onSubmit","hoverDays","setHoverDays","useState","selectedDates","setSelectedDates","current","weekdayNames","useRef","getWeekdayNames","sun","mon","tue","wed","thu","fri","sat","className","c","join","monthMatrix","useMemo","getDate","dateMonth","getMonth","dateYear","getFullYear","weeks","base","startOfMonth","week","startOfWeek","endOfWeek","weekStart","Date","push","addDays","getCacheKey","onSelectDay","onDayMouseEnter","day","days","Array","fill","_","firstDay","onDayMouseLeave","useEffect","onHoverDays","reduce","memo","config","dayWeekOfYear","getWeekOfYear","some","v","firstHover","lastHover","isEnabled","dateEqual","getSelected","createElement","cellSpacing","cellPadding","weekNum","isSameDay","key","WeekNum","onClick","hover","hoverDay","selected","selectedStart","selectedEnd","toISOString","Day","onMouseEnter","onMouseLeave","Flex","div","StyledDay","disabled","enabled","setEnabled","today","setToday","dayMonth","isToday","classes","getClassNames","children"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\nimport { ReactTimebombDate, FormatType } from './typings';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\n\nexport const formatSplitExpr = /[.|:|\\-|\\\\|_|\\/|\\s]/;\n\nexport function dateFormat(date: Date, format: string): string;\nexport function dateFormat(date: Date[], format: string): string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[];\nexport function dateFormat(\n    date: Date | Date[],\n    format: string\n): string | string[] {\n    if (isArray(date)) {\n        return date.map(date => moment(date).format(format));\n    } else {\n        return moment(date).format(format);\n    }\n}\n\nexport function validateDate(\n    date: string | string[] | undefined,\n    format: string\n): ReactTimebombDate {\n    if (isArray(date)) {\n        const dates = date\n            .map(date => {\n                const instance = moment(date, format, true);\n\n                return instance.isValid() ? instance.toDate() : undefined;\n            })\n            .filter(d => Boolean(d)) as Date[];\n\n        return dates.length === 0 ? undefined : dates;\n    } else {\n        const instance = moment(date, format, true);\n\n        return instance.isValid() ? instance.toDate() : undefined;\n    }\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/^D/.test(format)) {\n        return 'day';\n    }\n\n    if (/^M/.test(format)) {\n        return 'month';\n    }\n\n    if (/^Y/.test(format)) {\n        return 'year';\n    }\n\n    if (/^h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/^m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/^s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\nexport function is24HoursFormat(format?: string): boolean {\n    if (!format) {\n        return false;\n    }\n\n    return /H|k/.test(format);\n}\n\nexport function getMeridiem(format?: string) {\n    if (!format) {\n        return undefined;\n    }\n\n    const matcher = format.match(/\\s+([aAp])$/);\n\n    if (matcher) {\n        return matcher[1];\n    }\n\n    return undefined;\n}\n\nexport function formatIsActualNumber(format: string) {\n    // day / year\n    if (/D|Y|H|h|m|s/.test(format)) {\n        return true;\n    }\n\n    // month\n    if (format === 'M' || format === 'MM') {\n        return true;\n    }\n\n    return false;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    const formatType = getFormatType(format);\n\n    return validateFormatType(input, formatType);\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatType(\n    input: string | number,\n    formatType?: FormatType\n) {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n\n        switch (formatType) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nconst ALLOWED_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n    const char = String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n\n    if (ALLOWED_CHARS.includes(char)) {\n        return char;\n    }\n\n    return '';\n}\n\nexport function formatNumber(number: number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function formatNumberRaw(number: number): string {\n    if (number <= 9) {\n        return `0${Number(number) || 0}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    const formattedDate = dateFormat(date, format);\n\n    return formattedDate\n        .split(formatSplitExpr)\n        .filter(group => group && formatSplitExpr.test(group) === false);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplitExpr);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel) {\n        if (sel.empty) {\n            // Chrome\n            sel.empty();\n        } else if (sel.removeAllRanges) {\n            // Firefox\n            sel.removeAllRanges();\n        }\n    }\n}\n\nexport function selectElement(\n    el: HTMLElement | undefined,\n    caret?: number[]\n): void {\n    if (el) {\n        const range = document.createRange();\n        const sel = getSelection();\n\n        if (caret === undefined) {\n            range.selectNodeContents(el);\n        } else {\n            const [start, end] = caret;\n\n            range.setStart(el, start);\n            range.setEnd(el, end);\n        }\n\n        if (sel) {\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract',\n    timeStep?: number\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, 1);\n            if (direction === 'subtract') return subtractHours(date, 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractMinutes(date, timeStep || 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, timeStep || 1);\n            if (direction === 'subtract')\n                return subtractSeconds(date, timeStep || 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isSameDay(dateA: Date, dateB: Date): boolean {\n    return moment(dateA).isSame(dateB, 'day');\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function isBetween(\n    date: Date,\n    cmpDateA?: Date,\n    cmpDateB?: Date,\n    context: momentImport.unitOfTime.StartOf = 'day'\n) {\n    return moment(date).isBetween(cmpDateA, cmpDateB, context, '[]');\n}\n\nexport function dateEqual(\n    dateA?: ReactTimebombDate,\n    dateB?: ReactTimebombDate,\n    considerTime = false\n) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    if (considerTime) {\n        if (isArray(dateA)) {\n            dateA = dateA.map(startOfDay);\n        } else {\n            dateA = startOfDay(dateA);\n        }\n\n        if (isArray(dateB)) {\n            dateB = dateB.map(startOfDay);\n        } else {\n            dateB = startOfDay(dateB);\n        }\n    }\n\n    if (isArray(dateA) && isArray(dateB)) {\n        return dateA.every((date, i) => {\n            const dBi = dateB![i];\n\n            if (date && dBi) {\n                return date.getTime() === dBi.getTime();\n            }\n\n            return false;\n        });\n    } else if (isArray(dateA) && dateB instanceof Date) {\n        return dateA.some(d => d.getTime() === (dateB as Date).getTime());\n    } else if (isArray(dateB) && dateA instanceof Date) {\n        return dateB.some(d => d.getTime() === (dateA as Date).getTime());\n    } else if (!isArray(dateA) && !isArray(dateB)) {\n        return dateA.getTime() === dateB.getTime();\n    }\n\n    return false;\n}\n\nexport function stringEqual(\n    valueA?: string | string[],\n    valueB?: string | string[]\n): boolean {\n    if (valueA === valueB) {\n        return true;\n    }\n\n    if (!valueA || !valueB) {\n        return false;\n    }\n\n    if (isArray(valueA) && isArray(valueB) && valueA.length === valueB.length) {\n        return valueA.every((val, i) => val === valueB[i]);\n    }\n\n    return false;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function getWeekdayNames() {\n    return moment.weekdaysShort();\n}\n\nexport function isEnabled(\n    context: momentImport.unitOfTime.StartOf,\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return isBetween(date, minDate, maxDate, context);\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport function isDateFormat(format: string) {\n    return Boolean(/D|M|Y/.test(format));\n}\n\nexport function isTimeFormat(format: string) {\n    return Boolean(/H|h|m|k|a|S|s/.test(format));\n}\n\nexport function sortDates(a: Date, b: Date) {\n    return a.getTime() - b.getTime();\n}\n\nexport function isArray(val: any): val is any[] {\n    return Array.isArray(val);\n}\n\nexport function fillZero(value: string | number, formatType: FormatType) {\n    value = String(value);\n\n    switch (formatType) {\n        case 'day':\n            if (value === '1' || value === '2' || value === '3') {\n                return `0${value}`;\n            }\n            break;\n        case 'month':\n            if (value === '1') {\n                return `0${value}`;\n            }\n            break;\n    }\n\n    return undefined;\n}\n\nexport function replaceSpaceWithNbsp(str?: string) {\n    if (!str) {\n        return str;\n    }\n\n    return str.replace(/ /g, ' ');\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    DOT: 190,\n    COMMA: 188\n};\n","import * as React from 'react';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombDate\n} from '../typings';\nimport {\n    startOfMonth,\n    startOfWeek,\n    endOfWeek,\n    addDays,\n    getWeekdayNames,\n    getWeekOfYear,\n    isArray,\n    dateEqual,\n    isEnabled,\n    isSameDay\n} from '../utils';\nimport styled from 'styled-components';\nimport { WeekNum, Day } from './day';\n\ninterface MenuTableProps {\n    className?: string;\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    hoverDate?: ReactTimebombState['hoverDate'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    onSelectDay(date: Date): void;\n    onHoverDays?(dates: Date[]): void;\n    onSubmit(): void;\n}\n\nconst Table = styled.table`\n    width: 100%;\n    height: 186px;\n    font-size: inherit;\n    user-select: none;\n    padding: 5px 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        th {\n            padding: 3px 2px;\n            width: 14.285714286%;\n        }\n\n        td {\n            width: 14.285714286%;\n        }\n    }\n`;\n\nfunction getSelected(config: {\n    day: Date;\n    value: ReactTimebombDate;\n    selectRange: ReactTimebombProps['selectRange'];\n    hoverDays: Date[];\n    showTime?: boolean;\n}) {\n    const { day, value, hoverDays, showTime, selectRange } = config;\n\n    if (value) {\n        if (selectRange === 'week') {\n            const dayWeekOfYear = getWeekOfYear(day);\n\n            if (isArray(value)) {\n                return value.some(v => getWeekOfYear(v) === dayWeekOfYear);\n            }\n\n            return getWeekOfYear(value) === dayWeekOfYear;\n        }\n\n        if (selectRange && isArray(value)) {\n            const [minDate, maxDate] = value;\n\n            if (value.length === 1 && hoverDays.length) {\n                const firstHover = hoverDays[0];\n                const lastHover = hoverDays[hoverDays.length - 1];\n\n                return isEnabled('day', day, {\n                    minDate: minDate < firstHover ? minDate : firstHover,\n                    maxDate: minDate > lastHover ? minDate : lastHover\n                });\n            }\n\n            if (value.length === 2) {\n                return isEnabled('day', day, {\n                    minDate,\n                    maxDate\n                });\n            }\n        }\n    }\n\n    return dateEqual(value, day, showTime);\n}\n\nexport function MenuTable(props: MenuTableProps) {\n    const {\n        value,\n        showCalendarWeek,\n        selectRange,\n        selectedRange,\n        showConfirm,\n        hoverDate,\n        showTime,\n        onSubmit\n    } = props;\n    const [hoverDays, setHoverDays] = React.useState<Date[]>(\n        getDefaultHoverDays()\n    );\n    const [selectedDates, setSelectedDates] = React.useState<Date[]>([]);\n    const { current: weekdayNames } = React.useRef(getWeekdayNames());\n    const [sun, mon, tue, wed, thu, fri, sat] = weekdayNames;\n    const className = ['month', props.className]\n        .filter(c => Boolean(c))\n        .join(' ');\n\n    const monthMatrix = React.useMemo(() => {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }, [getCacheKey()]);\n\n    React.useEffect(() => {\n        if (props.onHoverDays) {\n            props.onHoverDays(hoverDays);\n        }\n    }, [hoverDays]);\n\n    React.useEffect(() => {\n        setSelectedDates(\n            monthMatrix.reduce((memo, dates) => {\n                memo.push(\n                    ...dates.filter(day =>\n                        getSelected({\n                            day,\n                            value,\n                            selectRange,\n                            hoverDays,\n                            showTime\n                        })\n                    )\n                );\n\n                return memo;\n            }, [])\n        );\n    }, [monthMatrix, hoverDays]);\n\n    function getDefaultHoverDays() {\n        if (!hoverDate) {\n            return [];\n        }\n\n        if (isArray(value)) {\n            return [value[0], hoverDate];\n        }\n\n        return [];\n    }\n\n    function getCacheKey() {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        return `${dateMonth}-${dateYear}`;\n    }\n\n    function getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[selectedRange] : date)!;\n    }\n\n    function onSelectDay(date: Date): void {\n        props.onSelectDay(date);\n\n        if (!showConfirm && !selectRange) {\n            onSubmit();\n        }\n    }\n\n    function onDayMouseEnter(day: Date) {\n        if (typeof selectRange === 'number') {\n            const days = Array(selectRange)\n                .fill(null)\n                .map((_, i) => addDays(day, i));\n\n            setHoverDays(days);\n        } else if (selectRange === 'week') {\n            const firstDay = startOfWeek(day);\n            const days = Array(7)\n                .fill(null)\n                .map((_, i) => addDays(firstDay, i));\n\n            setHoverDays(days);\n        } else {\n            setHoverDays([day]);\n        }\n    }\n\n    function onDayMouseLeave() {\n        setHoverDays([]);\n    }\n\n    return (\n        <Table className={className} cellSpacing={0} cellPadding={0}>\n            <thead>\n                <tr>\n                    {showCalendarWeek && <th className=\"calendar-week\" />}\n                    <th>{mon}</th>\n                    <th>{tue}</th>\n                    <th>{wed}</th>\n                    <th>{thu}</th>\n                    <th>{fri}</th>\n                    <th>{sat}</th>\n                    <th>{sun}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {monthMatrix.map(dates => {\n                    const weekNum = getWeekOfYear(dates[0]);\n                    const selected = dates.some(day =>\n                        selectedDates.some(d => isSameDay(d, day))\n                    );\n                    const selectedStart = dates.some(day =>\n                        dateEqual(selectedDates[0], day)\n                    );\n                    const selectedEnd = dates.some(day =>\n                        dateEqual(selectedDates[selectedDates.length - 1], day)\n                    );\n\n                    const className = [\n                        'day',\n                        selected && 'selected',\n                        selectedStart && 'selected-start',\n                        selectedEnd && 'selected-end'\n                    ]\n                        .filter(c => c)\n                        .join(' ');\n\n                    return (\n                        <tr key={weekNum} className={className}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    <WeekNum\n                                        day={dates[0]}\n                                        onClick={onSelectDay}\n                                    >\n                                        {weekNum}\n                                    </WeekNum>\n                                </td>\n                            )}\n                            {dates.map(day => {\n                                const hover = hoverDays.some(hoverDay =>\n                                    dateEqual(hoverDay, day)\n                                );\n                                const selected = selectedDates.some(d =>\n                                    isSameDay(d, day)\n                                );\n                                const selectedStart = dateEqual(\n                                    selectedDates[0],\n                                    day\n                                );\n                                const selectedEnd = dateEqual(\n                                    selectedDates[selectedDates.length - 1],\n                                    day\n                                );\n                                const className = [\n                                    'day',\n                                    selected && 'selected',\n                                    selectedStart && 'selected-start',\n                                    selectedEnd && 'selected-end'\n                                ]\n                                    .filter(c => c)\n                                    .join(' ');\n\n                                return (\n                                    <td\n                                        key={day.toISOString()}\n                                        className={className}\n                                    >\n                                        <Day\n                                            day={day}\n                                            hover={hover}\n                                            selected={selected}\n                                            selectedStart={selectedStart}\n                                            selectedEnd={selectedEnd}\n                                            date={props.date}\n                                            minDate={props.minDate}\n                                            maxDate={props.maxDate}\n                                            showTime={props.showTime}\n                                            onSelectDay={onSelectDay}\n                                            onMouseEnter={onDayMouseEnter}\n                                            onMouseLeave={onDayMouseLeave}\n                                        />\n                                    </td>\n                                );\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </Table>\n    );\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombMenuProps } from '../typings';\nimport { isArray, isEnabled, isToday } from '../utils';\n\ninterface DayProps {\n    day: Date;\n    hover: boolean;\n    selected: boolean;\n    selectedStart: boolean;\n    selectedEnd: boolean;\n    date: ReactTimebombMenuProps['date'];\n    minDate: ReactTimebombMenuProps['minDate'];\n    maxDate: ReactTimebombMenuProps['maxDate'];\n    showTime: ReactTimebombMenuProps['showTime'];\n    onSelectDay: ReactTimebombMenuProps['onSelectDay'];\n    onMouseEnter(day: Date): void;\n    onMouseLeave(day: Date): void;\n}\n\ninterface StyledDayProps {\n    selected?: boolean;\n    disabled?: boolean;\n    current: boolean;\n}\n\nconst Flex = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst StyledDay = styled(Flex)`\n    padding: 8px 2px;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${(props: StyledDayProps) => (props.current ? 'inherit' : '#aaa')};\n    background-color: transparent;\n    pointer-events: ${(props: StyledDayProps) =>\n        props.disabled ? 'none' : 'auto'};\n    user-select: none;\n    opacity: ${(props: StyledDayProps) => (props.disabled ? 0.3 : 1)};\n\n    &.today {\n        background-color: rgba(172, 206, 247, 0.4);\n    }\n\n    &.hover {\n        background-color: #eee;\n    }\n\n    &.selected {\n        font-weight: bold;\n        background-color: rgba(221, 221, 221, 0.3);\n    }\n\n    &.selected-start,\n    &.selected-end {\n        background-color: rgba(221, 221, 221, 1);\n    }\n`;\n\nexport function Day(props: DayProps) {\n    const { day, date, hover, minDate, maxDate, showTime } = props;\n    const [enabled, setEnabled] = React.useState(true);\n    const [today, setToday] = React.useState(false);\n    const current = React.useMemo(getCurrent, [date, day, showTime]);\n\n    React.useEffect(() => {\n        setToday(isToday(day));\n    }, [day.getTime()]);\n\n    React.useEffect(() => {\n        setEnabled(\n            isEnabled('day', day, {\n                minDate: props.minDate,\n                maxDate: props.maxDate\n            })\n        );\n    }, [\n        minDate ? minDate.getTime() : minDate,\n        maxDate ? maxDate.getTime() : maxDate\n    ]);\n\n    function getCurrent() {\n        const dayMonth = day.getMonth();\n\n        if (isArray(date)) {\n            return date.some(d => d.getMonth() === dayMonth);\n        }\n\n        if (date) {\n            return dayMonth === date.getMonth();\n        }\n\n        return false;\n    }\n\n    function onSelectDay() {\n        props.onSelectDay(day);\n    }\n\n    function onMouseEnter() {\n        props.onMouseEnter(day);\n    }\n\n    function onMouseLeave() {\n        props.onMouseLeave(day);\n    }\n\n    function getClassNames() {\n        const classes = ['value'];\n\n        if (props.selected) {\n            classes.push('selected');\n        }\n\n        if (props.selectedStart) {\n            classes.push('selected-start');\n        }\n\n        if (props.selectedEnd) {\n            classes.push('selected-end');\n        }\n\n        if (today) {\n            classes.push('today');\n        }\n\n        if (hover) {\n            classes.push('hover');\n        }\n\n        return classes.join(' ');\n    }\n\n    return (\n        <StyledDay\n            className={getClassNames()}\n            current={current}\n            disabled={!enabled}\n            onClick={onSelectDay}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n        >\n            {day.getDate()}\n        </StyledDay>\n    );\n}\n\ninterface WeekNumProps {\n    day: Date;\n    children: React.ReactNode;\n    onClick(day: Date): void;\n}\n\nexport function WeekNum(props: WeekNumProps) {\n    function onClick() {\n        props.onClick(props.day);\n    }\n\n    return <div onClick={onClick}>{props.children}</div>;\n}\n"]}