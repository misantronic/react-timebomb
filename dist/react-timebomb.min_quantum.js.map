{"version":3,"sources":["src/index.tsx","src/utils.ts","src/value.tsx","src/value-multi.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","super","minDate","maxDate","selectRange","showConfirm","isBefore","Error","this","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","format","showTime","isTimeFormat","showDate","isDateFormat","className","classNames","push","error","join","defaultDateValue","value","date","Date","isAfter","startOfDay","allowValidation","mode","valueText","dateFormat","undefined","selectedRange","prevProps","prevState","setState","valueTextDidUpdate","commit","validDate","validateDate","Array","isArray","every","d","isEnabled","emitChange","emitError","isUndefined","placeholder","menuWidth","showCalendarWeek","selectWeek","MENU_HEIGHT","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","showMenu","ref","renderValue","Math","max","MENU_WIDTH","MenuTitle","onMonths","onYear","Menu","onSubmit","type","onFocus","multiValue","ValueMulti","Value","clearSelection","setTimeout","onError","onChange","dateEqual","Boolean","length","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps","moment_1","momentImport","moment","formatSplit","getFormatType","test","setHours","addDays","num","add","toDate","dates","instance","isValid","filter","validateFormatGroup","isFinite","int","char","String","strLen","startsWith","stringFromCharCode","keyCode","charCode","floor","fromCharCode","formatNumber","number","splitDate","joinDates","parts","strParts","part","HTMLElement","innerText","val","splittedFormat","spaceFormat","momentDate","parsingFlags","overflow","parsedDateParts","sel","getSelection","empty","removeAllRanges","getWeekOfYear","isoWeek","startOf","endOf","subtractDays","manipulateDate","subtract","isSame","inp","dateA","isSameOrAfter","context","getAttribute","attr","a","b","getTime","keys","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","TAB","ESC","BACKSPACE","DELETE","SPACE","SHIFT","A","button_1","Flex","Input","span","ArrowButton","Button","ClearButton","Placeholder","Icon","icon","WHITELIST_KEYS","FORBIDDEN_KEYS","PureComponent","searchInputs","onSearchRef","onKeyDown","onKeyUp","onClick","onBlur","formatGroups","reduce","memo","prevChar","substr","focused","document","querySelector","iconClass","currentFormatGroup","some","forEach","i","focus","selectText","showPlaceholder","timeOnly","data-role","tabIndex","group","separator","contentEditable","data-placeholder","data-separator","key","data-group","data-react-timebomb-selectable","el","range","createRange","selectNodeContents","addRange","e","currentTarget","nextSibling","previousSibling","hasSelection","focusOffset","baseOffset","numericValue","preventDefault","HTMLSpanElement","isArrowUp","isNaN","formatGroup","formatType","direction","shiftKey","dateParts","nextValue","valid","dataValue","dataGroup","groupValue","includes","metaKey","ctrlKey","blur","setAttribute","target","fillZero","stopPropagation","MultiIcon","body","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate\n} from './typings';\nimport { ValueMulti } from './value-multi';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n\n        return {\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'month',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = Array.isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format,\n            error\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange\n        } = this.state;\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate;\n\n                    this.onToggle = onToggle;\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={Math.max(\n                                        ReactTimebomb.MENU_WIDTH,\n                                        menuWidth || 0\n                                    )}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonths={this.onModeMonths}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const { minDate, maxDate, format, selectRange } = this.props;\n        const { showDate, showTime, allowValidation } = this.state;\n\n        if (selectRange || Array.isArray(value)) {\n            const multiValue = value\n                ? Array.isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                    open={open}\n                    placeholder={placeholder}\n                    value={multiValue}\n                />\n            );\n        }\n\n        return (\n            <Value\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState);\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange(date: ReactTimebombDate, commit: boolean): void {\n        const { value, showConfirm, onChange } = this.props;\n\n        if (!showConfirm) {\n            commit = true;\n        }\n\n        if (dateEqual(value, date)) {\n            return;\n        }\n\n        if (commit) {\n            if (Array.isArray(date)) {\n                onChange(...date);\n            } else {\n                onChange(date);\n            }\n        }\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (Array.isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : Array.isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    Array.isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = Array.isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = Array.isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (Array.isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = Array.isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","// @ts-ignore\nimport momentDefaultImport from 'moment';\nimport * as momentImport from 'moment';\nimport { ReactTimebombDate } from './typings';\n\nconst moment: typeof momentImport = momentDefaultImport || momentImport;\nconst formatSplit = /[.|:|-|\\\\|_|\\s]/;\n\ntype FormatType = 'day' | 'month' | 'year' | 'hour' | 'minute' | 'second';\n\nexport function dateFormat(\n    date: ReactTimebombDate,\n    format: string\n): string | string[] {\n    if (Array.isArray(date)) {\n        return date.map(date => moment(date).format(format));\n    } else {\n        return moment(date).format(format);\n    }\n}\n\nexport function validateDate(\n    date: string | string[] | undefined,\n    format: string\n): ReactTimebombDate {\n    if (Array.isArray(date)) {\n        const dates = date\n            .map(date => {\n                const instance = moment(date, format, true);\n\n                return instance.isValid() ? instance.toDate() : undefined;\n            })\n            .filter(d => Boolean(d)) as Date[];\n\n        return dates.length === 0 ? undefined : dates;\n    } else {\n        const instance = moment(date, format, true);\n\n        return instance.isValid() ? instance.toDate() : undefined;\n    }\n}\n\nexport function getFormatType(format: string): FormatType | undefined {\n    if (/d/i.test(format)) {\n        return 'day';\n    }\n\n    if (/M/.test(format)) {\n        return 'month';\n    }\n\n    if (/y/i.test(format)) {\n        return 'year';\n    }\n\n    if (/h/i.test(format)) {\n        return 'hour';\n    }\n\n    if (/m/.test(format)) {\n        return 'minute';\n    }\n\n    if (/s/.test(format)) {\n        return 'second';\n    }\n\n    return undefined;\n}\n\n/** @return returns a string with transformed value, true for valid input or false for invalid input */\nexport function validateFormatGroup(\n    input: string | number,\n    format: string\n): boolean | string {\n    if (isFinite(input as any)) {\n        const int = typeof input === 'string' ? parseInt(input, 10) : input;\n        const char = String(input);\n        const strLen = char.length;\n        const type = getFormatType(format);\n\n        switch (type) {\n            case 'day':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 3) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 1 && int <= 31) {\n                    return true;\n                }\n                break;\n            case 'month':\n                if (strLen === 1) {\n                    if (int === 0 || int === 1) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen === 2 && int >= 0 && int <= 12) {\n                    return true;\n                }\n                break;\n            case 'year':\n                if (strLen === 1 && (int === 1 || int === 2)) {\n                    return true;\n                }\n\n                if (\n                    strLen >= 2 &&\n                    (char.startsWith('19') || char.startsWith('20'))\n                ) {\n                    return true;\n                }\n                break;\n            case 'hour':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 2) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 24) {\n                    return true;\n                }\n                break;\n            case 'minute':\n            case 'second':\n                if (strLen === 1) {\n                    if (int >= 0 && int <= 5) {\n                        return true;\n                    } else {\n                        return `0${input}`;\n                    }\n                }\n\n                if (strLen >= 2 && int >= 0 && int <= 59) {\n                    return true;\n                }\n                break;\n        }\n    }\n\n    return false;\n}\n\nexport function stringFromCharCode(keyCode: number): string {\n    const charCode = keyCode - 48 * Math.floor(keyCode / 48);\n\n    return String.fromCharCode(96 <= keyCode ? charCode : keyCode);\n}\n\nexport function formatNumber(number: Number): string {\n    if (number <= 1) {\n        return '01';\n    }\n\n    if (number <= 9) {\n        return `0${number}`;\n    }\n\n    return String(number);\n}\n\nexport function splitDate(date: Date, format: string): string[] {\n    return (dateFormat(date, format) as string).split(formatSplit);\n}\n\nexport function joinDates(\n    parts: (string | HTMLElement)[],\n    format: string\n): string {\n    const strParts = parts\n        .map(part => (part instanceof HTMLElement ? part.innerText : part))\n        .filter(val => val);\n    const splittedFormat = format.split(formatSplit);\n\n    if (strParts.length !== splittedFormat.length) {\n        return '';\n    }\n\n    const date = strParts.join(' ');\n    const spaceFormat = splittedFormat.join(' ');\n    const momentDate = moment(date, spaceFormat);\n    const parsingFlags = momentDate.parsingFlags();\n\n    if (parsingFlags.overflow === 2) {\n        return moment(\n            // @ts-ignore\n            new Date(...parsingFlags.parsedDateParts)\n        ).format(format);\n    }\n\n    return momentDate.format(format);\n}\n\nexport function clearSelection(): void {\n    const sel = getSelection();\n\n    if (sel.empty) {\n        // Chrome\n        sel.empty();\n    } else if (sel.removeAllRanges) {\n        // Firefox\n        sel.removeAllRanges();\n    }\n}\n\nexport function getWeekOfYear(date: Date): number {\n    return moment(date).isoWeek();\n}\n\nexport function startOfWeek(date: Date): Date {\n    return moment(date)\n        .startOf('isoWeek')\n        .toDate();\n}\n\nexport function endOfWeek(date: Date): Date {\n    return moment(date)\n        .endOf('isoWeek')\n        .toDate();\n}\n\nexport function startOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfDay(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(23, 59, 59, 999);\n\n    return newDate;\n}\n\nexport function addDays(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'days')\n        .toDate();\n}\n\nexport function addMonths(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'months')\n        .toDate();\n}\n\nexport function addYears(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'years')\n        .toDate();\n}\n\nexport function addHours(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'hours')\n        .toDate();\n}\n\nexport function addMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'minutes')\n        .toDate();\n}\n\nexport function addSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .add(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractSeconds(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'seconds')\n        .toDate();\n}\n\nexport function subtractMinutes(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'minutes')\n        .toDate();\n}\n\nexport function subtractHours(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'hours')\n        .toDate();\n}\n\nexport function subtractDays(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'days')\n        .toDate();\n}\n\nexport function subtractMonths(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'months')\n        .toDate();\n}\n\nexport function subtractYears(date: Date, num: number): Date {\n    return moment(date)\n        .subtract(num, 'years')\n        .toDate();\n}\n\nexport function manipulateDate(\n    date: Date,\n    formatType: FormatType,\n    direction: 'add' | 'subtract',\n    shift = false\n): Date {\n    switch (formatType) {\n        case 'day':\n            if (direction === 'add') return addDays(date, 1);\n            if (direction === 'subtract') return subtractDays(date, 1);\n            break;\n        case 'month':\n            if (direction === 'add') return addMonths(date, 1);\n            if (direction === 'subtract') return subtractMonths(date, 1);\n            break;\n        case 'year':\n            if (direction === 'add') return addYears(date, 1);\n            if (direction === 'subtract') return subtractYears(date, 1);\n            break;\n        case 'hour':\n            if (direction === 'add') return addHours(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractHours(date, shift ? 10 : 1);\n            break;\n        case 'minute':\n            if (direction === 'add') return addMinutes(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractMinutes(date, shift ? 10 : 1);\n            break;\n        case 'second':\n            if (direction === 'add') return addSeconds(date, shift ? 10 : 1);\n            if (direction === 'subtract')\n                return subtractSeconds(date, shift ? 10 : 1);\n            break;\n    }\n\n    return new Date();\n}\n\nexport function startOfMonth(date: Date): Date {\n    const newDate = new Date(date);\n\n    newDate.setDate(1);\n    newDate.setHours(0, 0, 0, 0);\n\n    return newDate;\n}\n\nexport function endOfMonth(date: Date): Date {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nexport function isUndefined(val): val is undefined {\n    return val === null || val === undefined;\n}\n\nexport function setDate(date: Date, hour: number, min?: number): Date {\n    const newDate = new Date(date);\n\n    newDate.setHours(hour, min);\n\n    return newDate;\n}\n\nexport function isToday(date: Date): boolean {\n    return moment(date).isSame(new Date(), 'day');\n}\n\nexport function isBefore(date: Date, inp: Date) {\n    return moment(date).isBefore(inp, 'day');\n}\n\nexport function isAfter(date: Date, inp: Date) {\n    return moment(date).isAfter(inp, 'day');\n}\n\nexport function dateEqual(\n    dateA?: ReactTimebombDate,\n    dateB?: ReactTimebombDate,\n    considerTime = false\n) {\n    if (!dateA || !dateB) {\n        return false;\n    }\n\n    if (considerTime) {\n        if (Array.isArray(dateA)) {\n            dateA = dateA.map(startOfDay);\n        } else {\n            dateA = startOfDay(dateA);\n        }\n\n        if (Array.isArray(dateB)) {\n            dateB = dateB.map(startOfDay);\n        } else {\n            dateB = startOfDay(dateB);\n        }\n    }\n\n    if (Array.isArray(dateA) && Array.isArray(dateB)) {\n        return dateA.every((date, i) => {\n            const dBi = dateB![i];\n\n            if (date && dBi) {\n                return date.getTime() === dBi.getTime();\n            }\n\n            return false;\n        });\n    } else if (Array.isArray(dateA) && dateB instanceof Date) {\n        return dateA.some(d => d.getTime() === (dateB as Date).getTime());\n    } else if (Array.isArray(dateB) && dateA instanceof Date) {\n        return dateB.some(d => d.getTime() === (dateA as Date).getTime());\n    } else if (!Array.isArray(dateA) && !Array.isArray(dateB)) {\n        return dateA.getTime() === dateB.getTime();\n    }\n\n    return false;\n}\n\nexport function getMonthNames(short?: boolean): string[] {\n    if (short) {\n        return moment.monthsShort();\n    }\n\n    return moment.months();\n}\n\nexport function isEnabled(\n    context: 'year' | 'month' | 'day',\n    date: Date,\n    { minDate, maxDate }: { minDate?: Date; maxDate?: Date }\n): boolean {\n    if (!minDate && !maxDate) {\n        return true;\n    }\n\n    if (minDate && !maxDate) {\n        return moment(date).isSameOrAfter(minDate, context);\n    }\n\n    if (!minDate && maxDate) {\n        return moment(date).isSameOrBefore(maxDate, context);\n    }\n\n    return moment(date).isBetween(minDate, maxDate, context, '[]');\n}\n\nexport function getAttribute(input: Element, attr: string): string {\n    return input.getAttribute(attr)!;\n}\n\nexport function isDateFormat(format: string) {\n    return Boolean(/D|M|Y/.test(format));\n}\n\nexport function isTimeFormat(format: string) {\n    return Boolean(/H|h|m|k|a|S|s/.test(format));\n}\n\nexport function sortDates(a: Date, b: Date) {\n    return a.getTime() - b.getTime();\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    DELETE: 46,\n    SPACE: 32,\n    SHIFT: 16,\n    A: 65\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    keys,\n    formatNumber,\n    splitDate,\n    joinDates,\n    stringFromCharCode,\n    validateFormatGroup,\n    getAttribute,\n    getFormatType,\n    manipulateDate,\n    isEnabled,\n    isTimeFormat,\n    isDateFormat\n} from './utils';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { Button } from './button';\n\nexport interface ValueProps {\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    onToggle(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\ninterface ValueState {\n    currentFormatGroup?: string;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: text;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n`;\n\nexport const ArrowButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport const ClearButton = styled(ArrowButton)`\n    font-size: 18px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst WHITELIST_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nexport class Value extends React.PureComponent<ValueProps, ValueState> {\n    private searchInputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (prevChar && char === prevChar.substr(0, 1)) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    private get iconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = this.props;\n        const { currentFormatGroup } = this.state;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        if (!currentFormatGroup) {\n            return 'calendar';\n        }\n\n        if (isDateFormat(currentFormatGroup)) {\n            return 'calendar';\n        }\n\n        if (isTimeFormat(currentFormatGroup)) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    private get icon() {\n        switch (this.iconClass) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        const { open, value, format } = this.props;\n        const hasFocus = this.searchInputs.some(inp => inp === this.focused);\n\n        if (!hasFocus) {\n            if (open) {\n                if (prevProps.value !== value && value) {\n                    const parts = splitDate(value, format);\n                    const input = this.searchInputs[0];\n\n                    this.searchInputs.forEach(\n                        (input, i) => (input.innerText = parts[i])\n                    );\n\n                    if (input) {\n                        input.focus();\n                    }\n                }\n\n                if (!prevProps.open || value !== prevProps.value) {\n                    const input = this.searchInputs[0];\n\n                    if (input) {\n                        if (input.innerText === '') {\n                            input.focus();\n                        } else {\n                            this.selectText(input);\n                        }\n                    }\n                }\n            }\n        }\n\n        if (!open && value) {\n            const parts = splitDate(value, format);\n\n            this.searchInputs.forEach(\n                (input, i) => (input.innerText = parts[i])\n            );\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { placeholder, value, showDate, showTime, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n        const timeOnly = showTime && !showDate;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    <Icon\n                        icon={this.icon}\n                        className={`react-timebomb-icon ${this.iconClass}`}\n                    />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    {!timeOnly && (\n                        <ArrowButton\n                            tabIndex={-1}\n                            className=\"react-timebomb-arrow\"\n                        >\n                            {open ? '▲' : '▼'}\n                        </ArrowButton>\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, value } = this.props;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        const { formatGroups } = this;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group === '.' || group === ':' || group === ' ') {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n\n                        return (\n                            <Input\n                                contentEditable\n                                data-placeholder={group}\n                                data-separator={separator}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                data-react-timebomb-selectable\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private selectText(el: HTMLElement | undefined) {\n        if (el) {\n            const range = document.createRange();\n            const sel = getSelection();\n\n            range.selectNodeContents(el);\n\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.searchInputs.push(el);\n        } else {\n            this.searchInputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const sel = getSelection();\n        const hasSelection = Boolean(sel.focusOffset - sel.baseOffset);\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    this.selectText(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatGroup = getAttribute(input, 'data-group');\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const nextValue = numericValue + (isArrowUp ? 1 : -1);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                e.shiftKey\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.searchInputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    this.selectText(input);\n                    onChangeValueText(joinDates(this.searchInputs, format));\n                }\n                return;\n        }\n\n        const dataValue = getAttribute(input, 'data-value');\n        const dataGroup = getAttribute(input, 'data-group');\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = dataValue && !hasSelection ? dataValue + char : char;\n\n        if (WHITELIST_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, dataGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (hasSelection) {\n            return;\n        }\n\n        // validate group\n        if (innerText.length >= dataGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            allowValidation,\n            onSubmit,\n            onToggle\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC) {\n            onToggle();\n            return;\n        }\n\n        // focus prev\n        if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                this.selectText(previousSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        // focus next\n        else if (\n            innerText.length >= getAttribute(input, 'data-group').length &&\n            !FORBIDDEN_KEYS.includes(e.keyCode)\n        ) {\n            if (allowValidation || !nextSibling) {\n                this.selectText(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                this.selectText(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.searchInputs, format));\n        }\n\n        input.setAttribute('data-value', input.innerText);\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        this.selectText(e.currentTarget);\n    }\n\n    private onFocus(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const currentFormatGroup = getAttribute(input, 'data-group');\n\n        this.selectText(e.currentTarget);\n\n        this.setState({ currentFormatGroup });\n    }\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const input = e.target as HTMLSpanElement;\n        const value = input.innerText;\n        const dataGroup = getAttribute(input, 'data-group');\n        const formatType = getFormatType(dataGroup);\n\n        const fillZero = () => {\n            const innerText = `0${value}`;\n\n            input.innerText = innerText;\n            input.setAttribute('data-value', innerText);\n        };\n\n        switch (formatType) {\n            case 'day':\n                if (value === '1' || value === '2' || value === '3') {\n                    fillZero();\n                }\n                break;\n            case 'month':\n                if (value === '1') {\n                    fillZero();\n                }\n                break;\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.searchInputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, onToggle } = this.props;\n\n        if (!this.searchInputs.some(inp => inp === e.target) || !open) {\n            onToggle();\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    Container,\n    Flex,\n    Icon,\n    ValueProps,\n    Placeholder,\n    ClearButton,\n    ArrowButton\n} from './value';\nimport { dateFormat, keys } from './utils';\n\ninterface MultiValueProps {\n    value: undefined | Date[];\n    placeholder: ValueProps['placeholder'];\n    open: ValueProps['open'];\n    onToggle(): void;\n    onClear(): void;\n}\n\nconst MultiIcon = styled(Icon)`\n    position: absolute;\n    left: 3px;\n    top: 3px;\n`;\n\nexport class ValueMulti extends React.PureComponent<MultiValueProps> {\n    constructor(props: MultiValueProps) {\n        super(props);\n\n        this.onClear = this.onClear.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n    }\n\n    public componentDidMount() {\n        document.body.addEventListener('keyup', this.onKeyUp);\n    }\n\n    public componentWillUnmount() {\n        document.body.removeEventListener('keyup', this.onKeyUp);\n    }\n\n    public render() {\n        const { placeholder, value, open } = this.props;\n        const showPlaceholder = placeholder && !open;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                onClick={this.props.onToggle}\n            >\n                <Flex>\n                    <Icon className=\"react-timebomb-icon\" icon=\"📅\" />\n                    <MultiIcon className=\"react-timebomb-icon\" icon=\"📅\" />\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearButton\n                            className=\"react-timebomb-clearer\"\n                            tabIndex={-1}\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </ClearButton>\n                    )}\n                    <ArrowButton tabIndex={-1} className=\"react-timebomb-arrow\">\n                        {open ? '▲' : '▼'}\n                    </ArrowButton>\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue() {\n        const { value } = this.props;\n\n        if (!value) {\n            return null;\n        }\n\n        return value.map(d => dateFormat(d, 'DD.MM.YYYY')).join(' – ');\n    }\n\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onKeyUp(e: KeyboardEvent) {\n        const { open, onToggle } = this.props;\n\n        switch (e.keyCode) {\n            case keys.ESC:\n                if (open) {\n                    onToggle();\n                }\n                break;\n        }\n    }\n}\n"]}