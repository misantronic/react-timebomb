{"version":3,"sources":["src/index.tsx","src/menu.tsx","src/menu-title.tsx","src/typings.ts"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","ReactTimebombDate","ReactTimebombArrowButtonProps","value_multi_1","Container","default","div","MenuWrapper","props","menuHeight","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","emitChange","timeout","date","commit","clearTimeout","setTimeout","value","showConfirm","onChange","dateEqual","isArray","setState","allowValidation","Boolean","minDate","maxDate","selectRange","isBefore","Error","state","initialState","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onClose","onClear","onChangeFormatGroup","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","className","classNames","push","error","disabled","join","defaultDateValue","Date","isAfter","mode","valueText","dateFormat","selectedRange","prevProps","prevState","valueTextDidUpdate","validDate","validateDate","every","d","isEnabled","emitError","isUndefined","placeholder","showCalendarWeek","selectWeek","onOpen","menuWidth","Math","max","MENU_WIDTH","MENU_HEIGHT","createElement","Select","open","onToggle","onRef","MenuContainer","showMenu","MobileMenuContainer","mobileWidth","ref","renderValue","MenuTitle","onMonth","onYear","Menu","onSubmit","type","onFocus","arrowButtonComponent","multiValue","ValueMulti","Value","onAllSelect","clearSelection","onError","length","getFormatType","day","valueDate","startOfWeek","endOfWeek","setDate","getHours","getMinutes","dateArr","getSelectedRange","sort","sortDates","currentDate","setMonth","getMonth","time","splitted","split","newDate","map","parseInt","v","defaultProps","button_1","menu_day_1","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","Table","table","PureComponent","yearContainer","monthMatrixCache","Map","scrollToYear","delay","selected","querySelector","scrollIntoView","scrollBy","top","onYearContainer","onDayMouseEnter","onDayMouseLeave","weekdayNames","getWeekdayNames","monthNames","getMonthNames","now","monthMatrix","getDate","dateMonth","dateYear","getFullYear","cacheKey","cached","get","weeks","base","startOfMonth","week","weekStart","addDays","set","fullYears","year","getDateConfig","newYear","setFullYear","enabled","setSeconds","getSeconds","setMinutes","setHours","currentYear","Array","fill","_","i","filter","obj","reverse","minYear","array","renderMenuMonths","renderMenuYear","renderMonth","renderConfirm","fullYear","dateStr","toISOString","Button","key","tabIndex","data-date","onClick","month","str","hoverDay","sun","mon","tue","wed","thu","fri","sat","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","WeekNum","Day","onMouseEnter","onMouseLeave","isValid","e","getAttribute","currentTarget","el","util_1","show","prevDisabled","subtractDays","nextDisabled","lastDate","endOfMonth","arrow_button_1","ArrowButtonProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n} from './typings';\nimport { ValueMulti } from './value-multi';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\n\nexport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    ReactTimebombArrowButtonProps\n};\n\ninterface MenuWrapperProps {\n    menuHeight: number;\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    max-height: ${(props: MenuWrapperProps) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  max-height: 100%;\n                  font-size: 16px;\n\n                  /* TODO: add this to Button-component */\n                  button {\n                      font-size: 16px;\n                      margin-right: 6px;\n                      padding: 6px 12px;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n    public static MENU_HEIGHT = 320;\n\n    private onToggle?: () => void;\n    private MobileMenuContainer?: React.ComponentClass<MenuContainerProps, any>;\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: 'day',\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            selectedRange: 0\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate, selectRange, showConfirm } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            throw new Error('minDate must appear before maxDate');\n        }\n\n        if (selectRange && !showConfirm) {\n            throw new Error(\n                'when using `selectRange` please also set `showConfirm`'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate(false);\n        }\n    }\n\n    private valueTextDidUpdate(commit: boolean): void {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const enabled = isArray(validDate)\n                    ? validDate.every(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate, commit)\n                    );\n                } else {\n                    this.emitError('outOfRange', valueText!);\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined, commit);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuHeight = ReactTimebomb.MENU_HEIGHT;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => {\n                    const showMenu = open && showDate && !disabled;\n\n                    this.onToggle = onToggle;\n\n                    if (mobile) {\n                        if (!this.MobileMenuContainer) {\n                            const mobileWidth = ReactTimebomb.MENU_WIDTH + 40;\n\n                            this.MobileMenuContainer = styled(MenuContainer)`\n                                position: fixed;\n                                left: 50% !important;\n                                top: 50% !important;\n                                max-width: 96%;\n                                width: ${mobileWidth}px !important;\n                                height: ${ReactTimebomb.MENU_HEIGHT}px !important;\n                                margin-left: -${mobileWidth / 2}px;\n                                margin-top: -${ReactTimebomb.MENU_HEIGHT / 2}px;\n\n                                @media (max-width: ${mobileWidth}px) {\n                                    left: 0 !important;\n                                    margin-left: 0;\n                                    max-width: 100% !important;\n                                }\n                            ` as any;\n                        }\n\n                        MenuContainer = this.MobileMenuContainer!;\n                    }\n\n                    return (\n                        <Container ref={onRef} className={this.className}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuWidth={menuWidth}\n                                    menuHeight={menuHeight}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        menuHeight={menuHeight}\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectWeek={selectWeek}\n                                            selectRange={selectRange}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmit={this.onValueSubmit}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        placeholder = open ? undefined : placeholder;\n\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            arrowButtonComponent\n        } = this.props;\n        const { showDate, showTime, allowValidation, mode } = this.state;\n\n        if (selectRange || isArray(value)) {\n            const multiValue = value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined;\n\n            return (\n                <ValueMulti\n                    open={open}\n                    disabled={disabled}\n                    placeholder={placeholder}\n                    value={multiValue}\n                    arrowButtonComponent={arrowButtonComponent}\n                    onClear={this.onClear}\n                    onToggle={this.onToggle!}\n                />\n            );\n        }\n\n        return (\n            <Value\n                mode={mode}\n                disabled={disabled}\n                placeholder={placeholder}\n                format={format!}\n                value={value}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                arrowButtonComponent={arrowButtonComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle!}\n                onSubmit={this.onValueSubmit}\n                onAllSelect={this.onModeDay}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        setTimeout(() => {\n            clearSelection();\n\n            this.setState(this.initialState, () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n            });\n        }, 16);\n    }\n\n    private emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ): void {\n        if (this.state.allowValidation) {\n            this.setState({ allowValidation: false }, () => {\n                if (this.props.onError) {\n                    this.props.onError(error, value);\n                }\n            });\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (date: ReactTimebombDate, commit: boolean) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                const { value, showConfirm, onChange } = this.props;\n\n                if (!showConfirm) {\n                    commit = true;\n                }\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                if (commit) {\n                    if (isArray(date)) {\n                        onChange(...date);\n                    } else {\n                        onChange(date);\n                    }\n                }\n\n                this.setState({ allowValidation: Boolean(date) });\n            }, 0);\n        };\n    })();\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private onClear() {\n        this.setState({ valueText: undefined }, () => {\n            this.emitChange(undefined, true);\n        });\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText });\n    }\n\n    private onChangeFormatGroup(format?: string) {\n        this.setState({ mode: format ? getFormatType(format) : undefined });\n    }\n\n    private onValueSubmit(): void {\n        if (this.onToggle) {\n            this.onToggle();\n        }\n        clearSelection();\n\n        this.valueTextDidUpdate(true);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format, selectWeek, selectRange } = this.props;\n\n        const valueDate =\n            value instanceof Date\n                ? value\n                : isArray(value)\n                ? value[0]\n                : undefined;\n\n        if (selectWeek) {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format!);\n\n            this.setState({ date, valueText });\n        } else {\n            const date = setDate(\n                day,\n                valueDate ? valueDate.getHours() : 0,\n                valueDate ? valueDate.getMinutes() : 0\n            );\n\n            if (selectRange) {\n                const dateArr =\n                    isArray(this.state.valueText) &&\n                    this.state.valueText.length === 1\n                        ? [\n                              validateDate(\n                                  this.state.valueText[0],\n                                  format!\n                              ) as Date,\n                              date\n                          ]\n                        : [date];\n\n                const selectedRange = this.getSelectedRange(dateArr);\n                const valueText = dateFormat(dateArr.sort(sortDates), format!);\n\n                this.setState({ date: dateArr, valueText, selectedRange });\n            } else {\n                const valueText = dateFormat(date, format!);\n\n                this.setState({ date, valueText });\n            }\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onSelectTime(time: string): void {\n        const { format } = this.props;\n        let value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            if (isArray(value)) {\n                value = value.map(v => startOfDay(v));\n            }\n\n            this.emitChange(value, false);\n        } else {\n            const splitted = time.split(':');\n            const newDate = isArray(value)\n                ? value.map(d =>\n                      setDate(\n                          d,\n                          parseInt(splitted[0], 10),\n                          parseInt(splitted[1], 10)\n                      )\n                  )\n                : setDate(\n                      value,\n                      parseInt(splitted[0], 10),\n                      parseInt(splitted[1], 10)\n                  );\n\n            const valueText = dateFormat(newDate, format!);\n\n            this.setState({ valueText }, () => this.emitChange(newDate, false));\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactTimebombState, ReactTimebombProps } from '.';\nimport {\n    isEnabled,\n    validateDate,\n    getMonthNames,\n    getWeekOfYear,\n    startOfWeek,\n    addDays,\n    startOfMonth,\n    endOfWeek,\n    getAttribute,\n    isArray,\n    dateEqual,\n    getWeekdayNames\n} from './utils';\nimport { Button } from './button';\nimport { Day, WeekNum } from './menu-day';\nimport { ReactTimebombDate } from './typings';\n\nexport interface MenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectWeek: ReactTimebombProps['selectWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    onSelectMonth(date: Date): void;\n    onSelectTime(time: string): void;\n    onSubmit(): void;\n}\n\ninterface MenuState {\n    hoverDay?: Date;\n}\n\ninterface TableProps {\n    selectWeek?: boolean;\n    mobile?: boolean;\n}\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 46px;\n        border: none;\n        margin: 0 0 4px;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0 0 10px;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    height: ${(props: TableProps) =>\n        props.mobile ? 'calc(100% - 66px)' : '100%'};\n    font-size: inherit;\n    user-select: none;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        ${(props: TableProps) =>\n            props.selectWeek\n                ? css`\n                      &:hover {\n                          cursor: pointer;\n\n                          td.day {\n                              background-color: #eee;\n                          }\n                      }\n                  `\n                : ''};\n\n        th {\n            padding: 3px 2px;\n            width: 14.285714286%;\n        }\n\n        td {\n            width: 14.285714286%;\n        }\n    }\n`;\n\nexport class Menu extends React.PureComponent<MenuProps, MenuState> {\n    private weekdayNames!: string[];\n    private monthNames!: string[];\n\n    private get now(): Date {\n        return new Date();\n    }\n\n    private getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[this.props.selectedRange] : date)!;\n    }\n\n    private yearContainer: HTMLDivElement | null = null;\n    private monthMatrixCache = new Map<string, (Date[])[]>();\n\n    private get monthMatrix(): (Date[])[] {\n        const date = this.getDate(this.props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        const cacheKey = `${dateMonth}-${dateYear}`;\n        const cached = this.monthMatrixCache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        // generate\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        this.monthMatrixCache.set(cacheKey, weeks);\n\n        return weeks;\n    }\n\n    private get fullYears() {\n        const { value, minDate, maxDate } = this.props;\n        const valueDate = this.getDate(value);\n        const year = this.getDate(this.props.date).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, this.props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = this.now;\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, this.props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onYearContainer = this.onYearContainer.bind(this);\n        this.onDayMouseEnter = this.onDayMouseEnter.bind(this);\n        this.onDayMouseLeave = this.onDayMouseLeave.bind(this);\n\n        this.weekdayNames = getWeekdayNames();\n        this.monthNames = getMonthNames(true);\n    }\n\n    public componentDidUpdate(prevProps: MenuProps) {\n        if (!dateEqual(prevProps.date, this.props.date)) {\n            this.scrollToYear(64);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { mode, mobile, showDate, showConfirm } = this.props;\n\n        if (showDate) {\n            switch (mode) {\n                case 'year':\n                case 'month':\n                    return (\n                        <MonthAndYearContainer mobile={mobile}>\n                            {this.renderMenuMonths()}\n                            {this.renderMenuYear()}\n                        </MonthAndYearContainer>\n                    );\n                case 'day':\n                    return (\n                        <MonthContainer>\n                            {this.renderMonth()}\n                            {showConfirm && this.renderConfirm()}\n                        </MonthContainer>\n                    );\n            }\n        }\n\n        return null;\n    }\n\n    private renderMenuYear(): React.ReactNode {\n        return (\n            <YearContainer ref={this.onYearContainer} className=\"years\">\n                {this.fullYears\n                    .map(({ date, selected }) => {\n                        const fullYear = date.getFullYear();\n                        const dateStr = date.toISOString();\n\n                        return (\n                            <Button\n                                key={dateStr}\n                                tabIndex={-1}\n                                className={selected ? 'selected' : undefined}\n                                selected={selected}\n                                data-date={dateStr}\n                                onClick={this.onSelectYear}\n                            >\n                                {fullYear}\n                            </Button>\n                        );\n                    })\n                    .reverse()}\n            </YearContainer>\n        );\n    }\n\n    private renderMenuMonths(): React.ReactNode {\n        const { value, mobile } = this.props;\n        const valueDate = this.getDate(value);\n        const date = this.getDate(this.props.date);\n        const month = value && valueDate.getMonth();\n        const year = value && valueDate.getFullYear();\n\n        return (\n            <MonthsContainer mobile={mobile} className=\"months\">\n                {this.monthNames.map((str, i) => {\n                    const newDate = new Date(date);\n\n                    newDate.setMonth(i);\n\n                    const enabled = isEnabled('month', newDate, this.props);\n                    const selected =\n                        month === newDate.getMonth() &&\n                        year === newDate.getFullYear();\n\n                    return (\n                        <Button\n                            key={str}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            disabled={!enabled}\n                            data-date={newDate.toISOString()}\n                            onClick={this.onSelectMonth}\n                        >\n                            {str}\n                        </Button>\n                    );\n                })}\n            </MonthsContainer>\n        );\n    }\n\n    private renderMonth(): React.ReactNode {\n        const { showCalendarWeek, selectWeek, mobile } = this.props;\n        const { hoverDay } = this.state;\n        const [sun, mon, tue, wed, thu, fri, sat] = this.weekdayNames;\n\n        return (\n            <Table\n                className=\"month\"\n                selectWeek={selectWeek}\n                mobile={mobile}\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <thead>\n                    <tr>\n                        {showCalendarWeek && <th className=\"calendar-week\" />}\n                        <th>{mon}</th>\n                        <th>{tue}</th>\n                        <th>{wed}</th>\n                        <th>{thu}</th>\n                        <th>{fri}</th>\n                        <th>{sat}</th>\n                        <th>{sun}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.monthMatrix.map(dates => {\n                        const weekNum = getWeekOfYear(dates[0]);\n\n                        return (\n                            <tr key={weekNum}>\n                                {showCalendarWeek && (\n                                    <td className=\"calendar-week\">\n                                        <WeekNum\n                                            day={dates[0]}\n                                            onClick={this.onSelectDay}\n                                        >\n                                            {weekNum}\n                                        </WeekNum>\n                                    </td>\n                                )}\n                                {dates.map(date => (\n                                    <td\n                                        className=\"day\"\n                                        key={date.toISOString()}\n                                    >\n                                        <Day\n                                            day={date}\n                                            hoverDay={hoverDay}\n                                            date={this.props.date}\n                                            value={this.props.value}\n                                            minDate={this.props.minDate}\n                                            maxDate={this.props.maxDate}\n                                            selectWeek={this.props.selectWeek}\n                                            selectRange={this.props.selectRange}\n                                            showTime={this.props.showTime}\n                                            onSelectDay={this.onSelectDay}\n                                            onMouseEnter={this.onDayMouseEnter}\n                                            onMouseLeave={this.onDayMouseLeave}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderConfirm(): React.ReactNode {\n        const { valueText, format } = this.props;\n        const validDate = validateDate(valueText, format);\n        const isValid = validDate\n            ? isArray(validDate)\n                ? validDate.every(v => isEnabled('day', v, this.props))\n                : isEnabled('day', validDate, this.props)\n            : false;\n\n        return (\n            <Confirm>\n                <Button\n                    tabIndex={-1}\n                    disabled={!isValid}\n                    onClick={() => this.props.onSubmit()}\n                >\n                    Ok\n                </Button>\n            </Confirm>\n        );\n    }\n\n    private scrollToYear = (() => {\n        let timeout: NodeJS.Timeout;\n\n        return (delay: number) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(() => {\n                if (this.yearContainer) {\n                    const selected = this.yearContainer.querySelector(\n                        '.selected'\n                    );\n\n                    if (selected) {\n                        selected.scrollIntoView();\n                        this.yearContainer.scrollBy({ top: -10 });\n                    }\n                }\n            }, delay);\n        };\n    })();\n\n    private onSelectDay(date: Date): void {\n        const { onSelectDay, showConfirm, onSubmit } = this.props;\n\n        onSelectDay(date);\n\n        if (!showConfirm) {\n            onSubmit();\n        }\n    }\n\n    private onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectMonth(date), 0);\n    }\n\n    private onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => this.props.onSelectYear(date), 0);\n    }\n\n    private onYearContainer(el: HTMLDivElement | null) {\n        this.yearContainer = el;\n\n        this.scrollToYear(0);\n    }\n\n    private onDayMouseEnter(day: Date) {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: day });\n        }\n    }\n\n    private onDayMouseLeave() {\n        if (this.props.selectRange) {\n            this.setState({ hoverDay: undefined });\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombProps, ReactTimebombState } from './typings';\nimport { Button } from './button';\nimport {\n    subtractDays,\n    startOfMonth,\n    endOfMonth,\n    addDays,\n    getMonthNames\n} from './utils';\nimport { isArray } from 'util';\n\ninterface MenuTitleProps {\n    date: ReactTimebombState['date'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    mode: ReactTimebombState['mode'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    onPrevMonth(): void;\n    onNextMonth(): void;\n    onReset(): void;\n    onMonth(): void;\n    onYear(): void;\n}\n\nconst Container = styled.div`\n    display: ${(props: { show: boolean }) => (props.show ? 'flex' : 'none')};\n    align-items: center;\n    width: 100%;\n    padding: 10px 10px 15px;\n    justify-content: space-between;\n    min-height: 46px;\n    box-sizing: border-box;\n    white-space: nowrap;\n`;\n\nexport class MenuTitle extends React.PureComponent<MenuTitleProps> {\n    private monthNames!: string[];\n\n    private get prevDisabled(): boolean {\n        const { minDate, date } = this.props;\n\n        if (minDate && date) {\n            return subtractDays(startOfMonth(this.date), 1) < minDate;\n        }\n\n        return false;\n    }\n\n    private get nextDisabled(): boolean {\n        const { maxDate, date } = this.props;\n\n        if (maxDate && date) {\n            const lastDate = isArray(date) ? date[date.length - 1] : date;\n\n            return addDays(endOfMonth(lastDate), 1) > maxDate;\n        }\n\n        return false;\n    }\n\n    private get date() {\n        const { date, selectedRange } = this.props;\n\n        return (isArray(date) ? date[selectedRange] : date)!;\n    }\n\n    constructor(props: MenuTitleProps) {\n        super(props);\n\n        this.monthNames = getMonthNames();\n    }\n\n    public render(): React.ReactNode {\n        const {\n            mode,\n            onNextMonth,\n            onPrevMonth,\n            onMonth,\n            onReset,\n            onYear\n        } = this.props;\n        const show = mode === 'day';\n        const date = this.date;\n\n        return (\n            <Container className=\"react-timebomb-menu-title\" show={show}>\n                <div>\n                    <Button\n                        className=\"react-timebomb-button-month\"\n                        tabIndex={-1}\n                        onClick={onMonth}\n                    >\n                        <b>{this.monthNames[date.getMonth()]}</b>\n                    </Button>\n                    <Button\n                        className=\"react-timebomb-button-year\"\n                        tabIndex={-1}\n                        onClick={onYear}\n                    >\n                        {date.getFullYear()}\n                    </Button>\n                </div>\n                <div>\n                    <Button\n                        className=\"react-timebomb-button-month-prev\"\n                        tabIndex={-1}\n                        disabled={this.prevDisabled}\n                        onClick={onPrevMonth}\n                    >\n                        ◀\n                    </Button>\n                    <Button\n                        className=\"react-timebomb-button-month-reset\"\n                        tabIndex={-1}\n                        onClick={onReset}\n                    >\n                        ○\n                    </Button>\n                    <Button\n                        className=\"react-timebomb-button-month-next\"\n                        tabIndex={-1}\n                        disabled={this.nextDisabled}\n                        onClick={onNextMonth}\n                    >\n                        ▶\n                    </Button>\n                </div>\n            </Container>\n        );\n    }\n}\n","import { ArrowButtonProps } from './arrow-button';\n\nexport type ReactTimebombDate = Date | undefined | Date[];\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectWeek?: boolean;\n    selectRange?: boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: boolean;\n    mobile?: boolean;\n    arrowButtonComponent?: React.ComponentType<ArrowButtonProps>;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode?: FormatType;\n    showDate?: boolean;\n    showTime?: boolean;\n    selectedRange: number;\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\nexport type FormatType =\n    | 'day'\n    | 'month'\n    | 'year'\n    | 'hour'\n    | 'minute'\n    | 'second';\n\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n"]}