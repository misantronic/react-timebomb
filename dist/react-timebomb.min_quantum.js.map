{"version":3,"sources":["src/index.tsx","src/menu/table.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","value_multi_1","__export","Container","default","div","MenuWrapper","props","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","valueRef","createRef","emitChange","timeout","date","clearTimeout","setTimeout","__awaiter","value","onChange","dateEqual","isArray","setStateAsync","allowValidation","Boolean","preventClose","minDate","maxDate","isBefore","console","error","state","initialState","onChangeValueText","bind","emitChangeAndClose","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onChangeMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onHoverDays","onMultiValueSelect","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","hoverDate","menuHeight","selectedRange","prevProps","prevState","selectRange","showConfirm","setState","stringEqual","result","validateValueText","emitError","rangeIsComplete","length","Promise","resolve","validDate","validateDate","some","d","isEnabled","isUndefined","placeholder","showCalendarWeek","timeStep","confirmComponent","onOpen","menuWidth","Math","max","MENU_WIDTH","menuLeft","current","getBoundingClientRect","left","width","createElement","Select","open","onToggle","onRef","showMenu","onClick","onCloseMenu","onOpenMenu","getMobileMenuContainer","ref","renderValue","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","clearComponent","labelComponent","isMulti","ValueComponent","ValueMulti","Value","componentValue","sort","a","b","getTime","onAllSelect","onValueSelect","clearSelection","onError","newDate","date0","date1","index","Object","assign","valueText0","day","valueDate","startOfWeek","endOfWeek","addDays","setDate","getHours","getMinutes","dateArr","getSelectedRange","sortDates","currentDate","setMonth","getMonth","time","commit","map","e","target","HTMLDivElement","classList","contains","defaultProps","exports","day_1","Table","table","MenuTable","hoverDays","setHoverDays","useState","selectedDates","setSelectedDates","weekdayNames","useRef","getWeekdayNames","sun","mon","tue","wed","thu","fri","sat","filter","c","monthMatrix","useMemo","getDate","dateMonth","dateYear","getFullYear","weeks","base","startOfMonth","week","weekStart","getCacheKey","onDayMouseEnter","days","Array","fill","_","i","firstDay","onDayMouseLeave","useEffect","reduce","memo","dates","config","dayWeekOfYear","getWeekOfYear","v","firstHover","lastHover","getSelected","cellSpacing","cellPadding","weekNum","isSameDay","key","WeekNum","hover","hoverDay","selected","selectedStart","selectedEnd","toISOString","Day","onMouseEnter","onMouseLeave"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType,\n    addDays,\n    stringEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport * from './typings';\n\ninterface MenuWrapperProps {\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n\n    private onToggle?: () => void;\n    private onCloseMenu?: () => void;\n    private onOpenMenu?: () => void;\n    private MobileMenuContainer?: React.ComponentType<MenuContainerProps>;\n    private valueRef = React.createRef<HTMLDivElement>();\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentType<MenuContainerProps>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            hoverDate: undefined,\n            menuHeight: undefined,\n            selectedRange: 0,\n            preventClose: false\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            console.error(\n                '[react-timebomb]: minDate must appear before maxDate'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.emitChangeAndClose = this.emitChangeAndClose.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onHoverDays = this.onHoverDays.bind(this);\n        this.onMultiValueSelect = this.onMultiValueSelect.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public async componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ) {\n        const { valueText, showDate, showTime, preventClose } = this.state;\n        const { value, format, selectRange, showConfirm } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (!stringEqual(prevState.valueText, valueText)) {\n            const result = await this.validateValueText();\n\n            if (result.error) {\n                this.emitError(result.error, result.valueText);\n            }\n\n            if (result.date) {\n                const rangeIsComplete =\n                    selectRange &&\n                    isArray(result.date) &&\n                    result.date.length === 2;\n\n                if (\n                    (!showConfirm && !selectRange && showDate) ||\n                    rangeIsComplete\n                ) {\n                    if (prevState.mode === 'day' && !preventClose) {\n                        this.emitChangeAndClose(result.date);\n                    } else {\n                        this.emitChange(result.date);\n                    }\n                }\n\n                if (!showDate && showTime) {\n                    this.emitChange(result.date);\n                }\n            }\n        }\n    }\n\n    private setStateAsync<K extends keyof ReactTimebombState>(\n        state:\n            | ((\n                  prevState: Readonly<ReactTimebombState>,\n                  props: Readonly<ReactTimebombProps>\n              ) => Pick<ReactTimebombState, K> | ReactTimebombState | null)\n            | (Pick<ReactTimebombState, K> | ReactTimebombState | null)\n    ) {\n        return new Promise(resolve => {\n            this.setState(state, resolve);\n        });\n    }\n\n    private validateValueText(): Promise<{\n        date?: ReactTimebombDate;\n        error?: ReactTimebombError;\n        valueText?: string | string[];\n    }> {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        return new Promise(async resolve => {\n            if (validDate) {\n                await this.setStateAsync({ allowValidation: true });\n\n                const enabled = isArray(validDate)\n                    ? validDate.some(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    await this.setStateAsync({ date: validDate });\n\n                    resolve({ date: validDate });\n                } else {\n                    resolve({ error: 'outOfRange', valueText });\n                }\n            } else if (valueText) {\n                resolve({ error: 'invalidDate', valueText });\n            } else if (!isUndefined(valueText) && allowValidation) {\n                resolve({ date: undefined });\n            }\n        });\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            confirmComponent,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate,\n            hoverDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuLeft =\n            isArray(value) &&\n            value.length === 1 &&\n            this.valueRef.current &&\n            selectRange === true\n                ? this.valueRef.current.getBoundingClientRect().left +\n                  this.valueRef.current.getBoundingClientRect().width -\n                  menuWidth\n                : undefined;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({\n                    placeholder,\n                    open,\n                    onToggle,\n                    onClose,\n                    onOpen,\n                    onRef,\n                    MenuContainer\n                }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n                    const className = [this.className];\n                    const onClick = mobile\n                        ? this.onMobileMenuContainerClick\n                        : undefined;\n\n                    if (showMenu) {\n                        className.push('open');\n                    }\n\n                    this.onToggle = onToggle;\n                    this.onCloseMenu = onClose;\n                    this.onOpenMenu = onOpen;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={className.join(' ')}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuLeft={menuLeft}\n                                    menuWidth={menuWidth}\n                                    menuHeight={this.state.menuHeight}\n                                    onClick={onClick}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            hoverDate={hoverDate}\n                                            confirmComponent={confirmComponent}\n                                            onHoverDays={this.onHoverDays}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.emitChangeAndClose}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId,\n            clearComponent,\n            labelComponent\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            allowValidation,\n            mode,\n            hoverDate\n        } = this.state;\n        const isMulti = selectRange || isArray(value);\n        const ValueComponent = isMulti ? ValueMulti : Value;\n\n        let componentValue = isMulti\n            ? value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined\n            : value;\n\n        if (\n            isArray(componentValue) &&\n            componentValue.length === 1 &&\n            hoverDate\n        ) {\n            componentValue = [...componentValue, hoverDate].sort(\n                (a, b) => a.getTime() - b.getTime()\n            );\n        }\n\n        placeholder = open && !isMulti ? undefined : placeholder;\n\n        return (\n            <ValueComponent\n                ref={this.valueRef}\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                selectRange={selectRange}\n                value={componentValue as any}\n                hoverDate={hoverDate}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                clearComponent={clearComponent}\n                labelComponent={labelComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle}\n                onSubmit={this.emitChangeAndClose}\n                onAllSelect={this.onModeDay}\n                onValueSelect={this.onMultiValueSelect}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        // get rid of this timeout\n        // fixme\n        setTimeout(async () => {\n            clearSelection();\n\n            await this.setStateAsync(this.initialState);\n\n            if (this.props.onClose) {\n                this.props.onClose();\n            }\n        }, 16);\n    }\n\n    private async emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ) {\n        if (this.state.allowValidation) {\n            await this.setStateAsync({ allowValidation: false });\n\n            if (this.props.onError) {\n                this.props.onError(error, value);\n            }\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(async () => {\n                const { value, onChange } = this.props;\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                const changeDate = isArray(date) ? date : [date];\n\n                onChange(...changeDate);\n\n                await this.setStateAsync({\n                    allowValidation: Boolean(date),\n                    preventClose: false\n                });\n            }, 0);\n        };\n    })();\n\n    private async emitChangeAndClose(newDate?: ReactTimebombDate) {\n        if (this.onCloseMenu) {\n            this.onCloseMenu();\n        }\n        clearSelection();\n\n        const { date } = newDate\n            ? { date: newDate }\n            : await this.validateValueText();\n\n        if (date) {\n            this.emitChange(date);\n        }\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private async onClear() {\n        await this.setStateAsync({ valueText: undefined });\n\n        this.emitChange(undefined);\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText, preventClose: true });\n    }\n\n    private async onChangeFormatGroup(format?: string) {\n        await this.setStateAsync({\n            menuHeight: 'auto',\n            mode: format ? getFormatType(format) : undefined\n        });\n    }\n\n    private onHoverDays([date0, date1]: (Date | undefined)[]) {\n        const hoverDate = date1 || date0;\n\n        if (\n            isArray(this.state.valueText) &&\n            isArray(this.state.date) &&\n            this.state.valueText.length === 1 &&\n            this.state.date.length === 1 &&\n            hoverDate\n        ) {\n            this.setState({ hoverDate });\n        }\n    }\n\n    private async onMultiValueSelect(date: Date, index: number) {\n        if (index === 0) {\n            await this.setStateAsync({ ...this.initialState, hoverDate: date });\n        }\n\n        if (\n            index === 1 &&\n            isArray(this.state.valueText) &&\n            isArray(this.state.date)\n        ) {\n            const [valueText0] = this.state.valueText;\n            const [date0] = this.state.date;\n\n            await this.setStateAsync({\n                ...this.initialState,\n                valueText: [valueText0],\n                date: [date0],\n                hoverDate: date\n            });\n        }\n\n        // since closing of the menu is delayed (16ms), we need to deplay the opening as well\n        // fixme\n        setTimeout(async () => {\n            if (this.onOpenMenu) {\n                this.onOpenMenu();\n            }\n\n            await this.setStateAsync({ hoverDate: date });\n        }, 32);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, selectRange } = this.props;\n        const format = this.props.format!;\n\n        const valueDate = (() => {\n            if (value instanceof Date) {\n                return value;\n            }\n\n            if (isArray(value)) {\n                return value[0];\n            }\n\n            return day;\n        })();\n\n        if (selectRange === 'week') {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (typeof selectRange === 'number') {\n            const date = [day, addDays(day, selectRange - 1)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (selectRange === true) {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(this.state.valueText[0], format) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format);\n\n            this.setState({\n                date: dateArr,\n                valueText,\n                selectedRange,\n                hoverDate: undefined\n            });\n        } else {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private async onSelectTime(time: Date, mode: FormatType, commit = false) {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        await this.setStateAsync({ mode, valueText });\n\n        if (commit) {\n            this.emitChange(newDate);\n        }\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombDate\n} from '../typings';\nimport {\n    startOfMonth,\n    startOfWeek,\n    endOfWeek,\n    addDays,\n    getWeekdayNames,\n    getWeekOfYear,\n    isArray,\n    dateEqual,\n    isEnabled,\n    isSameDay\n} from '../utils';\nimport styled from 'styled-components';\nimport { WeekNum, Day } from './day';\n\ninterface MenuTableProps {\n    className?: string;\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    hoverDate?: ReactTimebombState['hoverDate'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    onSelectDay(date: Date): void;\n    onHoverDays?(dates: Date[]): void;\n    onSubmit(): void;\n}\n\nconst Table = styled.table`\n    width: 100%;\n    height: 186px;\n    table-layout: fixed;\n    font-size: inherit;\n    user-select: none;\n    padding: 5px 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        th {\n            padding: 3px 2px;\n            width: 14.285714286%;\n        }\n\n        td {\n            width: 14.285714286%;\n        }\n    }\n`;\n\nfunction getSelected(config: {\n    day: Date;\n    value: ReactTimebombDate;\n    selectRange: ReactTimebombProps['selectRange'];\n    hoverDays: Date[];\n    showTime?: boolean;\n}) {\n    const { day, value, hoverDays, showTime, selectRange } = config;\n\n    if (value) {\n        if (selectRange === 'week') {\n            const dayWeekOfYear = getWeekOfYear(day);\n\n            if (isArray(value)) {\n                return value.some(v => getWeekOfYear(v) === dayWeekOfYear);\n            }\n\n            return getWeekOfYear(value) === dayWeekOfYear;\n        }\n\n        if (selectRange && isArray(value)) {\n            const [minDate, maxDate] = value;\n\n            if (value.length === 1 && hoverDays.length) {\n                const firstHover = hoverDays[0];\n                const lastHover = hoverDays[hoverDays.length - 1];\n\n                return isEnabled('day', day, {\n                    minDate: minDate < firstHover ? minDate : firstHover,\n                    maxDate: minDate > lastHover ? minDate : lastHover\n                });\n            }\n\n            if (value.length === 2) {\n                return isEnabled('day', day, {\n                    minDate,\n                    maxDate\n                });\n            }\n        }\n    }\n\n    return dateEqual(value, day, showTime);\n}\n\nexport function MenuTable(props: MenuTableProps) {\n    const {\n        value,\n        showCalendarWeek,\n        selectRange,\n        selectedRange,\n        showConfirm,\n        hoverDate,\n        showTime,\n        onSubmit\n    } = props;\n    const [hoverDays, setHoverDays] = React.useState<Date[]>(\n        getDefaultHoverDays()\n    );\n    const [selectedDates, setSelectedDates] = React.useState<Date[]>([]);\n    const { current: weekdayNames } = React.useRef(getWeekdayNames());\n    const [sun, mon, tue, wed, thu, fri, sat] = weekdayNames;\n    const className = ['month', props.className]\n        .filter(c => Boolean(c))\n        .join(' ');\n\n    const monthMatrix = React.useMemo(() => {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }, [getCacheKey()]);\n\n    React.useEffect(() => {\n        if (props.onHoverDays) {\n            props.onHoverDays(hoverDays);\n        }\n    }, [hoverDays]);\n\n    React.useEffect(() => {\n        setSelectedDates(\n            monthMatrix.reduce((memo, dates) => {\n                memo.push(\n                    ...dates.filter(day =>\n                        getSelected({\n                            day,\n                            value,\n                            selectRange,\n                            hoverDays,\n                            showTime\n                        })\n                    )\n                );\n\n                return memo;\n            }, [])\n        );\n    }, [monthMatrix, hoverDays, value]);\n\n    function getDefaultHoverDays() {\n        if (!hoverDate) {\n            return [];\n        }\n\n        if (isArray(value)) {\n            return [value[0], hoverDate];\n        }\n\n        return [];\n    }\n\n    function getCacheKey() {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        return `${dateMonth}-${dateYear}`;\n    }\n\n    function getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[selectedRange] : date)!;\n    }\n\n    function onSelectDay(date: Date): void {\n        props.onSelectDay(date);\n\n        if (!showConfirm && !selectRange) {\n            onSubmit();\n        }\n    }\n\n    function onDayMouseEnter(day: Date) {\n        if (typeof selectRange === 'number') {\n            const days = Array(selectRange)\n                .fill(null)\n                .map((_, i) => addDays(day, i));\n\n            setHoverDays(days);\n        } else if (selectRange === 'week') {\n            const firstDay = startOfWeek(day);\n            const days = Array(7)\n                .fill(null)\n                .map((_, i) => addDays(firstDay, i));\n\n            setHoverDays(days);\n        } else {\n            setHoverDays([day]);\n        }\n    }\n\n    function onDayMouseLeave() {\n        setHoverDays([]);\n    }\n\n    return (\n        <Table className={className} cellSpacing={0} cellPadding={0}>\n            <thead>\n                <tr>\n                    {showCalendarWeek && <th className=\"calendar-week\" />}\n                    <th>{mon}</th>\n                    <th>{tue}</th>\n                    <th>{wed}</th>\n                    <th>{thu}</th>\n                    <th>{fri}</th>\n                    <th>{sat}</th>\n                    <th>{sun}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {monthMatrix.map(dates => {\n                    const weekNum = getWeekOfYear(dates[0]);\n                    const selected = dates.some(day =>\n                        selectedDates.some(d => isSameDay(d, day))\n                    );\n                    const selectedStart = dates.some(day =>\n                        dateEqual(selectedDates[0], day)\n                    );\n                    const selectedEnd = dates.some(day =>\n                        dateEqual(selectedDates[selectedDates.length - 1], day)\n                    );\n\n                    const className = [\n                        'day',\n                        selected && 'selected',\n                        selectedStart && 'selected-start',\n                        selectedEnd && 'selected-end'\n                    ]\n                        .filter(c => c)\n                        .join(' ');\n\n                    return (\n                        <tr key={weekNum} className={className}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    <WeekNum\n                                        day={dates[0]}\n                                        onClick={onSelectDay}\n                                    >\n                                        {weekNum}\n                                    </WeekNum>\n                                </td>\n                            )}\n                            {dates.map(day => {\n                                const hover = hoverDays.some(hoverDay =>\n                                    dateEqual(hoverDay, day)\n                                );\n                                const selected = selectedDates.some(d =>\n                                    isSameDay(d, day)\n                                );\n                                const selectedStart = dateEqual(\n                                    selectedDates[0],\n                                    day\n                                );\n                                const selectedEnd = dateEqual(\n                                    selectedDates[selectedDates.length - 1],\n                                    day\n                                );\n                                const className = [\n                                    'day',\n                                    selected && 'selected',\n                                    selectedStart && 'selected-start',\n                                    selectedEnd && 'selected-end'\n                                ]\n                                    .filter(c => c)\n                                    .join(' ');\n\n                                return (\n                                    <td\n                                        key={day.toISOString()}\n                                        className={className}\n                                    >\n                                        <Day\n                                            day={day}\n                                            hover={hover}\n                                            selected={selected}\n                                            selectedStart={selectedStart}\n                                            selectedEnd={selectedEnd}\n                                            date={props.date}\n                                            minDate={props.minDate}\n                                            maxDate={props.maxDate}\n                                            showTime={props.showTime}\n                                            onSelectDay={onSelectDay}\n                                            onMouseEnter={onDayMouseEnter}\n                                            onMouseLeave={onDayMouseLeave}\n                                        />\n                                    </td>\n                                );\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </Table>\n    );\n}\n"]}