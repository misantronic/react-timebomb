{"version":3,"sources":["src/value/value.tsx"],"names":["React","$fsx","r","styled_components_1","button_1","utils_1","exports","Flex","default","div","Container","props","disabled","Input","span","ClearButton","SmallButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","showTime","showDate","createElement","getIcon","className","DefaultClearComponent","tabIndex","onClick","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","ValueComponent","PureComponent","[object Object]","super","this","inputs","mounted","onFocus","timeout","e","clearTimeout","input","currentTarget","selectElement","setTimeout","state","allSelected","formatGroup","getAttribute","onChangeFormatGroup","onSearchRef","bind","onKeyDown","onKeyUp","onDblClick","onBlur","onChange","onPaste","onClear","onToggle","formatGroups","format","split","reduce","memo","char","prevChar","length","substr","formatSplitExpr","test","focused","document","querySelector","prevProps","open","value","mode","allowValidation","hasFocus","some","inp","allowTextSelection","parts","splitDate","forEach","i","innerText","focus","find","el","getFormatType","setState","forceUpdate","placeholder","arrowButtonId","iconComponent","ArrowButtonComp","arrowButtonComponent","ArrowButton","ClearComponent","clearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","undefined","data-role","ref","innerRef","renderValue","id","mobile","LabelComponent","labelComponent","contentEditable","Object","assign","map","group","g","separator","hasFormatType","Boolean","data-react-timebomb-selectable","data-placeholder","data-separator","replaceSpaceWithNbsp","key","data-group","onDoubleClick","push","onChangeValueText","timeStep","nextSibling","previousSibling","numericFormat","formatIsActualNumber","sel","getSelection","hasSelection","focusOffset","anchorOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","newDate","manipulateDate","isEnabled","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","firstInput","validatedChar","clearSelection","onSubmit","dataGroup","blur","validateFormatType","parentNode","onAllSelect","target","filledValue","fillZero","text","clipboardData","getData","stopPropagation","Value","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8vCAAA,MAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBACAE,EAAAH,EAAAC,EAAA,GAMAG,EAAAJ,EAAAC,EAAA,GA4BaI,EAAAC,KAAOJ,EAAAK,QAAOC;;;;;;EAQdH,EAAAI,UAAYP,EAAAK,QAAOF,EAAAC;;;;;cAKlBI,GACNA,EAAMC,SAAW,cAAgB;;;;EAMzC,MAAMC,EAAQV,EAAAK,QAAOM;;;cAGPH,GAAwBA,EAAMC,SAAW,cAAgB;sBACjDD,GACdA,EAAMC,SAAW,OAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BrBN,EAAAS,YAAcZ,EAAAK,QAAOJ,EAAAY;;EAIlC,MAAMC,EAAed,EAAAK,QAAOM;;;;EAMfR,EAAAY,YAAcf,EAAAK,QAAOM;;;EAKrBR,EAAAa,KAAOhB,EAAAK,QAAOM;;;;;oBAKPH,GAA6BA,EAAMS;;EAIvD,MAAMC,EAAcV,IAChB,SAASW,IACL,MAAMC,SAAEA,EAAAC,SAAUA,GAAab,EAE/B,OAAKa,GAAYD,EACN,OAGJ,WAYX,OACIvB,EAAAyB,cAACnB,EAAAa,KAAI,CACDC,KAXR,WACI,OAAQE,KACJ,IAAK,WACD,MAAO,KACX,IAAK,OACD,MAAO,KAMLI,GACNC,iCAAkCL,SAKjChB,EAAAsB,sBAAwBjB,GACjCX,EAAAyB,cAACnB,EAAAS,YAAW,CACRY,UAAU,yBACVE,UAAW,EACXjB,SAAUD,EAAMC,SAChBkB,QAASnB,EAAMmB,SAEf9B,EAAAyB,cAACR,EAAY,KAAA,MAIrB,MAAMc,EAAY,CAAC1B,EAAA2B,KAAKC,UAAW5B,EAAA2B,KAAKE,OAAQ7B,EAAA2B,KAAKG,KAE/CC,EAAiB,CACnB/B,EAAA2B,KAAKK,MACLhC,EAAA2B,KAAKM,WACLjC,EAAA2B,KAAKO,YACLlC,EAAA2B,KAAKQ,SACLnC,EAAA2B,KAAKS,WACLpC,EAAA2B,KAAKG,KAGT,MAAMO,UAAuB1C,EAAM2C,cAgC/BC,YAAYjC,GACRkC,MAAMlC,GA7BFmC,KAAAC,OAA4B,GAC5BD,KAAAE,SAAU,EAkfVF,KAAAG,QAAU,MACd,IAAIC,EAAU,EAEd,OAAOC,IACHC,aAAaF,GAEb,MAAMG,EAAQF,EAAEG,cAEhBjD,EAAAkD,cAAcF,GAEdH,EAAUM,WAAW,KACjB,IAAKV,KAAKW,MAAMC,aAAeZ,KAAKE,QAAS,CACzC,MAAMW,EAActD,EAAAuD,aAAaP,EAAO,cAExCP,KAAKnC,MAAMkD,oBAAoBF,KAEpC,MAhBO,GApddb,KAAKW,MAAQ,GAEbX,KAAKgB,YAAchB,KAAKgB,YAAYC,KAAKjB,MACzCA,KAAKkB,UAAYlB,KAAKkB,UAAUD,KAAKjB,MACrCA,KAAKmB,QAAUnB,KAAKmB,QAAQF,KAAKjB,MACjCA,KAAKG,QAAUH,KAAKG,QAAQc,KAAKjB,MACjCA,KAAKhB,QAAUgB,KAAKhB,QAAQiC,KAAKjB,MACjCA,KAAKoB,WAAapB,KAAKoB,WAAWH,KAAKjB,MACvCA,KAAKqB,OAASrB,KAAKqB,OAAOJ,KAAKjB,MAC/BA,KAAKsB,SAAWtB,KAAKsB,SAASL,KAAKjB,MACnCA,KAAKuB,QAAUvB,KAAKuB,QAAQN,KAAKjB,MACjCA,KAAKwB,QAAUxB,KAAKwB,QAAQP,KAAKjB,MACjCA,KAAKyB,SAAWzB,KAAKyB,SAASR,KAAKjB,MAxCvC0B,mBACI,OAAO1B,KAAKnC,MAAM8D,OAAOC,MAAM,IAAIC,OAC/B,CAACC,EAAMC,KACH,MAAMC,EAAWF,EAAKA,EAAKG,OAAS,GAYpC,OATID,GAAaD,IAASC,EAASE,OAAO,EAAG,IACxC3E,EAAA4E,gBAAgBC,KAAKJ,IAClBzE,EAAA4E,gBAAgBC,KAAKL,GAEzBD,EAAKA,EAAKG,OAAS,IAAMF,EAEzBD,EAAO,IAAIA,EAAMC,GAGdD,GAEX,IAIRO,cACI,OAAOC,SAASC,cAAc,UAqB3BzC,mBAAmB0C,GACtB9B,WAAW,KACP,IAAKV,KAAKE,QACN,OAGJ,MAAMuC,KAAEA,EAAAC,MAAMA,EAAAf,OAAOA,EAAAgB,KAAQA,EAAAC,gBAAMA,GAAoB5C,KAAKnC,MACtDgF,EAAW7C,KAAKC,OAAO6C,KAAKC,GAAOA,IAAQ/C,KAAKqC,SAChDW,EACO,QAATL,GAA2B,UAATA,GAA6B,SAATA,EAE1C,IAAKE,GACGJ,EAAM,CACN,GAAID,EAAUE,QAAUA,GAAAA,EAAgB,CACpC,MAAMO,EAAQ1F,EAAA2F,UAAUR,EAAOf,GACzBpB,EAAQP,KAAKC,OAAO,GAE1BD,KAAKC,OAAOkD,QACR,CAAC5C,EAAO6C,IAAO7C,EAAM8C,UAAYJ,EAAMG,IAGvC7C,GAASyC,GACTzC,EAAM+C,QAId,GAAIN,KACKR,EAAUC,MAAQC,IAAUF,EAAUE,OAAO,CAC9C,MAAOnC,GAASP,KAAKC,OAEjBM,GACAhD,EAAAkD,cAAcF,IAOlC,GACIkC,GACAD,EAAUG,OAASA,IAClB3C,KAAKW,MAAMC,aACZoC,EACF,CACE,MAAMzC,EAAQP,KAAKC,OAAOsD,KAAKC,IAC3B,MAAM7B,EAASpE,EAAAuD,aAAa0C,EAAI,cAGhC,OAFajG,EAAAkG,cAAc9B,KAEXgB,IAGpBpF,EAAAkD,cAAcF,GAGlB,IAAKkC,GAAQC,EAAO,CAChB,MAAMO,EAAQ1F,EAAA2F,UAAUR,EAAOf,GAE/B3B,KAAKC,OAAOkD,QAAQ,CAAC5C,EAAO6C,IAAO7C,EAAM8C,UAAYJ,EAAMG,IAG3DX,GAAQD,EAAUE,QAAUA,IAAUE,GACtC5C,KAAKC,OAAOkD,QAAQ5C,GAAUA,EAAM8C,UAAY,IAG/CZ,GACDzC,KAAK0D,SAAS,CAAE9C,aAAa,KAElC,IAGAd,oBACHE,KAAKE,SAAU,EAEXF,KAAKnC,MAAM6E,OACX1C,KAAK2D,cAIN7D,uBACHE,KAAKE,SAAU,EAGZJ,SACH,MAAM8D,YACFA,EAAAlB,MACAA,EAAAhE,SACAA,EAAAD,SACAA,EAAAX,SACAA,EAAA+F,cACAA,EAAAC,cACAA,EAAArB,KACAA,GACAzC,KAAKnC,MACHkG,EAAkB/D,KAAKnC,MAAMmG,sBAAwB1G,EAAA2G,YACrDC,EACFlE,KAAKnC,MAAMsG,gBAAkB3G,EAAAsB,sBAC3BsF,EAAkBR,IAAgBnB,EAClC4B,EAAc3B,IAAU5E,EACxBwG,EAAW7F,IAAaC,EACxB6F,OACgBC,IAAlBV,EAA8BA,EAAgBvF,EAElD,OACIrB,EAAAyB,cAACnB,EAAAI,UAAS,CAAA6G,YACI,QACV5F,UAAU,wCACV6F,IAAK1E,KAAKnC,MAAM8G,SAChB7G,SAAUA,EACVkB,QAASgB,KAAKyB,UAEdvE,EAAAyB,cAACnB,EAAAC,KAAI,KACA8G,GACGrH,EAAAyB,cAAC4F,EAAa,CACV7F,SAAUA,EACVD,SAAUA,IAGlBvB,EAAAyB,cAACnB,EAAAC,KAAI,KACAuC,KAAK4E,cACLR,GACGlH,EAAAyB,cAACnB,EAAAY,YAAW,CAACS,UAAU,8BAClB+E,KAKjB1G,EAAAyB,cAACnB,EAAAC,KAAI,KACA4G,GACGnH,EAAAyB,cAACuF,EAAc,CACXpG,SAAUA,EACVkB,QAASgB,KAAKwB,WAGpB8C,GACEpH,EAAAyB,cAACoF,EAAe,CACZc,GAAIhB,EACJ/F,SAAUA,EACV2E,KAAMA,MAQtB3C,cACJ,MAAM2C,KAAEA,EAAA3E,SAAMA,EAAAgH,OAAUA,EAAApC,MAAQA,GAAU1C,KAAKnC,MACzCkH,EAAiB/E,KAAKnC,MAAMmH,eAC5BC,GAAmBnH,IAAagH,EAEtC,IAAKrC,IAASC,EACV,OAAO,KAGX,GAAIqC,EACA,OAAO7H,EAAAyB,cAACoG,EAAcG,OAAAC,OAAA,GAAKnF,KAAKnC,QAGpC,MAAM6D,EAAe1B,KAAK0B,aAE1B,OACIxE,EAAAyB,cAACnB,EAAAC,KAAI,KACAiE,EAAa0D,IAAI,CAACC,EAAOjC,KACtB,GAAIiC,EAAMzD,MAAM,IAAIkB,KAAKwC,GAAK/H,EAAA4E,gBAAgBC,KAAKkD,IAC/C,OAAO,KACJ,CACH,MAAMC,EAAY7D,EAAa0B,EAAI,GAC7BoC,EAAgBC,QAAQlI,EAAAkG,cAAc4B,IACtCzB,EAAc4B,EAAgBH,OAAQb,EAE5C,OACItH,EAAAyB,cAACZ,EAAK,CAAA2H,kCAAA,EAEFT,gBAAiBA,EACjBnH,SAAUA,IAAa0H,EAAaG,mBAClB/B,EAAWgC,iBACbrI,EAAAsI,qBAAqBN,GACrCO,IAAKT,EAAKU,aACEV,EACZX,IAAK1E,KAAKgB,YACVE,UAAWlB,KAAKkB,UAChBC,QAASnB,KAAKmB,QACdhB,QAASH,KAAKG,QACdkB,OAAQrB,KAAKqB,OACbrC,QAASgB,KAAKhB,QACdgH,cAAehG,KAAKoB,WACpBE,SAAUtB,KAAKsB,SACfC,QAASvB,KAAKuB,cASlCzB,YAAY0D,GACZA,EACAxD,KAAKC,OAAOgG,KAAKzC,GAEjBxD,KAAKC,OAAS,GAIdH,UAAUO,GACd,MAAM6F,kBACFA,EAAAvE,OACAA,EAAAe,MACAA,EAAAE,gBACAA,EAAAuD,SACAA,GACAnG,KAAKnC,MACH0C,EAAQF,EAAEG,eACV6C,UAAEA,EAAA+C,YAAWA,EAAAC,gBAAaA,GAAoB9F,EAC9CM,EAActD,EAAAuD,aAAaP,EAAO,cAClC+F,EAAgB/I,EAAAgJ,qBAAqB1F,GACrC2F,EAAMC,eACNC,IAAeF,GACff,QAAQe,EAAIG,YAAcH,EAAII,cAEpC,IAAIC,EAAeC,SAASzD,EAAW,IAEvC,OAAQhD,EAAE0G,SACN,KAAKxJ,EAAA2B,KAAK8H,MACV,KAAKzJ,EAAA2B,KAAK+H,IACV,KAAK1J,EAAA2B,KAAKC,UACV,KAAK5B,EAAA2B,KAAKgI,IACV,KAAK3J,EAAA2B,KAAKiI,MAEN,YADA9G,EAAE+G,iBAEN,KAAK7J,EAAA2B,KAAKO,YAQN,OAPAY,EAAE+G,sBAEEhB,aAAuBiB,gBACvBjB,EAAY9C,QAEZ/F,EAAAkD,cAAcF,IAGtB,KAAKhD,EAAA2B,KAAKM,WAQN,OAPAa,EAAE+G,sBAEEf,aAA2BgB,gBAC3BhB,EAAgB/C,QAEhB/F,EAAAkD,cAAcF,IAGtB,KAAKhD,EAAA2B,KAAKQ,SACV,KAAKnC,EAAA2B,KAAKS,WAGN,GAFAU,EAAE+G,kBAEGd,EACD,OAGJ,MAAMgB,EAAYjH,EAAE0G,UAAYxJ,EAAA2B,KAAKQ,SAMrC,GAJI6H,MAAMV,KACNA,EAAe,GAGfW,SAASX,GAAe,CACxB,MAAMY,EAAalK,EAAAkG,cAAc5C,GAEjC,GAAK+B,GAgBD,GAAIF,GAAS+E,EAAY,CACrB,MAAMC,EAAYJ,EAAY,MAAQ,WAEhCK,EAAUpK,EAAAqK,eACZlF,EACA+E,EACAC,EACAvB,GAQJ,GANgB5I,EAAAsK,UACZ,MACAF,EACA3H,KAAKnC,OAGI,CACT,MAAMiK,EAAYvK,EAAA2F,UAAUyE,EAAShG,GAErC3B,KAAKC,OAAOmF,IACR,CAACrC,EAAKK,IAAOL,EAAIM,UAAYyE,EAAU1E,UAnCjC,CAClB,MAAM2E,EAAqB,WAAfN,GAA0BtB,GAAgB,EAChD6B,EACFnB,GAAgBS,EAAYS,GAAOA,GACjCE,EAAQ1K,EAAA2K,oBACVF,EACAnH,GAGAoH,IACA1H,EAAM8C,UACe,iBAAV4E,EACDA,EACA1K,EAAA4K,aAAaH,IA4B/BzK,EAAAkD,cAAcF,GACd2F,EAAkB3I,EAAA6K,UAAUpI,KAAKC,OAAQ0B,IAE7C,OAGR,MAAMI,EAAOxE,EAAA8K,mBAAmBhI,EAAE0G,SAC5BuB,EAAajF,IAAcqD,EAAerD,EAAYtB,EAAOA,EAEnE,GAAI9C,EAAUsJ,SAASlI,EAAE0G,UAAY1G,EAAEmI,SAAWnI,EAAEoI,QAChD,OAGJ,IAAKnC,EAED,YADAjG,EAAE+G,iBAIN,MAAMa,EAAQ1K,EAAA2K,oBAAoBI,EAAYzH,GAU9C,GARKoH,EAEuB,iBAAVA,IACd5H,EAAE+G,iBAEF7G,EAAM8C,UAAY4E,GAJlB5H,EAAE+G,iBAQFpH,KAAKW,MAAMC,aACXP,EAAE0G,UAAYxJ,EAAA2B,KAAKC,WACnBkB,EAAE0G,UAAYxJ,EAAA2B,KAAKE,OACrB,CACE,MAAOsJ,GAAc1I,KAAKC,OAC1B,IAAI0I,EAAgBpL,EAAA2K,oBAAoBnG,EAAMlB,GAE1C8H,IAAmC,IAAlBA,IACjBA,EAAgB5G,GAGhB4G,IACAtI,EAAE+G,iBAEFpH,KAAKC,OAAOkD,QAAQ,CAACK,EAAIJ,IAAY,IAANA,IAAYI,EAAGH,UAAY,KAE7B,IAAzBsF,EAAc1G,OACd1E,EAAAkD,cAAciI,IAEdnL,EAAAqL,iBAEAF,EAAWrF,UAAYsF,EACvBD,EAAWpF,QAEX/F,EAAAkD,cAAciI,EAAY,CAAC,SAMlChC,GAAgBrD,EAAUpB,QAAUpB,EAAYoB,QACjD5B,EAAE+G,iBAIFtH,QAAQO,GACZ,MAAM6F,kBAAEA,EAAAvE,OAAmBA,EAAAkH,SAAQA,EAAApH,SAAUA,GAAazB,KAAKnC,MACzD0C,EAAQF,EAAEG,eACV6C,UAAEA,EAAA+C,YAAWA,EAAAC,gBAAaA,GAAoB9F,EAC9CuI,EAAYvL,EAAAuD,aAAaP,EAAO,cAEtC,GAAIF,EAAE0G,UAAYxJ,EAAA2B,KAAK8H,MAOnB,OANA3G,EAAE+G,iBAEEpH,KAAKqC,SACLrC,KAAKqC,QAAQ0G,YAEjBF,IAIJ,GAAIxI,EAAE0G,UAAYxJ,EAAA2B,KAAK+H,KAAOxF,EAC1BA,SAIJ,GAAIzB,KAAKW,MAAMC,YACPP,EAAE0G,UAAYxJ,EAAA2B,KAAKC,WAAakB,EAAE0G,UAAYxJ,EAAA2B,KAAKE,SAEnDY,KAAKC,OAAOkD,QAAQK,GAAOA,EAAGH,UAAY,IAE1C9F,EAAAkD,cAAcT,KAAKC,OAAO,KAG9BD,KAAK0D,SAAS,CAAE9C,aAAa,SAI5B,GAAIP,EAAE0G,UAAYxJ,EAAA2B,KAAKC,UACpBkE,EACA9C,EAAM8C,UAAY,GACXgD,aAA2BgB,iBAClC9J,EAAAkD,cAAc4F,QAKjB,GACDhD,EAAWpB,QAAU6G,EAAU7G,SAC1B3C,EAAeiJ,SAASlI,EAAE0G,UAC/B1G,EAAE0G,UAAYxJ,EAAA2B,KAAKgI,KACnB7G,EAAE0G,UAAYxJ,EAAA2B,KAAKiI,MACrB,CACE,IACK9G,EAAE0G,UAAYxJ,EAAA2B,KAAKgI,KAAO7G,EAAE0G,UAAYxJ,EAAA2B,KAAKiI,QAC9C9D,EAAUpB,OAAS6G,EAAU7G,OAC/B,CACE,MAAMwF,EAAalK,EAAAkG,cAAcqF,GAEjC,IAAKvL,EAAAyL,mBAAmB3F,EAAWoE,GAC/B,OAIHrB,EAEMA,aAAuBiB,iBAC9B9J,EAAAkD,cAAc2F,GAFd7I,EAAAkD,cAAcF,GAKlB2F,EAAkB3I,EAAA6K,UAAUpI,KAAKC,OAAQ0B,KAIzC7B,QAAQO,GACZ9C,EAAAkD,cAAcJ,EAAEG,eAGZV,WAAWO,GACf,MAAME,EAAQF,EAAEG,cAEZD,EAAM0I,YAAcjJ,KAAKC,OAAO6C,KAAKU,GAAMiC,QAAQjC,EAAGH,cACtD9F,EAAAkD,cAAcT,KAAKC,OAAO,IAC1B1C,EAAAkD,cAAcF,EAAM0I,YACpBjJ,KAAK0D,SAAS,CAAE9C,aAAa,GAAQZ,KAAKnC,MAAMqL,cAwBhDpJ,OAAOO,GACX,IAAKL,KAAKW,MAAMC,YAAa,CACzB,MAAML,EAAQF,EAAE8I,OACVzG,EAAQnC,EAAM8C,UACdyF,EAAYvL,EAAAuD,aAAaP,EAAO,cAChCkH,EAAalK,EAAAkG,cAAcqF,GAEjC,GAAIrB,EAAY,CACZ,MAAM2B,EAAc7L,EAAA8L,SAAS3G,EAAO+E,GAEhC2B,IACA7I,EAAM8C,UAAY+F,IAM9B1I,WAAW,KACP,MAAM2B,QAAEA,GAAYrC,KAGhBA,KAAKE,SACLF,KAAKnC,MAAM4D,UACXzB,KAAKnC,MAAM4E,MACXJ,IACC9E,EAAAuD,aAAauB,EAAS,mCAEvBrC,KAAKnC,MAAM4D,YAEhB,GAGC3B,SAASO,GACb,MAAMsB,OAAEA,EAAAuE,kBAAQA,GAAsBlG,KAAKnC,MACrC0C,EAAQF,EAAEG,eACV6C,UAAEA,EAAA+C,YAAWA,GAAgB7F,EAEnC2F,EAAkB3I,EAAA6K,UAAUpI,KAAKC,OAAQ0B,IAErC0B,EAAUpB,QAAU1E,EAAAuD,aAAaP,EAAO,cAAc0B,QAClDmE,aAAuBiB,iBACvBjB,EAAY9C,QAKhBxD,QAAQO,GACZA,EAAE+G,iBAEF,MAAMkC,EAAOjJ,EAAEkJ,cAAcC,QAAQ,cAEjCF,IACAtJ,KAAKnC,MAAM0D,QAAQ+H,GAEfjJ,EAAE8I,kBAAkB9B,iBACpBhH,EAAE8I,OAAOJ,QAKbjJ,QAAQO,GACZA,EAAEoJ,kBAEFzJ,KAAKnC,MAAM2D,UAGP1B,SAASO,GACb,MAAMoC,KAAEA,EAAA3E,SAAMA,EAAA2D,SAAUA,GAAazB,KAAKnC,MAEtCC,GAIA2D,IACKzB,KAAKC,OAAO6C,KAAKC,GAAOA,IAAQ1C,EAAE8I,SAAY1G,GAC/ChB,MAMHjE,EAAAkM,MAAQxM,EAAMyM,WACvB,CAAC9L,EAAgC6G,IAC7BxH,EAAAyB,cAACiB,EAAcsF,OAAAC,OAAA,CAACR,SAAUD,GAAS7G","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton, SmallButton } from '../components/button';\nimport {\n    ClearComponentProps,\n    IconProps,\n    ReactTimebombValueProps\n} from '../typings';\nimport {\n    clearSelection,\n    fillZero,\n    formatIsActualNumber,\n    formatNumber,\n    formatSplitExpr,\n    getAttribute,\n    getFormatType,\n    isEnabled,\n    joinDates,\n    keys,\n    manipulateDate,\n    replaceSpaceWithNbsp,\n    selectElement,\n    splitDate,\n    stringFromCharCode,\n    validateFormatGroup,\n    validateFormatType\n} from '../utils';\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = (props: ClearComponentProps) => (\n    <ClearButton\n        className=\"react-timebomb-clearer\"\n        tabIndex={-1}\n        disabled={props.disabled}\n        onClick={props.onClick}\n    >\n        <ClearButtonX>×</ClearButtonX>\n    </ClearButton>\n);\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nclass ValueComponent extends React.PureComponent<\n    ReactTimebombValueProps,\n    ValueState\n> {\n    private inputs: HTMLSpanElement[] = [];\n    private mounted = false;\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ReactTimebombValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onPaste = this.onPaste.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ReactTimebombValueProps): void {\n        setTimeout(() => {\n            if (!this.mounted) {\n                return;\n            }\n\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n                        const input = this.inputs[0];\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (input && allowTextSelection) {\n                            input.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            const [input] = this.inputs;\n\n                            if (input) {\n                                selectElement(input);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        this.mounted = true;\n\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                ref={this.props.innerRef}\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearComponent\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        />\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const LabelComponent = this.props.labelComponent;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...this.props} />;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n                        const hasFormatType = Boolean(getFormatType(group));\n                        const placeholder = hasFormatType ? group : undefined;\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled || !hasFormatType}\n                                data-placeholder={placeholder}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                                onPaste={this.onPaste}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = sel\n            ? Boolean(sel.focusOffset - sel.anchorOffset)\n            : false;\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const dataGroup = getAttribute(input, 'data-group');\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC && onToggle) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= dataGroup.length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (\n                (e.keyCode === keys.DOT || e.keyCode === keys.COMMA) &&\n                innerText.length < dataGroup.length\n            ) {\n                const formatType = getFormatType(dataGroup);\n\n                if (!validateFormatType(innerText, formatType)) {\n                    return;\n                }\n            }\n\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected && this.mounted) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.mounted &&\n                this.props.onToggle &&\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onPaste(e: React.ClipboardEvent<HTMLSpanElement>) {\n        e.preventDefault();\n\n        const text = e.clipboardData.getData('text/plain');\n\n        if (text) {\n            this.props.onPaste(text);\n\n            if (e.target instanceof HTMLSpanElement) {\n                e.target.blur();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (onToggle) {\n            if (!this.inputs.some(inp => inp === e.target) || !open) {\n                onToggle();\n            }\n        }\n    }\n}\n\nexport const Value = React.forwardRef(\n    (props: ReactTimebombValueProps, ref: React.Ref<HTMLDivElement>) => (\n        <ValueComponent innerRef={ref} {...props} />\n    )\n);\n"]}