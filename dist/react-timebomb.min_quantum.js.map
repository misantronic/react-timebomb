{"version":3,"sources":["src/index.tsx"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","menu_title_1","value_1","utils_1","typings_1","exports","ReactTimebombProps","ReactTimebombState","ReactTimebombError","DEFAULT_FORMAT","Container","default","div","MenuWrapper","props","menuHeight","BlindInput","input","ReactTimebomb","Component","[object Object]","showTime","Boolean","format","test","super","value","this","state","allowValidation","mode","valueText","dateFormat","undefined","date","startOfDay","Date","onChangeValueText","bind","onValueSubmit","onSelectDay","onModeYear","onModeMonths","onSelectMonth","onSelectYear","onToday","onNextMonth","onPrevMonth","onSelectTime","prevProps","prevState","setState","valueTextDidUpdate","validDate","validateDate","isDisabled","emitError","emitChange","isUndefined","className","placeholder","menuWidth","showConfirm","showCalendarWeek","selectWeek","minDate","maxDate","endOfDay","createElement","Select","open","onToggle","onRef","MenuContainer","ref","MenuTitle","onMonths","onYear","Menu","onSubmit","Fragment","onClose","type","onFocus","Value","clearSelection","setTimeout","formattedDate","error","onError","getTime","onChange","day","setDate","getHours","getMinutes","now","setMonth","getMonth","time","splitted","split","newDate","parseInt"],"mappings":"mFAAA,MAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,qBACAE,EAAAH,EAAAC,EAAA,cACAG,EAAAJ,EAAAC,EAAA,GACAI,EAAAL,EAAAC,EAAA,GACAK,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GAUAO,EAAAR,EAAAC,EAAA,GAMSQ,EAAAC,mBALLF,EAAAE,mBAKyBD,EAAAE,mBAJzBH,EAAAG,mBAI6CF,EAAAG,mBAH7CJ,EAAAI,mBAKJ,MAAMC,EAAiB,aAEjBC,EAAYZ,EAAAa,QAAOC;;;;EAMnBC,EAAcf,EAAAa,QAAOC;;;;;;;;;kBASTE,GAAmCA,EAAMC;;;EAKrDC,EAAalB,EAAAa,QAAOM;;;EAK1BZ,EAAAa,cAAA,cAAmCvB,EAAMwB,UAI9BC,gCACHN,GAEA,MAAO,CACHO,SAAUC,QACNR,EAAMS,QAAU,gBAAgBC,KAAKV,EAAMS,UAKvDH,YAAYN,GACRW,MAAMX,GAEN,MAAMY,MAAEA,EAAAH,OAAOA,EAASd,GAAmBkB,KAAKb,MAEhDa,KAAKC,MAAQ,CACTC,iBAAiB,EACjBC,KAAM,QACNC,UAAWL,EAAQvB,EAAA6B,WAAWN,EAAOH,QAAUU,EAC/CC,KAAMR,GAASvB,EAAAgC,WAAW,IAAIC,OAGlCT,KAAKU,kBAAoBV,KAAKU,kBAAkBC,KAAKX,MACrDA,KAAKY,cAAgBZ,KAAKY,cAAcD,KAAKX,MAC7CA,KAAKa,YAAcb,KAAKa,YAAYF,KAAKX,MACzCA,KAAKc,WAAad,KAAKc,WAAWH,KAAKX,MACvCA,KAAKe,aAAef,KAAKe,aAAaJ,KAAKX,MAC3CA,KAAKgB,cAAgBhB,KAAKgB,cAAcL,KAAKX,MAC7CA,KAAKiB,aAAejB,KAAKiB,aAAaN,KAAKX,MAC3CA,KAAKkB,QAAUlB,KAAKkB,QAAQP,KAAKX,MACjCA,KAAKmB,YAAcnB,KAAKmB,YAAYR,KAAKX,MACzCA,KAAKoB,YAAcpB,KAAKoB,YAAYT,KAAKX,MACzCA,KAAKqB,aAAerB,KAAKqB,aAAaV,KAAKX,MAGxCP,mBACH6B,EACAC,GAEA,MAAMnB,UAAEA,GAAcJ,KAAKC,OACrBF,MAAEA,EAAAH,OAAOA,EAASd,GAAmBkB,KAAKb,MAE5CmC,EAAU1B,SAAWA,GACrBI,KAAKwB,SAAS,CACVpB,UAAWL,EAAQvB,EAAA6B,WAAWN,EAAOH,QAAUU,IAInDiB,EAAUnB,YAAcA,GACxBJ,KAAKyB,qBAILhC,qBACJ,MAAMW,UAAEA,EAAAF,gBAAWA,GAAoBF,KAAKC,OACtCL,OAAEA,EAASd,GAAmBkB,KAAKb,MACnCuC,EAAYlD,EAAAmD,aAAavB,EAAWR,GAEtC8B,EACA1B,KAAKwB,SAAS,CAAEtB,iBAAiB,GAAQ,KACpB1B,EAAAoD,WAAWF,EAAW1B,KAAKb,OAGxCa,KAAK6B,UAAU,aAAczB,GAE7BJ,KAAKwB,SAAS,CAAEjB,KAAMmB,GAAa,IAC/B1B,KAAK8B,WAAWJ,MAIrBtB,EACPJ,KAAK6B,UAAU,cAAezB,IACtB5B,EAAAuD,YAAY3B,IAAcF,GAClCF,KAAK8B,gBAAWxB,GAIjBb,SACH,MAAMuC,UACFA,EAAAjC,MACAA,EAAAkC,YACAA,EAAAC,UACAA,EAAAC,YACAA,EAAAC,iBACAA,EAAAC,WACAA,EAAAzC,OACAA,EAASd,GACTkB,KAAKb,OACHO,SAAEA,EAAAU,UAAUA,EAAAF,gBAAWA,EAAAC,KAAiBA,GAASH,KAAKC,MAEtDqC,EAAUtC,KAAKb,MAAMmD,QACrB9D,EAAAgC,WAAWR,KAAKb,MAAMmD,cACtBhC,EACAiC,EAAUvC,KAAKb,MAAMoD,QACrB/D,EAAAgE,SAASxC,KAAKb,MAAMoD,cACpBjC,EAEN,OACItC,EAAAyE,cAACrE,EAAAsE,OAAM,CACH3C,MAAOA,EACPkC,YAAaA,EACbD,UAAWA,GAEV,EAAGC,YAAAA,EAAaU,KAAAA,EAAMC,SAAAA,EAAUC,MAAAA,EAAOC,cAAAA,KACpC9E,EAAAyE,cAAC1D,EAAS,CAACgE,IAAKF,EAAcb,UAAU,kBACnCW,EACG3E,EAAAyE,cAACK,EAAa,CACVZ,UAAWA,EACX9C,WAnBL,KAqBKpB,EAAAyE,cAACvD,EAAW,CAACE,WArBlB,KAsBSpB,EAAAyE,cAACnE,EAAA0E,UAAS,CACN7C,KAAMA,EACNI,KAAMP,KAAKC,MAAMM,KACjB+B,QAASA,EACTC,QAASA,EACTU,SAAUjD,KAAKe,aACfmC,OAAQlD,KAAKc,WACbK,YAAanB,KAAKmB,YAClBC,YAAapB,KAAKoB,YAClBF,QAASlB,KAAKkB,UAElBlD,EAAAyE,cAACpE,EAAA8E,KAAI,CACDzD,SAAUA,EACVyC,YAAaA,EACbC,iBAAkBA,EAClBC,WAAYA,EACZ9B,KAAMP,KAAKC,MAAMM,KACjBR,MAAOA,EACPK,UAAWA,EACXR,OAAQA,EACRO,KAAMA,EACNmC,QAASA,EACTC,QAASA,EACT1B,YAAab,KAAKa,YAClBG,cAAehB,KAAKgB,cACpBC,aAAcjB,KAAKiB,aACnBI,aAAcrB,KAAKqB,aACnBuB,SAAUA,EACVQ,SAAUpD,KAAKY,kBAK3B5C,EAAAyE,cAAAzE,EAAAqF,SAAA,KACKrD,KAAKsD,UACNtF,EAAAyE,cAACpD,EAAU,CAACkE,KAAK,OAAOC,QAASZ,KAGzC5E,EAAAyE,cAAClE,EAAAkF,MAAK,CACFxB,YAAaU,OAAOrC,EAAY2B,EAChCrC,OAAQA,EACRG,MAAOA,EACPK,UAAWA,EACXkC,QAASA,EACTC,QAASA,EACTrC,gBAAiBA,EACjByC,KAAMA,EACNjC,kBAAmBV,KAAKU,kBACxBkC,SAAUA,EACVQ,SAAUpD,KAAKY,kBAQ/BnB,UAmBJ,OAlBAjB,EAAAkF,iBAEAC,WAAW,KACP,MAAM/D,OAAEA,EAASd,GAAmBkB,KAAKb,MACnCuC,EAAYlD,EAAAmD,aAAa3B,KAAKC,MAAMG,UAAWR,GAKrD,KAJgB8B,GACTlD,EAAAoD,WAAWF,EAAW1B,KAAKb,OAC5BuC,IAEU1B,KAAKb,MAAMY,MAAO,CAC9B,MAAM6D,EAAgBpF,EAAA6B,WAAWL,KAAKb,MAAMY,MAAOH,GAE/CI,KAAKC,MAAMG,YAAcwD,GACzB5D,KAAKwB,SAAS,CAAEpB,UAAWwD,MAGpC,GAEI,KAGHnE,UAAUoE,EAA2B9D,GACrCC,KAAKb,MAAM2E,SAAW9D,KAAKC,MAAMC,iBACjCF,KAAKb,MAAM2E,QAAQD,EAAO9D,GAI1BN,WAAWc,GACf,MAAMR,MAAEA,GAAUC,KAAKb,MAEnBY,GAASQ,GAAQR,EAAMgE,YAAcxD,EAAKwD,YAI9C/D,KAAKb,MAAM6E,SAASzD,GAEpBP,KAAKwB,SAAS,CAAEtB,gBAAiBP,QAAQY,MAGrCd,kBAAkBW,GACtBJ,KAAKwB,SAAS,CAAEpB,UAAAA,IAGZX,cAAcmD,GAClBA,IACApE,EAAAkF,iBAGIjE,YAAYwE,GAChB,MAAMlE,MAAEA,EAAAH,OAAOA,EAASd,GAAmBkB,KAAKb,MAChD,IAAIoB,EAAO,IAAIE,KAAKwD,GAEhBlE,IACAQ,EAAO/B,EAAA0F,QAAQD,EAAKlE,EAAMoE,WAAYpE,EAAMqE,eAGhD,MAAMhE,EAAY5B,EAAA6B,WAAWE,EAAMX,GAEnCI,KAAKwB,SAAS,CAAEjB,KAAAA,EAAMH,UAAAA,GAAa,IAAMJ,KAAK8B,WAAWvB,IAGrDd,aACJO,KAAKwB,SAAS,CAAErB,KAAM,SAGlBV,eACJO,KAAKwB,SAAS,CAAErB,KAAM,WAGlBV,cAAcc,GAClBP,KAAKwB,SAAS,CAAEjB,KAAAA,EAAMJ,KAAM,UAGxBV,aAAac,GACjBP,KAAKwB,SAAS,CAAEjB,KAAAA,EAAMJ,KAAM,WAGxBV,UACJ,MAAM4E,EAAM7F,EAAAgC,WAAW,IAAIC,MAE3BT,KAAKwB,SAAS,CAAEjB,KAAM8D,IAGlB5E,cACJ,MAAMc,EAAO,IAAIE,KAAKT,KAAKC,MAAMM,MAEjCA,EAAK+D,SAAS/D,EAAKgE,WAAa,GAEhCvE,KAAKwB,SAAS,CAAEjB,KAAAA,IAGZd,cACJ,MAAMc,EAAO,IAAIE,KAAKT,KAAKC,MAAMM,MAEjCA,EAAK+D,SAAS/D,EAAKgE,WAAa,GAEhCvE,KAAKwB,SAAS,CAAEjB,KAAAA,IAGZd,aAAa+E,GACjB,MAAM5E,OAAEA,EAASd,GAAmBkB,KAAKb,MACnCY,EAAQC,KAAKb,MAAMY,OAAS,IAAIU,KAAK,cAE3C,GAAK+D,EAEE,CACH,MAAMC,EAAWD,EAAKE,MAAM,KACtBC,EAAUnG,EAAA0F,QACZnE,EACA6E,SAASH,EAAS,GAAI,IACtBG,SAASH,EAAS,GAAI,KAGpBrE,EAAY5B,EAAA6B,WAAWsE,EAAS/E,GAEtCI,KAAKwB,SAAS,CAAEpB,UAAAA,GAAa,IAAMJ,KAAK8B,WAAW6C,SAXnD3E,KAAK8B,WAAWtD,EAAAgC,WAAWT","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { Select } from 'react-slct';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu-title';\nimport { Value } from './value';\nimport {\n    isUndefined,\n    startOfDay,\n    isDisabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError\n} from './typings';\n\nexport { ReactTimebombProps, ReactTimebombState, ReactTimebombError };\n\nconst DEFAULT_FORMAT = 'YYYY-MM-DD';\n\nconst Container = styled.div`\n    width: 100%;\n    position: relative;\n    position: relative;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    max-height: ${(props: { menuHeight: number }) => props.menuHeight}px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    opacity: 0;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        return {\n            showTime: Boolean(\n                props.format && /H|h|m|k|a|S|s/.test(props.format)\n            )\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        this.state = {\n            allowValidation: false,\n            mode: 'month',\n            valueText: value ? dateFormat(value, format) : undefined,\n            date: value || startOfDay(new Date())\n        };\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.onValueSubmit = this.onValueSubmit.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonths = this.onModeMonths.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onToday = this.onToday.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n    }\n\n    public componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ): void {\n        const { valueText } = this.state;\n        const { value, format = DEFAULT_FORMAT } = this.props;\n\n        if (prevProps.format !== format) {\n            this.setState({\n                valueText: value ? dateFormat(value, format) : undefined\n            });\n        }\n\n        if (prevState.valueText !== valueText) {\n            this.valueTextDidUpdate();\n        }\n    }\n\n    private valueTextDidUpdate(): void {\n        const { valueText, allowValidation } = this.state;\n        const { format = DEFAULT_FORMAT } = this.props;\n        const validDate = validateDate(valueText, format);\n\n        if (validDate) {\n            this.setState({ allowValidation: true }, () => {\n                const disabled = isDisabled(validDate, this.props);\n\n                if (disabled) {\n                    this.emitError('outOfRange', valueText!);\n                } else {\n                    this.setState({ date: validDate }, () =>\n                        this.emitChange(validDate)\n                    );\n                }\n            });\n        } else if (valueText) {\n            this.emitError('invalidDate', valueText);\n        } else if (!isUndefined(valueText) && allowValidation) {\n            this.emitChange(undefined);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            className,\n            value,\n            placeholder,\n            menuWidth,\n            showConfirm,\n            showCalendarWeek,\n            selectWeek,\n            format = DEFAULT_FORMAT\n        } = this.props;\n        const { showTime, valueText, allowValidation, mode } = this.state;\n        const menuHeight = 300;\n        const minDate = this.props.minDate\n            ? startOfDay(this.props.minDate)\n            : undefined;\n        const maxDate = this.props.maxDate\n            ? endOfDay(this.props.maxDate)\n            : undefined;\n\n        return (\n            <Select<Date>\n                value={value}\n                placeholder={placeholder}\n                className={className}\n            >\n                {({ placeholder, open, onToggle, onRef, MenuContainer }) => (\n                    <Container ref={onRef as any} className=\"react-timebomb\">\n                        {open ? (\n                            <MenuContainer\n                                menuWidth={menuWidth}\n                                menuHeight={menuHeight}\n                            >\n                                <MenuWrapper menuHeight={menuHeight}>\n                                    <MenuTitle\n                                        mode={mode}\n                                        date={this.state.date}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onMonths={this.onModeMonths}\n                                        onYear={this.onModeYear}\n                                        onNextMonth={this.onNextMonth}\n                                        onPrevMonth={this.onPrevMonth}\n                                        onToday={this.onToday}\n                                    />\n                                    <Menu\n                                        showTime={showTime}\n                                        showConfirm={showConfirm}\n                                        showCalendarWeek={showCalendarWeek}\n                                        selectWeek={selectWeek}\n                                        date={this.state.date}\n                                        value={value}\n                                        valueText={valueText}\n                                        format={format}\n                                        mode={mode}\n                                        minDate={minDate}\n                                        maxDate={maxDate}\n                                        onSelectDay={this.onSelectDay}\n                                        onSelectMonth={this.onSelectMonth}\n                                        onSelectYear={this.onSelectYear}\n                                        onSelectTime={this.onSelectTime}\n                                        onToggle={onToggle}\n                                        onSubmit={this.onValueSubmit}\n                                    />\n                                </MenuWrapper>\n                            </MenuContainer>\n                        ) : (\n                            <>\n                                {this.onClose()}\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            </>\n                        )}\n                        <Value\n                            placeholder={open ? undefined : placeholder}\n                            format={format}\n                            value={value}\n                            valueText={valueText}\n                            minDate={minDate}\n                            maxDate={maxDate}\n                            allowValidation={allowValidation}\n                            open={open}\n                            onChangeValueText={this.onChangeValueText}\n                            onToggle={onToggle}\n                            onSubmit={this.onValueSubmit}\n                        />\n                    </Container>\n                )}\n            </Select>\n        );\n    }\n\n    private onClose(): null {\n        clearSelection();\n\n        setTimeout(() => {\n            const { format = DEFAULT_FORMAT } = this.props;\n            const validDate = validateDate(this.state.valueText, format);\n            const isValid = validDate\n                ? !isDisabled(validDate, this.props)\n                : validDate;\n\n            if (!isValid && this.props.value) {\n                const formattedDate = dateFormat(this.props.value, format);\n\n                if (this.state.valueText !== formattedDate) {\n                    this.setState({ valueText: formattedDate });\n                }\n            }\n        }, 0);\n\n        return null;\n    }\n\n    private emitError(error: ReactTimebombError, value: string): void {\n        if (this.props.onError && this.state.allowValidation) {\n            this.props.onError(error, value);\n        }\n    }\n\n    private emitChange(date?: Date): void {\n        const { value } = this.props;\n\n        if (value && date && value.getTime() === date.getTime()) {\n            return;\n        }\n\n        this.props.onChange(date);\n\n        this.setState({ allowValidation: Boolean(date) });\n    }\n\n    private onChangeValueText(valueText: string): void {\n        this.setState({ valueText });\n    }\n\n    private onValueSubmit(onToggle: () => void): void {\n        onToggle();\n        clearSelection();\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, format = DEFAULT_FORMAT } = this.props;\n        let date = new Date(day);\n\n        if (value) {\n            date = setDate(day, value.getHours(), value.getMinutes());\n        }\n\n        const valueText = dateFormat(date, format);\n\n        this.setState({ date, valueText }, () => this.emitChange(date));\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonths() {\n        this.setState({ mode: 'months' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.setState({ date, mode: 'month' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.setState({ date, mode: 'months' });\n    }\n\n    private onToday(): void {\n        const now = startOfDay(new Date());\n\n        this.setState({ date: now });\n    }\n\n    private onNextMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() + 1);\n\n        this.setState({ date });\n    }\n\n    private onPrevMonth(): void {\n        const date = new Date(this.state.date);\n\n        date.setMonth(date.getMonth() - 1);\n\n        this.setState({ date });\n    }\n\n    private onSelectTime(time: string): void {\n        const { format = DEFAULT_FORMAT } = this.props;\n        const value = this.props.value || new Date('1970-01-01');\n\n        if (!time) {\n            this.emitChange(startOfDay(value));\n        } else {\n            const splitted = time.split(':');\n            const newDate = setDate(\n                value,\n                parseInt(splitted[0], 10),\n                parseInt(splitted[1], 10)\n            );\n\n            const valueText = dateFormat(newDate, format);\n\n            this.setState({ valueText }, () => this.emitChange(newDate));\n        }\n    }\n}\n"]}