{"version":3,"sources":["src/index.tsx","src/menu/index.tsx","src/menu/table.tsx","src/value/value-multi.tsx","src/typings.ts"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","value_multi_1","__export","Container","default","div","MenuWrapper","props","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","valueRef","createRef","emitChange","timeout","date","clearTimeout","setTimeout","__awaiter","value","onChange","dateEqual","isArray","setStateAsync","allowValidation","Boolean","preventClose","minDate","maxDate","isBefore","console","error","state","initialState","onChangeValueText","bind","emitChangeAndClose","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onChangeMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onHoverDays","onMultiValueSelect","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","hoverDate","menuHeight","selectedRange","prevProps","prevState","selectRange","showConfirm","setState","stringEqual","result","validateValueText","emitError","rangeIsComplete","length","Promise","resolve","validDate","validateDate","some","d","isEnabled","isUndefined","placeholder","showCalendarWeek","timeStep","confirmComponent","onOpen","menuWidth","Math","max","MENU_WIDTH","menuLeft","current","getBoundingClientRect","left","width","createElement","Select","open","onToggle","onRef","showMenu","onClick","onCloseMenu","onOpenMenu","getMobileMenuContainer","ref","renderValue","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","clearComponent","labelComponent","isMulti","ValueComponent","ValueMulti","Value","componentValue","sort","a","b","getTime","onAllSelect","onValueSelect","clearSelection","onError","newDate","date0","date1","index","Object","assign","valueText0","day","valueDate","startOfWeek","endOfWeek","addDays","setDate","getHours","getMinutes","dateArr","getSelectedRange","sortDates","currentDate","setMonth","getMonth","time","commit","map","e","target","HTMLDivElement","classList","contains","defaultProps","exports","button_1","mobile_1","table_1","time_1","MonthAndYearContainer","MonthsContainer","MonthContainer","YearContainer","Confirm","MobileMenuTable","MenuTable","getDate","MenuMonths","monthNames","useState","getMonthNames","month","year","getFullYear","getAttribute","currentTarget","str","i","enabled","selected","Button","key","tabIndex","data-date","toISOString","MenuYear","yearContainer","setYearContainer","scrollToYear","querySelector","scrollIntoView","scrollBy","top","useEffect","el","getDateConfig","newYear","setFullYear","setSeconds","getSeconds","setMinutes","setHours","currentYear","Array","fill","_","filter","obj","reverse","minYear","array","now","getFullYears","fullYear","dateStr","MenuConfirm","isValid","every","v","MonthWrapper","GestureWrapper","allowNext","endOfMonth","allowPrev","subtractDays","startOfMonth","direction","addMonths","subtractMonths","ConfirmComponent","MenuTime","topDivider","onCancel","day_1","Table","table","hoverDays","setHoverDays","weekdayNames","useRef","getWeekdayNames","sun","mon","tue","wed","thu","fri","sat","c","monthMatrix","useMemo","dateMonth","dateYear","weeks","base","week","weekStart","getCacheKey","onDayMouseEnter","days","firstDay","onDayMouseLeave","cellSpacing","cellPadding","dates","weekNum","getWeekOfYear","selectedWeek","config","dayWeekOfYear","firstHover","lastHover","getSelected","includes","WeekNum","hover","hoverDay","Day","onMouseEnter","onMouseLeave","DefaultIcon","Icon","icon","StyledValue","LabelComponent","onClickDate","parseInt","content","Fragment","HoverSpan","data-index","toDateString","span","forwardRef","ArrowButtonComp","ArrowButton","ClearComponent","DefaultClearComponent","showPlaceholder","IconComponent","onKeyUp","keyCode","keys","ESC","document","body","addEventListener","removeEventListener","data-role","Flex","Placeholder","stopPropagation","id","ReactTimebombArrowButtonProps","ArrowButtonProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType,\n    addDays,\n    stringEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport * from './typings';\n\ninterface MenuWrapperProps {\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n\n    private onToggle?: () => void;\n    private onCloseMenu?: () => void;\n    private onOpenMenu?: () => void;\n    private MobileMenuContainer?: React.ComponentType<MenuContainerProps>;\n    private valueRef = React.createRef<HTMLDivElement>();\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentType<MenuContainerProps>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            hoverDate: undefined,\n            menuHeight: undefined,\n            selectedRange: 0,\n            preventClose: false\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            console.error(\n                '[react-timebomb]: minDate must appear before maxDate'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.emitChangeAndClose = this.emitChangeAndClose.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onHoverDays = this.onHoverDays.bind(this);\n        this.onMultiValueSelect = this.onMultiValueSelect.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public async componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ) {\n        const { valueText, showDate, showTime, preventClose } = this.state;\n        const { value, format, selectRange, showConfirm } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (!stringEqual(prevState.valueText, valueText)) {\n            const result = await this.validateValueText();\n\n            if (result.error) {\n                this.emitError(result.error, result.valueText);\n            }\n\n            if (result.date) {\n                const rangeIsComplete =\n                    selectRange &&\n                    isArray(result.date) &&\n                    result.date.length === 2;\n\n                if (\n                    (!showConfirm && !selectRange && showDate) ||\n                    rangeIsComplete\n                ) {\n                    if (prevState.mode === 'day' && !preventClose) {\n                        this.emitChangeAndClose(result.date);\n                    } else {\n                        this.emitChange(result.date);\n                    }\n                }\n\n                if (!showDate && showTime) {\n                    this.emitChange(result.date);\n                }\n            }\n        }\n    }\n\n    private setStateAsync<K extends keyof ReactTimebombState>(\n        state:\n            | ((\n                  prevState: Readonly<ReactTimebombState>,\n                  props: Readonly<ReactTimebombProps>\n              ) => Pick<ReactTimebombState, K> | ReactTimebombState | null)\n            | (Pick<ReactTimebombState, K> | ReactTimebombState | null)\n    ) {\n        return new Promise(resolve => {\n            this.setState(state, resolve);\n        });\n    }\n\n    private validateValueText(): Promise<{\n        date?: ReactTimebombDate;\n        error?: ReactTimebombError;\n        valueText?: string | string[];\n    }> {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        return new Promise(async resolve => {\n            if (validDate) {\n                await this.setStateAsync({ allowValidation: true });\n\n                const enabled = isArray(validDate)\n                    ? validDate.some(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    await this.setStateAsync({ date: validDate });\n\n                    resolve({ date: validDate });\n                } else {\n                    resolve({ error: 'outOfRange', valueText });\n                }\n            } else if (valueText) {\n                resolve({ error: 'invalidDate', valueText });\n            } else if (!isUndefined(valueText) && allowValidation) {\n                resolve({ date: undefined });\n            }\n        });\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            confirmComponent,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate,\n            hoverDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuLeft =\n            isArray(value) &&\n            value.length === 1 &&\n            this.valueRef.current &&\n            selectRange === true\n                ? this.valueRef.current.getBoundingClientRect().left +\n                  this.valueRef.current.getBoundingClientRect().width -\n                  menuWidth\n                : undefined;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({\n                    placeholder,\n                    open,\n                    onToggle,\n                    onClose,\n                    onOpen,\n                    onRef,\n                    MenuContainer\n                }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n                    const className = [this.className];\n                    const onClick = mobile\n                        ? this.onMobileMenuContainerClick\n                        : undefined;\n\n                    if (showMenu) {\n                        className.push('open');\n                    }\n\n                    this.onToggle = onToggle;\n                    this.onCloseMenu = onClose;\n                    this.onOpenMenu = onOpen;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={className.join(' ')}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuLeft={menuLeft}\n                                    menuWidth={menuWidth}\n                                    menuHeight={this.state.menuHeight}\n                                    onClick={onClick}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            hoverDate={hoverDate}\n                                            confirmComponent={confirmComponent}\n                                            onHoverDays={this.onHoverDays}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.emitChangeAndClose}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId,\n            clearComponent,\n            labelComponent\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            allowValidation,\n            mode,\n            hoverDate\n        } = this.state;\n        const isMulti = selectRange || isArray(value);\n        const ValueComponent = isMulti ? ValueMulti : Value;\n\n        let componentValue = isMulti\n            ? value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined\n            : value;\n\n        if (\n            isArray(componentValue) &&\n            componentValue.length === 1 &&\n            hoverDate\n        ) {\n            componentValue = [...componentValue, hoverDate].sort(\n                (a, b) => a.getTime() - b.getTime()\n            );\n        }\n\n        placeholder = open && !isMulti ? undefined : placeholder;\n\n        return (\n            <ValueComponent\n                ref={this.valueRef}\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                selectRange={selectRange}\n                value={componentValue as any}\n                hoverDate={hoverDate}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                clearComponent={clearComponent}\n                labelComponent={labelComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle}\n                onSubmit={this.emitChangeAndClose}\n                onAllSelect={this.onModeDay}\n                onValueSelect={this.onMultiValueSelect}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        // get rid of this timeout\n        // fixme\n        setTimeout(async () => {\n            clearSelection();\n\n            await this.setStateAsync(this.initialState);\n\n            if (this.props.onClose) {\n                this.props.onClose();\n            }\n        }, 16);\n    }\n\n    private async emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ) {\n        if (this.state.allowValidation) {\n            await this.setStateAsync({ allowValidation: false });\n\n            if (this.props.onError) {\n                this.props.onError(error, value);\n            }\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(async () => {\n                const { value, onChange } = this.props;\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                const changeDate = isArray(date) ? date : [date];\n\n                onChange(...changeDate);\n\n                await this.setStateAsync({\n                    allowValidation: Boolean(date),\n                    preventClose: false\n                });\n            }, 0);\n        };\n    })();\n\n    private async emitChangeAndClose(newDate?: ReactTimebombDate) {\n        if (this.onCloseMenu) {\n            this.onCloseMenu();\n        }\n        clearSelection();\n\n        const { date } = newDate\n            ? { date: newDate }\n            : await this.validateValueText();\n\n        if (date) {\n            this.emitChange(date);\n        }\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private async onClear() {\n        await this.setStateAsync({ valueText: undefined });\n\n        this.emitChange(undefined);\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText, preventClose: true });\n    }\n\n    private async onChangeFormatGroup(format?: string) {\n        await this.setStateAsync({\n            menuHeight: 'auto',\n            mode: format ? getFormatType(format) : undefined\n        });\n    }\n\n    private onHoverDays([date0, date1]: (Date | undefined)[]) {\n        const hoverDate = date1 || date0;\n\n        if (\n            isArray(this.state.valueText) &&\n            isArray(this.state.date) &&\n            this.state.valueText.length === 1 &&\n            this.state.date.length === 1 &&\n            hoverDate\n        ) {\n            this.setState({ hoverDate });\n        }\n    }\n\n    private async onMultiValueSelect(date: Date, index: number) {\n        if (index === 0) {\n            await this.setStateAsync({ ...this.initialState, hoverDate: date });\n        }\n\n        if (\n            index === 1 &&\n            isArray(this.state.valueText) &&\n            isArray(this.state.date)\n        ) {\n            const [valueText0] = this.state.valueText;\n            const [date0] = this.state.date;\n\n            await this.setStateAsync({\n                ...this.initialState,\n                valueText: [valueText0],\n                date: [date0],\n                hoverDate: date\n            });\n        }\n\n        // since closing of the menu is delayed (16ms), we need to deplay the opening as well\n        // fixme\n        setTimeout(async () => {\n            if (this.onOpenMenu) {\n                this.onOpenMenu();\n            }\n\n            await this.setStateAsync({ hoverDate: date });\n        }, 32);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, selectRange } = this.props;\n        const format = this.props.format!;\n\n        const valueDate = (() => {\n            if (value instanceof Date) {\n                return value;\n            }\n\n            if (isArray(value)) {\n                return value[0];\n            }\n\n            return day;\n        })();\n\n        if (selectRange === 'week') {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (typeof selectRange === 'number') {\n            const date = [day, addDays(day, selectRange - 1)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (selectRange === true) {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(this.state.valueText[0], format) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format);\n\n            this.setState({\n                date: dateArr,\n                valueText,\n                selectedRange,\n                hoverDate: undefined\n            });\n        } else {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private async onSelectTime(time: Date, mode: FormatType, commit = false) {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        await this.setStateAsync({ mode, valueText });\n\n        if (commit) {\n            this.emitChange(newDate);\n        }\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ReactTimebombState } from '../';\nimport { Button } from '../components/button';\nimport { ReactTimebombDate, ReactTimebombMenuProps } from '../typings';\nimport {\n    addDays,\n    addMonths,\n    endOfMonth,\n    getAttribute,\n    getMonthNames,\n    isArray,\n    isEnabled,\n    startOfMonth,\n    subtractDays,\n    subtractMonths,\n    validateDate\n} from '../utils';\nimport { GestureDirection, GestureWrapper } from './mobile';\nimport { MenuTable } from './table';\nimport { MenuTime } from './time';\n\nconst MonthAndYearContainer = styled.div`\n    display: flex;\n    height: ${(props: { mobile?: boolean }) =>\n        props.mobile ? '100%' : '220px'};\n`;\n\nconst MonthsContainer = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    box-sizing: border-box;\n    height: 100%;\n\n    button {\n        width: ${(props: { mobile?: boolean }) =>\n            props.mobile ? 'calc(33% - 6px)' : '33%'};\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        min-height: 25%;\n        border: none;\n        margin: 0;\n    }\n`;\n\nconst MonthContainer = styled.div`\n    flex: 1;\n    padding: 0;\n    height: 100%;\n    overflow: hidden;\n`;\n\nconst YearContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n    border-left: solid 1px #e6e6e6;\n    padding: 10px;\n    flex: 0 0 90px;\n\n    button {\n        width: 100%;\n        font-size: 16px;\n        font-weight: normal;\n        font-style: normal;\n        font-stretch: normal;\n        border: none;\n        padding: 6px 0;\n        margin: 0 0 4px;\n        min-height: 46px;\n    }\n`;\n\nconst Confirm = styled.div`\n    width: 100%;\n    text-align: center;\n    padding: 10px 0;\n\n    button {\n        padding: 3px 28px;\n    }\n`;\n\nconst MobileMenuTable = styled(MenuTable)`\n    width: 33.3%;\n`;\n\nfunction getDate(\n    date: ReactTimebombDate,\n    selectedRange: ReactTimebombState['selectedRange']\n) {\n    return (isArray(date) ? date[selectedRange] : date)!;\n}\n\nfunction MenuMonths(props: ReactTimebombMenuProps) {\n    const { value, mobile, selectedRange } = props;\n    const [monthNames] = React.useState(getMonthNames(true));\n    const valueDate = getDate(value, selectedRange);\n    const date = getDate(props.date, selectedRange);\n    const month = value && valueDate.getMonth();\n    const year = value && valueDate.getFullYear();\n\n    function onSelectMonth(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onSelectMonth(date), 0);\n    }\n\n    return (\n        <MonthsContainer mobile={mobile} className=\"months\">\n            {monthNames.map((str, i) => {\n                const newDate = new Date(date);\n\n                newDate.setMonth(i);\n\n                const enabled = isEnabled('month', newDate, props);\n                const selected =\n                    month === newDate.getMonth() &&\n                    year === newDate.getFullYear();\n\n                return (\n                    <Button\n                        key={str}\n                        tabIndex={-1}\n                        className={selected ? 'selected' : undefined}\n                        selected={selected}\n                        disabled={!enabled}\n                        mobile={props.mobile}\n                        data-date={newDate.toISOString()}\n                        onClick={onSelectMonth}\n                    >\n                        {str}\n                    </Button>\n                );\n            })}\n        </MonthsContainer>\n    );\n}\n\nfunction MenuYear(props: ReactTimebombMenuProps) {\n    const { value, minDate, maxDate } = props;\n    const [\n        yearContainer,\n        setYearContainer\n    ] = React.useState<HTMLDivElement | null>(null);\n\n    React.useEffect(scrollToYear, [props.date]);\n\n    function scrollToYear() {\n        if (yearContainer) {\n            const selected = yearContainer.querySelector('.selected');\n\n            if (selected) {\n                selected.scrollIntoView();\n\n                if (yearContainer.scrollBy) {\n                    yearContainer.scrollBy({ top: -10 });\n                }\n            }\n        }\n    }\n\n    function getFullYears() {\n        const valueDate = getDate(value, props.selectedRange);\n        const year = getDate(props.date, props.selectedRange).getFullYear();\n\n        const getDateConfig = (date: Date, newYear: number) => {\n            date = new Date(date);\n            date.setFullYear(newYear);\n\n            const enabled = isEnabled('year', date, props);\n            const selected = year === newYear;\n\n            if (value) {\n                date.setSeconds(valueDate.getSeconds());\n                date.setMinutes(valueDate.getMinutes());\n                date.setHours(valueDate.getHours());\n                date.setDate(valueDate.getDate());\n                date.setMonth(valueDate.getMonth());\n            }\n\n            return { date, enabled, selected };\n        };\n\n        if (minDate && !maxDate) {\n            const currentYear = minDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(minDate, currentYear + i))\n                .filter(obj => obj.enabled);\n        } else if (!minDate && maxDate) {\n            const currentYear = maxDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => getDateConfig(maxDate, currentYear - i))\n                .filter(obj => obj.enabled)\n                .reverse();\n        } else if (minDate && maxDate) {\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const array: {\n                date: Date;\n                enabled: boolean;\n                selected: boolean;\n            }[] = [];\n\n            for (let i = maxYear; i >= minYear; i--) {\n                array.push(getDateConfig(maxDate, i));\n            }\n\n            return array.reverse();\n        } else {\n            const now = new Date();\n            const currentDate = valueDate > now ? valueDate : now;\n            const currentYear = currentDate.getFullYear();\n\n            return Array(120)\n                .fill(undefined)\n                .map((_, i) => {\n                    const date = new Date(currentDate);\n\n                    date.setFullYear(currentYear - i);\n\n                    const enabled = isEnabled('year', date, props);\n                    const selected = year === date.getFullYear();\n\n                    return { date, enabled, selected };\n                })\n                .filter(obj => obj.enabled)\n                .reverse();\n        }\n    }\n\n    function onSelectYear(e: React.MouseEvent<HTMLButtonElement>) {\n        const date = new Date(getAttribute(e.currentTarget, 'data-date'));\n\n        setTimeout(() => props.onSelectYear(date), 0);\n    }\n\n    function onYearContainer(el: HTMLDivElement | null) {\n        setYearContainer(el);\n        scrollToYear();\n    }\n\n    return (\n        <YearContainer ref={onYearContainer} className=\"years\">\n            {getFullYears()\n                .map(({ date, selected }) => {\n                    const fullYear = date.getFullYear();\n                    const dateStr = date.toISOString();\n\n                    return (\n                        <Button\n                            key={dateStr}\n                            tabIndex={-1}\n                            className={selected ? 'selected' : undefined}\n                            selected={selected}\n                            mobile={props.mobile}\n                            data-date={dateStr}\n                            onClick={onSelectYear}\n                        >\n                            {fullYear}\n                        </Button>\n                    );\n                })\n                .reverse()}\n        </YearContainer>\n    );\n}\n\nfunction MenuConfirm(props: ReactTimebombMenuProps) {\n    const { valueText, format } = props;\n    const validDate = validateDate(valueText, format);\n    const isValid = validDate\n        ? isArray(validDate)\n            ? validDate.every(v => isEnabled('day', v, props))\n            : isEnabled('day', validDate, props)\n        : false;\n\n    return (\n        <Confirm>\n            <Button\n                tabIndex={-1}\n                disabled={!isValid}\n                mobile={props.mobile}\n                onClick={() => props.onSubmit()}\n            >\n                Ok\n            </Button>\n        </Confirm>\n    );\n}\n\nfunction MonthWrapper(props: ReactTimebombMenuProps) {\n    const { minDate, maxDate, mobile } = props;\n\n    function allowPrev() {\n        let date = props.date;\n\n        if (!minDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (subtractDays(startOfMonth(date), 1) < minDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function allowNext() {\n        let date = props.date;\n\n        if (!maxDate) {\n            return true;\n        }\n\n        if (isArray(date)) {\n            date = date[0];\n        }\n\n        if (date) {\n            if (addDays(endOfMonth(date), 1) > maxDate) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function onChangeMonth(direction: GestureDirection) {\n        const { onChangeMonth } = props;\n        const date = getDate(props.date, props.selectedRange);\n\n        switch (direction) {\n            case 'next':\n                onChangeMonth(addMonths(date, 1));\n                break;\n            case 'prev':\n                onChangeMonth(subtractMonths(date, 1));\n                break;\n        }\n    }\n\n    if (mobile) {\n        return (\n            <GestureWrapper\n                allowNext={allowNext()}\n                allowPrev={allowPrev()}\n                onChangeMonth={onChangeMonth}\n            >\n                <MobileMenuTable\n                    date={subtractMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={subtractMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={props.date}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={props.value}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n                <MobileMenuTable\n                    date={addMonths(\n                        getDate(props.date, props.selectedRange),\n                        1\n                    )}\n                    minDate={props.minDate}\n                    maxDate={props.maxDate}\n                    mobile={props.mobile}\n                    selectRange={props.selectRange}\n                    selectedRange={props.selectedRange}\n                    showCalendarWeek={props.showCalendarWeek}\n                    showConfirm={props.showConfirm}\n                    showTime={props.showTime}\n                    value={addMonths(\n                        getDate(props.value, props.selectedRange),\n                        1\n                    )}\n                    onSubmit={props.onSubmit}\n                    onSelectDay={props.onSelectDay}\n                />\n            </GestureWrapper>\n        );\n    }\n\n    return (\n        <MenuTable\n            date={props.date}\n            minDate={props.minDate}\n            maxDate={props.maxDate}\n            mobile={props.mobile}\n            selectRange={props.selectRange}\n            selectedRange={props.selectedRange}\n            showCalendarWeek={props.showCalendarWeek}\n            showConfirm={props.showConfirm}\n            showTime={props.showTime}\n            value={props.value}\n            hoverDate={props.hoverDate}\n            onSubmit={props.onSubmit}\n            onSelectDay={props.onSelectDay}\n            onHoverDays={props.onHoverDays}\n        />\n    );\n}\n\nexport function Menu(props: ReactTimebombMenuProps) {\n    const { mode, mobile, showDate, showConfirm, showTime } = props;\n    const ConfirmComponent = props.confirmComponent || MenuConfirm;\n\n    if (showDate || showTime) {\n        switch (mode) {\n            case 'year':\n            case 'month':\n                return (\n                    <MonthAndYearContainer mobile={mobile}>\n                        <MenuMonths {...props} />\n                        <MenuYear {...props} />\n                    </MonthAndYearContainer>\n                );\n            case 'day':\n            case 'hour':\n            case 'minute':\n            case 'second':\n                return (\n                    <MonthContainer>\n                        {showDate && <MonthWrapper {...props} />}\n                        {showTime && (\n                            <MenuTime\n                                date={props.date}\n                                timeStep={props.timeStep}\n                                topDivider={props.showDate}\n                                format={props.format}\n                                onChange={props.onSelectTime}\n                                onSubmit={props.onSubmitTime}\n                                onCancel={props.onSubmitTime}\n                            />\n                        )}\n                        {showConfirm && <ConfirmComponent {...props} />}\n                    </MonthContainer>\n                );\n        }\n    }\n\n    return null;\n}\n","import * as React from 'react';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombDate\n} from '../typings';\nimport {\n    startOfMonth,\n    startOfWeek,\n    endOfWeek,\n    addDays,\n    getWeekdayNames,\n    getWeekOfYear,\n    isArray,\n    dateEqual,\n    isEnabled\n} from '../utils';\nimport styled from 'styled-components';\nimport { WeekNum, Day } from './day';\n\ninterface MenuTableProps {\n    className?: string;\n    showTime: ReactTimebombState['showTime'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    hoverDate?: ReactTimebombState['hoverDate'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    onSelectDay(date: Date): void;\n    onHoverDays?(dates: Date[]): void;\n    onSubmit(): void;\n}\n\nconst Table = styled.table`\n    width: 100%;\n    height: 186px;\n    font-size: inherit;\n    user-select: none;\n    padding: 5px 10px;\n    box-sizing: border-box;\n\n    td.calendar-week {\n        color: #aaa;\n    }\n\n    th.calendar-week {\n        text-align: left;\n        color: #aaa;\n    }\n\n    tr {\n        th {\n            padding: 3px 2px;\n            width: 14.285714286%;\n        }\n\n        td {\n            width: 14.285714286%;\n        }\n    }\n`;\n\nfunction getSelected(config: {\n    day: Date;\n    value: ReactTimebombDate;\n    selectRange: ReactTimebombProps['selectRange'];\n    hoverDays: Date[];\n    showTime?: boolean;\n}) {\n    const { day, value, hoverDays, showTime, selectRange } = config;\n\n    if (value) {\n        if (selectRange === 'week') {\n            const dayWeekOfYear = getWeekOfYear(day);\n\n            if (isArray(value)) {\n                return value.some(v => getWeekOfYear(v) === dayWeekOfYear);\n            }\n\n            return getWeekOfYear(value) === dayWeekOfYear;\n        }\n\n        if (selectRange && isArray(value)) {\n            const [minDate, maxDate] = value;\n\n            if (value.length === 1 && hoverDays.length) {\n                const firstHover = hoverDays[0];\n                const lastHover = hoverDays[hoverDays.length - 1];\n\n                return isEnabled('day', day, {\n                    minDate: minDate < firstHover ? minDate : firstHover,\n                    maxDate: minDate > lastHover ? minDate : lastHover\n                });\n            }\n\n            if (value.length === 2) {\n                return isEnabled('day', day, {\n                    minDate,\n                    maxDate\n                });\n            }\n        }\n    }\n\n    return dateEqual(value, day, showTime);\n}\n\nexport function MenuTable(props: MenuTableProps) {\n    const {\n        value,\n        showCalendarWeek,\n        selectRange,\n        selectedRange,\n        showConfirm,\n        hoverDate,\n        showTime,\n        onSubmit\n    } = props;\n    const [hoverDays, setHoverDays] = React.useState<Date[]>(\n        getDefaultHoverDays()\n    );\n    const { current: weekdayNames } = React.useRef(getWeekdayNames());\n    const [sun, mon, tue, wed, thu, fri, sat] = weekdayNames;\n    const className = ['month', props.className]\n        .filter(c => Boolean(c))\n        .join(' ');\n\n    const monthMatrix = React.useMemo(() => {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n        const weeks: (Date)[][] = [];\n\n        let base = startOfMonth(date);\n        let week = 0;\n\n        while (\n            startOfWeek(base).getMonth() === dateMonth ||\n            endOfWeek(base).getMonth() === dateMonth\n        ) {\n            const weekStart = startOfWeek(\n                new Date(dateYear, dateMonth, week++ * 7 + 1)\n            );\n\n            weeks.push([\n                weekStart,\n                addDays(weekStart, 1),\n                addDays(weekStart, 2),\n                addDays(weekStart, 3),\n                addDays(weekStart, 4),\n                addDays(weekStart, 5),\n                addDays(weekStart, 6)\n            ]);\n\n            base = addDays(base, 7);\n        }\n\n        return weeks;\n    }, [getCacheKey()]);\n\n    React.useEffect(() => {\n        if (props.onHoverDays) {\n            props.onHoverDays(hoverDays);\n        }\n    }, [hoverDays]);\n\n    function getDefaultHoverDays() {\n        if (!hoverDate) {\n            return [];\n        }\n\n        if (isArray(value)) {\n            return [value[0], hoverDate];\n        }\n\n        return [];\n    }\n\n    function getCacheKey() {\n        const date = getDate(props.date);\n        const dateMonth = date.getMonth();\n        const dateYear = date.getFullYear();\n\n        // cache\n        return `${dateMonth}-${dateYear}`;\n    }\n\n    function getDate(date: ReactTimebombDate) {\n        return (isArray(date) ? date[selectedRange] : date)!;\n    }\n\n    function onSelectDay(date: Date): void {\n        props.onSelectDay(date);\n\n        if (!showConfirm && !selectRange) {\n            onSubmit();\n        }\n    }\n\n    function onDayMouseEnter(day: Date) {\n        if (typeof selectRange === 'number') {\n            const days = Array(selectRange)\n                .fill(null)\n                .map((_, i) => addDays(day, i));\n\n            setHoverDays(days);\n        } else if (selectRange === 'week') {\n            const firstDay = startOfWeek(day);\n            const days = Array(7)\n                .fill(null)\n                .map((_, i) => addDays(firstDay, i));\n\n            setHoverDays(days);\n        } else {\n            setHoverDays([day]);\n        }\n    }\n\n    function onDayMouseLeave() {\n        setHoverDays([]);\n    }\n\n    return (\n        <Table className={className} cellSpacing={0} cellPadding={0}>\n            <thead>\n                <tr>\n                    {showCalendarWeek && <th className=\"calendar-week\" />}\n                    <th>{mon}</th>\n                    <th>{tue}</th>\n                    <th>{wed}</th>\n                    <th>{thu}</th>\n                    <th>{fri}</th>\n                    <th>{sat}</th>\n                    <th>{sun}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {monthMatrix.map(dates => {\n                    const weekNum = getWeekOfYear(dates[0]);\n                    const selectedWeek = dates.map(day =>\n                        getSelected({\n                            day,\n                            value,\n                            selectRange,\n                            hoverDays,\n                            showTime\n                        })\n                    );\n                    const className = selectedWeek.includes(true)\n                        ? 'selected'\n                        : undefined;\n\n                    return (\n                        <tr key={weekNum} className={className}>\n                            {showCalendarWeek && (\n                                <td className=\"calendar-week\">\n                                    <WeekNum\n                                        day={dates[0]}\n                                        onClick={onSelectDay}\n                                    >\n                                        {weekNum}\n                                    </WeekNum>\n                                </td>\n                            )}\n                            {dates.map((day, i) => {\n                                const hover = hoverDays.some(hoverDay =>\n                                    dateEqual(hoverDay, day)\n                                );\n                                const selected = selectedWeek[i];\n                                const className = [\n                                    'day',\n                                    selected && 'selected'\n                                ]\n                                    .filter(c => c)\n                                    .join(' ');\n\n                                return (\n                                    <td\n                                        key={day.toISOString()}\n                                        className={className}\n                                    >\n                                        <Day\n                                            day={day}\n                                            hover={hover}\n                                            selected={selected}\n                                            date={props.date}\n                                            minDate={props.minDate}\n                                            maxDate={props.maxDate}\n                                            showTime={props.showTime}\n                                            onSelectDay={onSelectDay}\n                                            onMouseEnter={onDayMouseEnter}\n                                            onMouseLeave={onDayMouseLeave}\n                                        />\n                                    </td>\n                                );\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </Table>\n    );\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton } from '../components/button';\nimport { ReactTimebombMultiValueProps } from '../typings';\nimport { dateEqual, dateFormat, keys } from '../utils';\nimport {\n    Container,\n    DefaultClearComponent,\n    Flex,\n    Icon,\n    Placeholder\n} from './value';\n\nconst DefaultIcon = () => <Icon className=\"react-timebomb-icon\" icon=\"📅\" />;\n\nconst StyledValue = styled(Value)`\n    > span:after {\n        content: ' – ';\n    }\n\n    > span:last-child:after {\n        content: '';\n    }\n`;\n\nconst HoverSpan = styled.span`\n    opacity: 0.5;\n`;\n\nfunction Value(props: ReactTimebombMultiValueProps) {\n    const { value, className } = props;\n    const LabelComponent = props.labelComponent;\n\n    const onClickDate = (e: React.SyntheticEvent<HTMLSpanElement>) => {\n        if (props.selectRange === true) {\n            const { currentTarget } = e;\n\n            setTimeout(() => {\n                const date = new Date(\n                    currentTarget.getAttribute('data-date') || 0\n                );\n                const index = parseInt(\n                    currentTarget.getAttribute('data-index') || '0',\n                    10\n                );\n\n                props.onValueSelect(date, index);\n            }, 0);\n        } else if (props.onToggle) {\n            props.onToggle();\n        }\n    };\n\n    const content = (() => {\n        if (!value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...props} />;\n        }\n\n        if (value.length === 1) {\n            return <span>{dateFormat(value[0], props.format)}</span>;\n        }\n\n        return (\n            <>\n                {value.map((d, i) => {\n                    const str = dateFormat(d, props.format);\n\n                    if (dateEqual(d, props.hoverDate)) {\n                        return (\n                            <HoverSpan key={i} onClick={props.onToggle}>\n                                {str}\n                            </HoverSpan>\n                        );\n                    } else {\n                        return (\n                            <span\n                                key={i}\n                                data-index={i}\n                                data-date={d.toDateString()}\n                                onClick={onClickDate}\n                            >\n                                {str}\n                            </span>\n                        );\n                    }\n                })}\n            </>\n        );\n    })();\n\n    return <div className={className}>{content}</div>;\n}\n\nexport const ValueMulti = React.forwardRef(\n    (props: ReactTimebombMultiValueProps, ref: React.Ref<HTMLDivElement>) => {\n        const {\n            placeholder,\n            value,\n            open,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            onToggle\n        } = props;\n        const ArrowButtonComp = props.arrowButtonComponent || ArrowButton;\n        const ClearComponent = props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !value;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        React.useEffect(() => {\n            document.body.addEventListener('keyup', onKeyUp);\n\n            return () => {\n                document.body.removeEventListener('keyup', onKeyUp);\n            };\n        }, []);\n\n        function onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n            e.stopPropagation();\n\n            props.onClear();\n        }\n\n        function onKeyUp(e: KeyboardEvent) {\n            switch (e.keyCode) {\n                case keys.ESC:\n                    if (open && onToggle) {\n                        onToggle();\n                    }\n                    break;\n            }\n        }\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                ref={ref}\n                onClick={value || disabled ? undefined : onToggle}\n            >\n                <Flex>\n                    {IconComponent && <IconComponent />}\n                    <Flex>\n                        <StyledValue {...props} />\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearComponent disabled={disabled} onClick={onClear} />\n                    )}\n                    <ArrowButtonComp\n                        id={arrowButtonId}\n                        disabled={disabled}\n                        open={open}\n                        onClick={disabled ? undefined : onToggle}\n                    />\n                </Flex>\n            </Container>\n        );\n    }\n);\n","import { ArrowButtonProps } from './components/button';\n\nexport type ReactTimebombDate = undefined | Date | Date[];\n\ntype ReactComponent<P = {}> =\n    | React.ComponentClass<P>\n    | React.StatelessComponent<P>;\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectRange?: 'week' | number | boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: any;\n    mobile?: boolean;\n    arrowButtonId?: string;\n    arrowButtonComponent?: ReactComponent<ArrowButtonProps>;\n    clearComponent?: ReactComponent<ClearComponentProps>;\n    iconComponent?: ReactComponent<IconProps> | null;\n    labelComponent?: ReactComponent<\n        ReactTimebombValueProps | ReactTimebombMultiValueProps\n    >;\n    confirmComponent?: ReactComponent<ReactTimebombMenuProps>;\n    timeStep?: number;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode?: FormatType;\n    showDate?: boolean;\n    showTime?: boolean;\n    preventClose?: boolean;\n    selectedRange: number;\n    menuHeight?: 'auto';\n    hoverDate?: Date;\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\nexport type FormatType =\n    | 'day'\n    | 'month'\n    | 'year'\n    | 'hour'\n    | 'minute'\n    | 'second';\n\nexport interface ReactTimebombValueProps {\n    className?: string;\n    innerRef?: React.Ref<HTMLDivElement>;\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    clearComponent: ReactTimebombProps['clearComponent'];\n    arrowButtonId: ReactTimebombProps['arrowButtonId'];\n    iconComponent: ReactTimebombProps['iconComponent'];\n    labelComponent: ReactTimebombProps['labelComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    timeStep: ReactTimebombProps['timeStep'];\n    hoverDate: ReactTimebombState['hoverDate'];\n    selectRange: ReactTimebombProps['selectRange'];\n    onToggle?(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\nexport type ReactTimebombMultiValueProps = Omit<\n    ReactTimebombValueProps,\n    'value'\n> & {\n    value: undefined | Date[];\n    onValueSelect(date: Date, index: number): void;\n};\n\nexport interface ReactTimebombMenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    timeStep: ReactTimebombProps['timeStep'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    confirmComponent: ReactTimebombProps['confirmComponent'];\n    hoverDate: ReactTimebombState['hoverDate'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    /** month was selected, value will change to `date` */\n    onSelectMonth(date: Date): void;\n    /** month was selected but value will not change to `date` */\n    onChangeMonth(date: Date): void;\n    onSelectTime(date: Date, mode: FormatType): void;\n    onSubmitTime(date: Date | undefined, mode: FormatType): void;\n    onHoverDays(dates: Date[]): void;\n    onSubmit(): void;\n}\n\nexport interface IconProps {\n    showDate?: boolean;\n    showTime?: boolean;\n}\n\nexport interface ClearComponentProps {\n    disabled?: boolean;\n    onClick(e: React.MouseEvent<HTMLButtonElement>): void;\n}\n\nexport { ClearComponentProps as ReactTimebombClearComponentProps };\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n"]}