{"version":3,"sources":["src/index.tsx","src/components/button.tsx","src/value/value.tsx","src/value/value-multi.tsx","src/typings.ts"],"names":["React","$fsx","r","styled_components_1","react_slct_1","menu_1","title_1","value_1","utils_1","value_multi_1","__export","Container","default","div","MenuWrapper","props","mobile","css","BlindInput","input","ReactTimebomb","Component","[object Object]","super","this","valueRef","createRef","emitChange","timeout","date","clearTimeout","setTimeout","__awaiter","value","onChange","dateEqual","isArray","setStateAsync","allowValidation","Boolean","preventClose","minDate","maxDate","isBefore","console","error","state","initialState","onChangeValueText","bind","emitChangeAndClose","onSelectDay","onModeDay","onModeYear","onModeMonth","onSelectMonth","onChangeMonth","onSelectYear","onReset","onNextMonth","onPrevMonth","onSelectTime","onSubmitOrCancelTime","onClose","onClear","onChangeFormatGroup","onHoverDays","onMultiValueSelect","onMobileMenuContainerClick","format","startOfDay","undefined","endOfDay","showTime","isTimeFormat","showDate","isDateFormat","MenuContainer","MobileMenuContainer","className","classNames","push","disabled","join","defaultDateValue","Date","isAfter","mode","getFormatType","valueText","dateFormat","hoverDate","menuHeight","selectedRange","prevProps","prevState","selectRange","showConfirm","setState","stringEqual","result","validateValueText","emitError","rangeIsComplete","length","Promise","resolve","validDate","validateDate","some","d","isEnabled","isUndefined","placeholder","showCalendarWeek","timeStep","confirmComponent","onOpen","menuWidth","Math","max","MENU_WIDTH","menuLeft","current","getBoundingClientRect","left","width","createElement","Select","open","onToggle","onRef","showMenu","onClick","onCloseMenu","onOpenMenu","getMobileMenuContainer","ref","renderValue","MenuTitle","onMonth","onYear","Menu","onSubmitTime","onSubmit","type","onFocus","iconComponent","arrowButtonComponent","arrowButtonId","clearComponent","labelComponent","isMulti","ValueComponent","ValueMulti","Value","componentValue","sort","a","b","getTime","onAllSelect","onValueSelect","clearSelection","onError","newDate","index","Object","assign","valueText0","date0","day","valueDate","startOfWeek","endOfWeek","addDays","setDate","getHours","getMinutes","dateArr","getSelectedRange","sortDates","currentDate","setMonth","getMonth","time","commit","map","e","target","HTMLDivElement","classList","contains","defaultProps","exports","StyledButton","button","selected","Button","data-react-timebomb-selectable","data-role","SmallButton","ArrowButton","id","tabIndex","button_1","Flex","Input","span","ClearButton","ClearButtonX","Placeholder","Icon","icon","DefaultIcon","getIconClass","getIcon","DefaultClearComponent","META_KEYS","keys","BACKSPACE","DELETE","TAB","FORBIDDEN_KEYS","SHIFT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","PureComponent","inputs","currentTarget","selectElement","allSelected","formatGroup","getAttribute","onSearchRef","onKeyDown","onKeyUp","onDblClick","onBlur","formatGroups","split","reduce","memo","char","prevChar","substr","formatSplitExpr","test","focused","document","querySelector","hasFocus","inp","allowTextSelection","parts","splitDate","forEach","i","innerText","focus","find","el","forceUpdate","ArrowButtonComp","ClearComponent","showPlaceholder","showClearer","timeOnly","IconComponent","innerRef","LabelComponent","contentEditable","group","g","separator","hasFormatType","data-placeholder","data-separator","replaceSpaceWithNbsp","key","data-group","onDoubleClick","nextSibling","previousSibling","numericFormat","formatIsActualNumber","sel","getSelection","hasSelection","focusOffset","anchorOffset","numericValue","parseInt","keyCode","ENTER","ESC","DOT","COMMA","preventDefault","HTMLSpanElement","isArrowUp","isNaN","isFinite","formatType","direction","manipulateDate","dateParts","add","nextValue","valid","validateFormatGroup","formatNumber","joinDates","stringFromCharCode","groupValue","includes","metaKey","ctrlKey","firstInput","validatedChar","blur","parentNode","dataGroup","filledValue","fillZero","stopPropagation","forwardRef","StyledValue","onClickDate","content","Fragment","str","HoverSpan","data-index","data-date","toDateString","useEffect","body","addEventListener","removeEventListener","ReactTimebombArrowButtonProps","ArrowButtonProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Select } from 'react-slct';\nimport { MenuContainerProps } from 'react-slct/dist/typings';\nimport { Menu } from './menu';\nimport { MenuTitle } from './menu/title';\nimport { Value } from './value/value';\nimport {\n    isUndefined,\n    startOfDay,\n    isEnabled,\n    dateFormat,\n    validateDate,\n    setDate,\n    clearSelection,\n    endOfDay,\n    isBefore,\n    isAfter,\n    dateEqual,\n    startOfWeek,\n    endOfWeek,\n    sortDates,\n    isDateFormat,\n    isTimeFormat,\n    isArray,\n    getFormatType,\n    addDays,\n    stringEqual\n} from './utils';\nimport {\n    ReactTimebombProps,\n    ReactTimebombState,\n    ReactTimebombError,\n    ReactTimebombDate,\n    FormatType\n} from './typings';\nimport { ValueMulti } from './value/value-multi';\n\nexport * from './typings';\n\ninterface MenuWrapperProps {\n    mobile?: boolean;\n}\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #fff;\n`;\n\nconst MenuWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    padding: 0;\n    background: white;\n    z-index: 1;\n    height: 100%;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 13px;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    ${(props: MenuWrapperProps) =>\n        props.mobile\n            ? css`\n                  position: fixed;\n                  left: 50% !important;\n                  top: 50% !important;\n                  max-width: 96%;\n                  width: 360px !important;\n                  height: 320px !important;\n                  margin-left: -180px;\n                  margin-top: -160px;\n                  max-height: 100%;\n                  font-size: 16px;\n                  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n\n                  @media (max-width: 360px) {\n                      width: 100% !important;\n                      left: 0 !important;\n                      margin-left: 0;\n                      max-width: 100%;\n                  }\n              `\n            : ''}\n`;\n\nconst BlindInput = styled.input`\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    pointer-events: none;\n`;\n\nexport class ReactTimebomb extends React.Component<\n    ReactTimebombProps,\n    ReactTimebombState\n> {\n    public static MENU_WIDTH = 320;\n\n    private onToggle?: () => void;\n    private onCloseMenu?: () => void;\n    private onOpenMenu?: () => void;\n    private MobileMenuContainer?: React.ComponentType<MenuContainerProps>;\n    private valueRef = React.createRef<HTMLDivElement>();\n\n    /** @internal */\n    public static getDerivedStateFromProps(\n        props: ReactTimebombProps\n    ): Partial<ReactTimebombState> | null {\n        const format = props.format!;\n        const { minDate, maxDate } = props;\n\n        return {\n            minDate: minDate ? startOfDay(minDate) : undefined,\n            maxDate: maxDate ? endOfDay(maxDate) : undefined,\n            showTime: isTimeFormat(format),\n            showDate: isDateFormat(format)\n        };\n    }\n\n    /** @internal */\n    public static defaultProps: Partial<ReactTimebombProps> = {\n        format: 'YYYY-MM-DD'\n    };\n\n    private getMobileMenuContainer(\n        MenuContainer: React.ComponentType<MenuContainerProps>\n    ) {\n        if (!this.MobileMenuContainer) {\n            this.MobileMenuContainer = styled(MenuContainer)`\n                position: fixed;\n                left: 0 !important;\n                top: 0 !important;\n                right: 0 !important;\n                bottom: 0 !important;\n                width: 100% !important;\n                height: 100% !important;\n                background: rgba(0, 0, 0, 0.12);\n                transform: none;\n            ` as any;\n        }\n\n        return this.MobileMenuContainer!;\n    }\n\n    private get className() {\n        const classNames = ['react-timebomb'];\n\n        if (this.props.className) {\n            classNames.push(this.props.className);\n        }\n\n        if (this.props.error) {\n            classNames.push('error');\n        }\n\n        if (this.props.disabled) {\n            classNames.push('disabled');\n        }\n\n        return classNames.join(' ');\n    }\n\n    private get defaultDateValue() {\n        const { value, minDate, maxDate } = this.props;\n\n        if (value) {\n            return value;\n        }\n\n        let date = new Date();\n\n        if (maxDate && isBefore(maxDate, date)) {\n            date = maxDate;\n        } else if (minDate && isAfter(minDate, date)) {\n            date = minDate;\n        }\n\n        return startOfDay(date);\n    }\n\n    private get initialState(): ReactTimebombState {\n        return {\n            allowValidation: false,\n            mode: getFormatType(this.props.format!),\n            valueText: this.props.value\n                ? dateFormat(this.props.value, this.props.format!)\n                : undefined,\n            date: this.defaultDateValue,\n            hoverDate: undefined,\n            menuHeight: undefined,\n            selectedRange: 0,\n            preventClose: false\n        };\n    }\n\n    constructor(props: ReactTimebombProps) {\n        super(props);\n\n        const { minDate, maxDate } = props;\n\n        if (minDate && maxDate && isBefore(maxDate, minDate)) {\n            console.error(\n                '[react-timebomb]: minDate must appear before maxDate'\n            );\n        }\n\n        this.state = this.initialState;\n\n        this.onChangeValueText = this.onChangeValueText.bind(this);\n        this.emitChangeAndClose = this.emitChangeAndClose.bind(this);\n        this.onSelectDay = this.onSelectDay.bind(this);\n        this.onModeDay = this.onModeDay.bind(this);\n        this.onModeYear = this.onModeYear.bind(this);\n        this.onModeMonth = this.onModeMonth.bind(this);\n        this.onSelectMonth = this.onSelectMonth.bind(this);\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.onSelectYear = this.onSelectYear.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onNextMonth = this.onNextMonth.bind(this);\n        this.onPrevMonth = this.onPrevMonth.bind(this);\n        this.onSelectTime = this.onSelectTime.bind(this);\n        this.onSubmitOrCancelTime = this.onSubmitOrCancelTime.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onChangeFormatGroup = this.onChangeFormatGroup.bind(this);\n        this.onHoverDays = this.onHoverDays.bind(this);\n        this.onMultiValueSelect = this.onMultiValueSelect.bind(this);\n        this.onMobileMenuContainerClick = this.onMobileMenuContainerClick.bind(\n            this\n        );\n    }\n\n    public async componentDidUpdate(\n        prevProps: ReactTimebombProps,\n        prevState: ReactTimebombState\n    ) {\n        const { valueText, showDate, showTime, preventClose } = this.state;\n        const { value, format, selectRange, showConfirm } = this.props;\n\n        if (prevProps.format !== format || prevProps.value !== value) {\n            this.setState({\n                valueText: value ? dateFormat(value, format!) : undefined\n            });\n        }\n\n        if (!stringEqual(prevState.valueText, valueText)) {\n            const result = await this.validateValueText();\n\n            if (result.error) {\n                this.emitError(result.error, result.valueText);\n            }\n\n            if (result.date) {\n                const rangeIsComplete =\n                    selectRange &&\n                    isArray(result.date) &&\n                    result.date.length === 2;\n\n                if (\n                    (!showConfirm && !selectRange && showDate) ||\n                    rangeIsComplete\n                ) {\n                    if (prevState.mode === 'day' && !preventClose) {\n                        this.emitChangeAndClose(result.date);\n                    } else {\n                        this.emitChange(result.date);\n                    }\n                }\n\n                if (!showDate && showTime) {\n                    this.emitChange(result.date);\n                }\n            }\n        }\n    }\n\n    private setStateAsync<K extends keyof ReactTimebombState>(\n        state:\n            | ((\n                  prevState: Readonly<ReactTimebombState>,\n                  props: Readonly<ReactTimebombProps>\n              ) => Pick<ReactTimebombState, K> | ReactTimebombState | null)\n            | (Pick<ReactTimebombState, K> | ReactTimebombState | null)\n    ) {\n        return new Promise(resolve => {\n            this.setState(state, resolve);\n        });\n    }\n\n    private validateValueText(): Promise<{\n        date?: ReactTimebombDate;\n        error?: ReactTimebombError;\n        valueText?: string | string[];\n    }> {\n        const { valueText, allowValidation } = this.state;\n        const { format } = this.props;\n        const validDate = validateDate(valueText, format!);\n\n        return new Promise(async resolve => {\n            if (validDate) {\n                await this.setStateAsync({ allowValidation: true });\n\n                const enabled = isArray(validDate)\n                    ? validDate.some(d => isEnabled('day', d, this.props))\n                    : isEnabled('day', validDate, this.props);\n\n                if (enabled) {\n                    await this.setStateAsync({ date: validDate });\n\n                    resolve({ date: validDate });\n                } else {\n                    resolve({ error: 'outOfRange', valueText });\n                }\n            } else if (valueText) {\n                resolve({ error: 'invalidDate', valueText });\n            } else if (!isUndefined(valueText) && allowValidation) {\n                resolve({ date: undefined });\n            }\n        });\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            showConfirm,\n            showCalendarWeek,\n            selectRange,\n            format,\n            error,\n            disabled,\n            mobile,\n            timeStep,\n            confirmComponent,\n            onOpen\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            valueText,\n            mode,\n            selectedRange,\n            minDate,\n            maxDate\n        } = this.state;\n        const value = valueText\n            ? validateDate(valueText, format!)\n            : this.props.value;\n        const menuWidth = Math.max(\n            ReactTimebomb.MENU_WIDTH,\n            this.props.menuWidth || 0\n        );\n        const menuLeft =\n            isArray(value) &&\n            value.length === 1 &&\n            this.valueRef.current &&\n            selectRange === true\n                ? this.valueRef.current.getBoundingClientRect().left +\n                  this.valueRef.current.getBoundingClientRect().width -\n                  menuWidth\n                : undefined;\n\n        return (\n            <Select<ReactTimebombDate>\n                value={value}\n                placeholder={placeholder}\n                error={error}\n                onOpen={onOpen}\n                onClose={this.onClose}\n            >\n                {({\n                    placeholder,\n                    open,\n                    onToggle,\n                    onClose,\n                    onOpen,\n                    onRef,\n                    MenuContainer\n                }) => {\n                    const showMenu =\n                        open && (showDate || showTime) && !disabled;\n                    const className = [this.className];\n                    const onClick = mobile\n                        ? this.onMobileMenuContainerClick\n                        : undefined;\n\n                    if (showMenu) {\n                        className.push('open');\n                    }\n\n                    this.onToggle = onToggle;\n                    this.onCloseMenu = onClose;\n                    this.onOpenMenu = onOpen;\n\n                    if (mobile) {\n                        MenuContainer = this.getMobileMenuContainer(\n                            MenuContainer\n                        );\n                    }\n\n                    return (\n                        <Container ref={onRef} className={className.join(' ')}>\n                            {this.renderValue(value, placeholder, open)}\n                            {showMenu ? (\n                                <MenuContainer\n                                    menuLeft={menuLeft}\n                                    menuWidth={menuWidth}\n                                    menuHeight={this.state.menuHeight}\n                                    onClick={onClick}\n                                >\n                                    <MenuWrapper\n                                        className=\"react-timebomb-menu\"\n                                        mobile={mobile}\n                                    >\n                                        <MenuTitle\n                                            mode={mode}\n                                            mobile={mobile}\n                                            date={this.state.date}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            onMonth={this.onModeMonth}\n                                            onYear={this.onModeYear}\n                                            onNextMonth={this.onNextMonth}\n                                            onPrevMonth={this.onPrevMonth}\n                                            onReset={this.onReset}\n                                        />\n                                        <Menu\n                                            showTime={showTime}\n                                            showDate={showDate}\n                                            showConfirm={showConfirm}\n                                            showCalendarWeek={showCalendarWeek}\n                                            selectRange={selectRange}\n                                            timeStep={timeStep}\n                                            date={this.state.date}\n                                            value={value}\n                                            valueText={valueText}\n                                            format={format!}\n                                            mode={mode}\n                                            mobile={mobile}\n                                            minDate={minDate}\n                                            maxDate={maxDate}\n                                            selectedRange={selectedRange}\n                                            confirmComponent={confirmComponent}\n                                            onHoverDays={this.onHoverDays}\n                                            onSelectDay={this.onSelectDay}\n                                            onSelectMonth={this.onSelectMonth}\n                                            onChangeMonth={this.onChangeMonth}\n                                            onSelectYear={this.onSelectYear}\n                                            onSelectTime={this.onSelectTime}\n                                            onSubmitTime={\n                                                this.onSubmitOrCancelTime\n                                            }\n                                            onSubmit={this.emitChangeAndClose}\n                                        />\n                                    </MenuWrapper>\n                                </MenuContainer>\n                            ) : (\n                                <BlindInput type=\"text\" onFocus={onToggle} />\n                            )}\n                        </Container>\n                    );\n                }}\n            </Select>\n        );\n    }\n\n    private renderValue(\n        value: ReactTimebombDate,\n        placeholder?: string,\n        open?: boolean\n    ) {\n        const {\n            minDate,\n            maxDate,\n            disabled,\n            format,\n            selectRange,\n            mobile,\n            timeStep,\n            iconComponent,\n            arrowButtonComponent,\n            arrowButtonId,\n            clearComponent,\n            labelComponent\n        } = this.props;\n        const {\n            showDate,\n            showTime,\n            allowValidation,\n            mode,\n            hoverDate\n        } = this.state;\n        const isMulti = selectRange || isArray(value);\n        const ValueComponent = isMulti ? ValueMulti : Value;\n\n        let componentValue = isMulti\n            ? value\n                ? isArray(value)\n                    ? value\n                    : [value]\n                : undefined\n            : value;\n\n        if (\n            isArray(componentValue) &&\n            componentValue.length === 1 &&\n            hoverDate\n        ) {\n            componentValue = [...componentValue, hoverDate].sort(\n                (a, b) => a.getTime() - b.getTime()\n            );\n        }\n\n        placeholder = open && !isMulti ? undefined : placeholder;\n\n        return (\n            <ValueComponent\n                ref={this.valueRef}\n                mode={mode}\n                disabled={disabled}\n                mobile={mobile}\n                placeholder={placeholder}\n                format={format!}\n                value={componentValue as any}\n                hoverDate={hoverDate}\n                minDate={minDate}\n                maxDate={maxDate}\n                allowValidation={allowValidation}\n                open={open}\n                showDate={showDate}\n                showTime={showTime}\n                timeStep={timeStep}\n                iconComponent={iconComponent}\n                arrowButtonId={arrowButtonId}\n                arrowButtonComponent={arrowButtonComponent}\n                clearComponent={clearComponent}\n                labelComponent={labelComponent}\n                onClear={this.onClear}\n                onChangeValueText={this.onChangeValueText}\n                onChangeFormatGroup={this.onChangeFormatGroup}\n                onToggle={this.onToggle}\n                onSubmit={this.emitChangeAndClose}\n                onAllSelect={this.onModeDay}\n                onValueSelect={this.onMultiValueSelect}\n            />\n        );\n    }\n\n    private onClose() {\n        clearSelection();\n\n        // get rid of this timeout\n        // fixme\n        setTimeout(async () => {\n            clearSelection();\n\n            await this.setStateAsync(this.initialState);\n\n            if (this.props.onClose) {\n                this.props.onClose();\n            }\n        }, 16);\n    }\n\n    private async emitError(\n        error: ReactTimebombError,\n        value: ReactTimebombState['valueText']\n    ) {\n        if (this.state.allowValidation) {\n            await this.setStateAsync({ allowValidation: false });\n\n            if (this.props.onError) {\n                this.props.onError(error, value);\n            }\n        }\n    }\n\n    private emitChange = (() => {\n        let timeout = 0;\n\n        return (date: ReactTimebombDate) => {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(async () => {\n                const { value, onChange } = this.props;\n\n                if (dateEqual(value, date)) {\n                    return;\n                }\n\n                const changeDate = isArray(date) ? date : [date];\n\n                onChange(...changeDate);\n\n                await this.setStateAsync({\n                    allowValidation: Boolean(date),\n                    preventClose: false\n                });\n            }, 0);\n        };\n    })();\n\n    private async emitChangeAndClose(newDate?: ReactTimebombDate) {\n        if (this.onCloseMenu) {\n            this.onCloseMenu();\n        }\n        clearSelection();\n\n        const { date } = newDate\n            ? { date: newDate }\n            : await this.validateValueText();\n\n        if (date) {\n            this.emitChange(date);\n        }\n    }\n\n    private getSelectedRange(date: ReactTimebombDate) {\n        if (isArray(date)) {\n            if (date.length === 2) {\n                if (date[0] > date[1]) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else if (date.length === 1) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n\n        return this.state.selectedRange;\n    }\n\n    private async onClear() {\n        await this.setStateAsync({ valueText: undefined });\n\n        this.emitChange(undefined);\n    }\n\n    private onChangeValueText(valueText: string | undefined): void {\n        this.setState({ valueText, preventClose: true });\n    }\n\n    private async onChangeFormatGroup(format?: string) {\n        await this.setStateAsync({\n            menuHeight: 'auto',\n            mode: format ? getFormatType(format) : undefined\n        });\n    }\n\n    private onHoverDays([hoverDate]: (Date | undefined)[]) {\n        if (\n            isArray(this.state.valueText) &&\n            isArray(this.state.date) &&\n            this.state.valueText.length === 1 &&\n            this.state.date.length === 1 &&\n            hoverDate\n        ) {\n            this.setState({ hoverDate });\n        }\n    }\n\n    private async onMultiValueSelect(date: Date, index: number) {\n        if (index === 0) {\n            await this.setStateAsync({ ...this.initialState, hoverDate: date });\n        }\n\n        if (\n            index === 1 &&\n            isArray(this.state.valueText) &&\n            isArray(this.state.date)\n        ) {\n            const [valueText0] = this.state.valueText;\n            const [date0] = this.state.date;\n\n            await this.setStateAsync({\n                ...this.initialState,\n                valueText: [valueText0],\n                date: [date0],\n                hoverDate: date\n            });\n        }\n\n        // since closing of the menu is delayed (16ms), we need to deplay the opening as well\n        // fixme\n        setTimeout(async () => {\n            if (this.onOpenMenu) {\n                this.onOpenMenu();\n            }\n\n            await this.setStateAsync({ hoverDate: date });\n        }, 32);\n    }\n\n    private onSelectDay(day: Date): void {\n        const { value, selectRange } = this.props;\n        const format = this.props.format!;\n\n        const valueDate = (() => {\n            if (value instanceof Date) {\n                return value;\n            }\n\n            if (isArray(value)) {\n                return value[0];\n            }\n\n            return day;\n        })();\n\n        if (selectRange === 'week') {\n            const date = [startOfWeek(day), endOfWeek(day)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (typeof selectRange === 'number') {\n            const date = [day, addDays(day, selectRange - 1)];\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        } else if (selectRange === true) {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const dateArr =\n                isArray(this.state.valueText) &&\n                this.state.valueText.length === 1\n                    ? [\n                          validateDate(this.state.valueText[0], format) as Date,\n                          date\n                      ]\n                    : [date];\n\n            const selectedRange = this.getSelectedRange(dateArr);\n            const valueText = dateFormat(dateArr.sort(sortDates), format);\n\n            this.setState({\n                date: dateArr,\n                valueText,\n                selectedRange,\n                hoverDate: undefined\n            });\n        } else {\n            const date = setDate(\n                day,\n                valueDate.getHours(),\n                valueDate.getMinutes()\n            );\n            const valueText = dateFormat(date, format);\n\n            this.setState({ date, valueText, hoverDate: undefined });\n        }\n    }\n\n    private onModeDay() {\n        this.setState({ mode: 'day' });\n    }\n\n    private onModeYear() {\n        this.setState({ mode: 'year' });\n    }\n\n    private onModeMonth() {\n        this.setState({ mode: 'month' });\n    }\n\n    private onSelectMonth(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onChangeMonth(date: Date) {\n        this.setState({ date, mode: 'day' });\n    }\n\n    private onSelectYear(date: Date) {\n        this.onSelectDay(date);\n        this.setState({ mode: 'day' });\n    }\n\n    private onReset(): void {\n        this.setState({ date: this.defaultDateValue });\n    }\n\n    private onNextMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() + 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private onPrevMonth(): void {\n        const currentDate = isArray(this.state.date)\n            ? this.state.date[this.state.selectedRange]\n            : this.state.date;\n\n        if (currentDate) {\n            const date = new Date(currentDate);\n\n            date.setMonth(date.getMonth() - 1);\n\n            this.setState({ date });\n        }\n    }\n\n    private async onSelectTime(time: Date, mode: FormatType, commit = false) {\n        const format = this.props.format!;\n        const value = this.props.value || new Date();\n\n        const newDate = isArray(value)\n            ? value.map(d => setDate(d, time.getHours(), time.getMinutes()))\n            : setDate(value, time.getHours(), time.getMinutes());\n\n        const valueText = dateFormat(newDate, format);\n\n        await this.setStateAsync({ mode, valueText });\n\n        if (commit) {\n            this.emitChange(newDate);\n        }\n    }\n\n    private onSubmitOrCancelTime(time: Date | undefined, mode: FormatType) {\n        if (time) {\n            this.onSelectTime(time, mode, true);\n        }\n\n        if (this.onToggle) {\n            this.onToggle();\n        }\n    }\n\n    private onMobileMenuContainerClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (\n            e.target instanceof HTMLDivElement &&\n            e.target.classList.contains('react-slct-menu')\n        ) {\n            if (this.onToggle) {\n                this.onToggle();\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport styled, { css } from 'styled-components';\n\nexport interface ButtonProps {\n    selected?: boolean;\n    mobile?: boolean;\n}\n\nconst StyledButton = styled.button`\n    margin-right: 5px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n    padding: 3px 6px;\n    height: 21px;\n    box-sizing: border-box;\n    background: ${(props: ButtonProps) => (props.selected ? '#ccc' : '#fff')};\n\n    ${(props: ButtonProps) =>\n        props.mobile\n            ? css`\n                  font-size: 16px;\n                  margin-right: 6px;\n                  padding: 6px 12px;\n                  height: auto;\n                  min-height: 21px;\n              `\n            : ''}\n\n    &:focus {\n        outline: none;\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    &:not(:disabled) {\n        cursor: pointer;\n    }\n\n    &:not(:disabled):hover {\n        background-color: ${(props: ButtonProps) =>\n            props.selected ? '#ccc' : '#efefef'};\n    }\n\n    &:last-child {\n        margin-right: 0;\n    }\n`;\n\nexport const Button = (props: ButtonProps & React.ButtonHTMLAttributes<{}>) => (\n    <StyledButton\n        data-react-timebomb-selectable\n        data-role=\"button\"\n        type=\"button\"\n        {...props}\n    />\n);\n\nexport const SmallButton = styled(Button)`\n    font-size: 13px;\n    color: #ccc;\n    cursor: pointer;\n    border: none;\n    line-height: 1;\n\n    &:hover:not(:disabled) {\n        color: #333;\n    }\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport interface ArrowButtonProps {\n    open?: boolean;\n    disabled?: boolean;\n    id?: string;\n    onClick?(): void;\n}\n\nexport const ArrowButton = (props: ArrowButtonProps) => (\n    <SmallButton\n        className=\"react-timebomb-arrow\"\n        id={props.id}\n        disabled={props.disabled}\n        tabIndex={-1}\n        onClick={props.onClick}\n    >\n        {props.open ? '▲' : '▼'}\n    </SmallButton>\n);\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton, SmallButton } from '../components/button';\nimport {\n    ClearComponentProps,\n    IconProps,\n    ReactTimebombValueProps\n} from '../typings';\nimport {\n    clearSelection,\n    fillZero,\n    formatIsActualNumber,\n    formatNumber,\n    formatSplitExpr,\n    getAttribute,\n    getFormatType,\n    isEnabled,\n    joinDates,\n    keys,\n    manipulateDate,\n    replaceSpaceWithNbsp,\n    selectElement,\n    splitDate,\n    stringFromCharCode,\n    validateFormatGroup\n} from '../utils';\n\ninterface ValueState {\n    allSelected?: boolean;\n}\n\ninterface InputProps {\n    disabled?: boolean;\n}\n\nexport const Flex = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    position: relative;\n    line-height: 1;\n`;\n\nexport const Container = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    cursor: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'not-allowed' : 'pointer'};\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n`;\n\nconst Input = styled.span`\n    padding: 2px 0 2px 0;\n    min-width: 1px;\n    cursor: ${(props: InputProps) => (props.disabled ? 'not-allowed' : 'text')};\n    pointer-events: ${(props: InputProps) =>\n        props.disabled ? 'none' : 'auto'};\n\n    &:focus {\n        outline: none;\n    }\n\n    &:last-of-type {\n        padding: 2px 10px 2px 0;\n    }\n\n    &:not(:last-of-type):after {\n        content: attr(data-separator);\n        min-width: 4px;\n        display: inline-block;\n    }\n\n    &:empty:before {\n        content: attr(data-placeholder);\n        color: #aaa;\n    }\n\n    &:empty:not(:last-of-type):after {\n        color: #aaa;\n    }\n\n    &:not([contenteditable='true']) {\n        user-select: none;\n    }\n`;\n\nexport const ClearButton = styled(SmallButton)`\n    font-size: 18px;\n`;\n\nconst ClearButtonX = styled.span`\n    position: relative;\n    left: -1px;\n    top: -2px;\n`;\n\nexport const Placeholder = styled.span`\n    color: #aaa;\n    user-select: none;\n`;\n\nexport const Icon = styled.span`\n    margin-right: 5px;\n    user-select: none;\n\n    &:after {\n        content: '${(props: { icon: string }) => props.icon}';\n    }\n`;\n\nconst DefaultIcon = (props: IconProps) => {\n    function getIconClass(): 'time' | 'calendar' {\n        const { showTime, showDate } = props;\n\n        if (!showDate && showTime) {\n            return 'time';\n        }\n\n        return 'calendar';\n    }\n\n    function getIcon() {\n        switch (getIconClass()) {\n            case 'calendar':\n                return '📅';\n            case 'time':\n                return '⏱';\n        }\n    }\n\n    return (\n        <Icon\n            icon={getIcon()}\n            className={`react-timebomb-icon ${getIconClass()}`}\n        />\n    );\n};\n\nexport const DefaultClearComponent = (props: ClearComponentProps) => (\n    <ClearButton\n        className=\"react-timebomb-clearer\"\n        tabIndex={-1}\n        disabled={props.disabled}\n        onClick={props.onClick}\n    >\n        <ClearButtonX>×</ClearButtonX>\n    </ClearButton>\n);\n\nconst META_KEYS = [keys.BACKSPACE, keys.DELETE, keys.TAB];\n\nconst FORBIDDEN_KEYS = [\n    keys.SHIFT,\n    keys.ARROW_LEFT,\n    keys.ARROW_RIGHT,\n    keys.ARROW_UP,\n    keys.ARROW_DOWN,\n    keys.TAB\n];\n\nclass ValueComponent extends React.PureComponent<\n    ReactTimebombValueProps,\n    ValueState\n> {\n    private inputs: HTMLSpanElement[] = [];\n\n    private get formatGroups(): string[] {\n        return this.props.format.split('').reduce(\n            (memo, char) => {\n                const prevChar = memo[memo.length - 1];\n\n                if (\n                    (prevChar && char === prevChar.substr(0, 1)) ||\n                    (formatSplitExpr.test(prevChar) &&\n                        formatSplitExpr.test(char))\n                ) {\n                    memo[memo.length - 1] += char;\n                } else {\n                    memo = [...memo, char];\n                }\n\n                return memo;\n            },\n            [] as string[]\n        );\n    }\n\n    private get focused(): HTMLElement | null {\n        return document.querySelector(':focus');\n    }\n\n    constructor(props: ReactTimebombValueProps) {\n        super(props);\n\n        this.state = {};\n\n        this.onSearchRef = this.onSearchRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onDblClick = this.onDblClick.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: ReactTimebombValueProps): void {\n        setTimeout(() => {\n            const { open, value, format, mode, allowValidation } = this.props;\n            const hasFocus = this.inputs.some(inp => inp === this.focused);\n            const allowTextSelection =\n                mode === 'day' || mode === 'month' || mode === 'year';\n\n            if (!hasFocus) {\n                if (open) {\n                    if (prevProps.value !== value && value) {\n                        const parts = splitDate(value, format);\n                        const input = this.inputs[0];\n\n                        this.inputs.forEach(\n                            (input, i) => (input.innerText = parts[i])\n                        );\n\n                        if (input && allowTextSelection) {\n                            input.focus();\n                        }\n                    }\n\n                    if (allowTextSelection) {\n                        if (!prevProps.open || value !== prevProps.value) {\n                            const [input] = this.inputs;\n\n                            if (input) {\n                                selectElement(input);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (\n                open &&\n                prevProps.mode !== mode &&\n                !this.state.allSelected &&\n                allowTextSelection\n            ) {\n                const input = this.inputs.find(el => {\n                    const format = getAttribute(el, 'data-group');\n                    const type = getFormatType(format);\n\n                    return type === mode;\n                });\n\n                selectElement(input);\n            }\n\n            if (!open && value) {\n                const parts = splitDate(value, format);\n\n                this.inputs.forEach((input, i) => (input.innerText = parts[i]));\n            }\n\n            if (open && prevProps.value && !value && !allowValidation) {\n                this.inputs.forEach(input => (input.innerText = ''));\n            }\n\n            if (!open) {\n                this.setState({ allSelected: false });\n            }\n        }, 16);\n    }\n\n    public componentDidMount() {\n        if (this.props.value) {\n            this.forceUpdate();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            placeholder,\n            value,\n            showDate,\n            showTime,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            open\n        } = this.props;\n        const ArrowButtonComp = this.props.arrowButtonComponent || ArrowButton;\n        const ClearComponent =\n            this.props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !open;\n        const showClearer = value && !disabled;\n        const timeOnly = showTime && !showDate;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                ref={this.props.innerRef}\n                disabled={disabled}\n                onClick={this.onToggle}\n            >\n                <Flex>\n                    {IconComponent && (\n                        <IconComponent\n                            showDate={showDate}\n                            showTime={showTime}\n                        />\n                    )}\n                    <Flex>\n                        {this.renderValue()}\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {showClearer && (\n                        <ClearComponent\n                            disabled={disabled}\n                            onClick={this.onClear}\n                        />\n                    )}\n                    {!timeOnly && (\n                        <ArrowButtonComp\n                            id={arrowButtonId}\n                            disabled={disabled}\n                            open={open}\n                        />\n                    )}\n                </Flex>\n            </Container>\n        );\n    }\n\n    private renderValue(): React.ReactNode {\n        const { open, disabled, mobile, value } = this.props;\n        const LabelComponent = this.props.labelComponent;\n        const contentEditable = !disabled && !mobile;\n\n        if (!open && !value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...this.props} />;\n        }\n\n        const formatGroups = this.formatGroups;\n\n        return (\n            <Flex>\n                {formatGroups.map((group, i) => {\n                    if (group.split('').some(g => formatSplitExpr.test(g))) {\n                        return null;\n                    } else {\n                        const separator = formatGroups[i + 1];\n                        const hasFormatType = Boolean(getFormatType(group));\n                        const placeholder = hasFormatType ? group : undefined;\n\n                        return (\n                            <Input\n                                data-react-timebomb-selectable\n                                contentEditable={contentEditable}\n                                disabled={disabled || !hasFormatType}\n                                data-placeholder={placeholder}\n                                data-separator={replaceSpaceWithNbsp(separator)}\n                                key={group}\n                                data-group={group}\n                                ref={this.onSearchRef}\n                                onKeyDown={this.onKeyDown}\n                                onKeyUp={this.onKeyUp}\n                                onFocus={this.onFocus}\n                                onBlur={this.onBlur}\n                                onClick={this.onClick}\n                                onDoubleClick={this.onDblClick}\n                                onChange={this.onChange}\n                            />\n                        );\n                    }\n                })}\n            </Flex>\n        );\n    }\n\n    private onSearchRef(el: HTMLSpanElement | null): void {\n        if (el) {\n            this.inputs.push(el);\n        } else {\n            this.inputs = [];\n        }\n    }\n\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const {\n            onChangeValueText,\n            format,\n            value,\n            allowValidation,\n            timeStep\n        } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n        const formatGroup = getAttribute(input, 'data-group');\n        const numericFormat = formatIsActualNumber(formatGroup);\n        const sel = getSelection();\n        const hasSelection = sel\n            ? Boolean(sel.focusOffset - sel.anchorOffset)\n            : false;\n        let numericValue = parseInt(innerText, 10);\n\n        switch (e.keyCode) {\n            case keys.ENTER:\n            case keys.ESC:\n            case keys.BACKSPACE:\n            case keys.DOT:\n            case keys.COMMA:\n                e.preventDefault();\n                return;\n            case keys.ARROW_RIGHT:\n                e.preventDefault();\n\n                if (nextSibling instanceof HTMLSpanElement) {\n                    nextSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_LEFT:\n                e.preventDefault();\n\n                if (previousSibling instanceof HTMLSpanElement) {\n                    previousSibling.focus();\n                } else {\n                    selectElement(input);\n                }\n                return;\n            case keys.ARROW_UP:\n            case keys.ARROW_DOWN:\n                e.preventDefault();\n\n                if (!numericFormat) {\n                    return;\n                }\n\n                const isArrowUp = e.keyCode === keys.ARROW_UP;\n\n                if (isNaN(numericValue)) {\n                    numericValue = 0;\n                }\n\n                if (isFinite(numericValue)) {\n                    const formatType = getFormatType(formatGroup);\n\n                    if (!allowValidation) {\n                        const add = formatType === 'minute' ? timeStep || 1 : 1;\n                        const nextValue =\n                            numericValue + (isArrowUp ? add : -add);\n                        const valid = validateFormatGroup(\n                            nextValue,\n                            formatGroup\n                        );\n\n                        if (valid) {\n                            input.innerText =\n                                typeof valid === 'string'\n                                    ? valid\n                                    : formatNumber(nextValue);\n                        }\n                    } else {\n                        if (value && formatType) {\n                            const direction = isArrowUp ? 'add' : 'subtract';\n\n                            const newDate = manipulateDate(\n                                value,\n                                formatType,\n                                direction,\n                                timeStep\n                            );\n                            const enabled = isEnabled(\n                                'day',\n                                newDate,\n                                this.props\n                            );\n\n                            if (enabled) {\n                                const dateParts = splitDate(newDate, format);\n\n                                this.inputs.map(\n                                    (inp, i) => (inp.innerText = dateParts[i])\n                                );\n                            }\n                        }\n                    }\n\n                    selectElement(input);\n                    onChangeValueText(joinDates(this.inputs, format));\n                }\n                return;\n        }\n\n        const char = stringFromCharCode(e.keyCode);\n        const groupValue = innerText && !hasSelection ? innerText + char : char;\n\n        if (META_KEYS.includes(e.keyCode) || e.metaKey || e.ctrlKey) {\n            return;\n        }\n\n        if (!numericFormat) {\n            e.preventDefault();\n            return;\n        }\n\n        const valid = validateFormatGroup(groupValue, formatGroup);\n\n        if (!valid) {\n            e.preventDefault();\n        } else if (typeof valid === 'string') {\n            e.preventDefault();\n\n            input.innerText = valid;\n        }\n\n        if (\n            this.state.allSelected &&\n            e.keyCode !== keys.BACKSPACE &&\n            e.keyCode !== keys.DELETE\n        ) {\n            const [firstInput] = this.inputs;\n            let validatedChar = validateFormatGroup(char, formatGroup);\n\n            if (validatedChar && validatedChar === true) {\n                validatedChar = char;\n            }\n\n            if (validatedChar) {\n                e.preventDefault();\n\n                this.inputs.forEach((el, i) => i !== 0 && (el.innerText = ''));\n\n                if (validatedChar.length === 2) {\n                    selectElement(firstInput);\n                } else {\n                    clearSelection();\n\n                    firstInput.innerText = validatedChar;\n                    firstInput.focus();\n\n                    selectElement(firstInput, [1, 1]);\n                }\n            }\n        }\n\n        // validate group\n        if (!hasSelection && innerText.length >= formatGroup.length) {\n            e.preventDefault();\n        }\n    }\n\n    private onKeyUp(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { onChangeValueText, format, onSubmit, onToggle } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling, previousSibling } = input;\n\n        if (e.keyCode === keys.ENTER) {\n            e.preventDefault();\n\n            if (this.focused) {\n                this.focused.blur();\n            }\n            onSubmit();\n            return;\n        }\n\n        if (e.keyCode === keys.ESC && onToggle) {\n            onToggle();\n            return;\n        }\n\n        if (this.state.allSelected) {\n            if (e.keyCode === keys.BACKSPACE || e.keyCode === keys.DELETE) {\n                // delete all\n                this.inputs.forEach(el => (el.innerText = ''));\n\n                selectElement(this.inputs[0]);\n            }\n\n            this.setState({ allSelected: false });\n        }\n\n        // remove text / focus prev\n        else if (e.keyCode === keys.BACKSPACE) {\n            if (innerText) {\n                input.innerText = '';\n            } else if (previousSibling instanceof HTMLSpanElement) {\n                selectElement(previousSibling);\n            }\n        }\n\n        // focus next\n        else if (\n            (innerText.length >= getAttribute(input, 'data-group').length &&\n                !FORBIDDEN_KEYS.includes(e.keyCode)) ||\n            e.keyCode === keys.DOT ||\n            e.keyCode === keys.COMMA\n        ) {\n            if (!nextSibling) {\n                selectElement(input);\n            } else if (nextSibling instanceof HTMLSpanElement) {\n                selectElement(nextSibling);\n            }\n\n            onChangeValueText(joinDates(this.inputs, format));\n        }\n    }\n\n    private onClick(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        selectElement(e.currentTarget);\n    }\n\n    private onDblClick(e: React.SyntheticEvent<HTMLSpanElement>) {\n        const input = e.currentTarget;\n\n        if (input.parentNode && this.inputs.some(el => Boolean(el.innerText))) {\n            selectElement(this.inputs[0]);\n            selectElement(input.parentNode as HTMLElement);\n            this.setState({ allSelected: true }, this.props.onAllSelect);\n        }\n    }\n\n    private onFocus = (() => {\n        let timeout = 0;\n\n        return (e: React.SyntheticEvent<HTMLSpanElement>) => {\n            clearTimeout(timeout);\n\n            const input = e.currentTarget;\n\n            selectElement(input);\n\n            timeout = setTimeout(() => {\n                if (!this.state.allSelected) {\n                    const formatGroup = getAttribute(input, 'data-group');\n\n                    this.props.onChangeFormatGroup(formatGroup);\n                }\n            }, 16);\n        };\n    })();\n\n    private onBlur(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        if (!this.state.allSelected) {\n            const input = e.target as HTMLSpanElement;\n            const value = input.innerText;\n            const dataGroup = getAttribute(input, 'data-group');\n            const formatType = getFormatType(dataGroup);\n\n            if (formatType) {\n                const filledValue = fillZero(value, formatType);\n\n                if (filledValue) {\n                    input.innerText = filledValue;\n                }\n            }\n        }\n\n        // check if timebomb is still focused\n        setTimeout(() => {\n            const { focused } = this;\n\n            if (\n                this.props.onToggle &&\n                this.props.open &&\n                focused &&\n                !getAttribute(focused, 'data-react-timebomb-selectable')\n            ) {\n                this.props.onToggle();\n            }\n        }, 0);\n    }\n\n    private onChange(e: React.KeyboardEvent<HTMLSpanElement>): void {\n        const { format, onChangeValueText } = this.props;\n        const input = e.currentTarget;\n        const { innerText, nextSibling } = input;\n\n        onChangeValueText(joinDates(this.inputs, format));\n\n        if (innerText.length >= getAttribute(input, 'data-group').length) {\n            if (nextSibling instanceof HTMLSpanElement) {\n                nextSibling.focus();\n            }\n        }\n    }\n\n    private onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    private onToggle(e: React.SyntheticEvent<HTMLSpanElement>): void {\n        const { open, disabled, onToggle } = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        if (onToggle) {\n            if (!this.inputs.some(inp => inp === e.target) || !open) {\n                onToggle();\n            }\n        }\n    }\n}\n\nexport const Value = React.forwardRef(\n    (props: ReactTimebombValueProps, ref: React.Ref<HTMLDivElement>) => (\n        <ValueComponent innerRef={ref} {...props} />\n    )\n);\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ArrowButton } from '../components/button';\nimport { ReactTimebombMultiValueProps } from '../typings';\nimport { dateEqual, dateFormat, keys } from '../utils';\nimport {\n    Container,\n    DefaultClearComponent,\n    Flex,\n    Icon,\n    Placeholder\n} from './value';\n\nconst DefaultIcon = () => <Icon className=\"react-timebomb-icon\" icon=\"📅\" />;\n\nconst StyledValue = styled(Value)`\n    > span:after {\n        content: ' – ';\n    }\n\n    > span:last-child:after {\n        content: '';\n    }\n`;\n\nconst HoverSpan = styled.span`\n    opacity: 0.5;\n`;\n\nfunction Value(props: ReactTimebombMultiValueProps) {\n    const { value, className } = props;\n    const LabelComponent = props.labelComponent;\n\n    const onClickDate = (e: React.SyntheticEvent<HTMLSpanElement>) => {\n        const { currentTarget } = e;\n\n        setTimeout(() => {\n            const date = new Date(currentTarget.getAttribute('data-date') || 0);\n            const index = parseInt(\n                currentTarget.getAttribute('data-index') || '0',\n                10\n            );\n\n            props.onValueSelect(date, index);\n        }, 0);\n    };\n\n    const content = (() => {\n        if (!value) {\n            return null;\n        }\n\n        if (LabelComponent) {\n            return <LabelComponent {...props} />;\n        }\n\n        if (value.length === 1) {\n            return <span>{dateFormat(value[0], props.format)}</span>;\n        }\n\n        return (\n            <>\n                {value.map((d, i) => {\n                    const str = dateFormat(d, props.format);\n\n                    if (dateEqual(d, props.hoverDate)) {\n                        return (\n                            <HoverSpan key={i} onClick={props.onToggle}>\n                                {str}\n                            </HoverSpan>\n                        );\n                    } else {\n                        return (\n                            <span\n                                key={i}\n                                data-index={i}\n                                data-date={d.toDateString()}\n                                onClick={onClickDate}\n                            >\n                                {str}\n                            </span>\n                        );\n                    }\n                })}\n            </>\n        );\n    })();\n\n    return <div className={className}>{content}</div>;\n}\n\nexport const ValueMulti = React.forwardRef(\n    (props: ReactTimebombMultiValueProps, ref: React.Ref<HTMLDivElement>) => {\n        const {\n            placeholder,\n            value,\n            open,\n            disabled,\n            arrowButtonId,\n            iconComponent,\n            onToggle\n        } = props;\n        const ArrowButtonComp = props.arrowButtonComponent || ArrowButton;\n        const ClearComponent = props.clearComponent || DefaultClearComponent;\n        const showPlaceholder = placeholder && !value;\n        const IconComponent =\n            iconComponent !== undefined ? iconComponent : DefaultIcon;\n\n        React.useEffect(() => {\n            document.body.addEventListener('keyup', onKeyUp);\n\n            return () => {\n                document.body.removeEventListener('keyup', onKeyUp);\n            };\n        }, []);\n\n        function onClear(e: React.MouseEvent<HTMLButtonElement>): void {\n            e.stopPropagation();\n\n            props.onClear();\n        }\n\n        function onKeyUp(e: KeyboardEvent) {\n            switch (e.keyCode) {\n                case keys.ESC:\n                    if (open && onToggle) {\n                        onToggle();\n                    }\n                    break;\n            }\n        }\n\n        return (\n            <Container\n                data-role=\"value\"\n                className=\"react-slct-value react-timebomb-value\"\n                disabled={disabled}\n                ref={ref}\n                onClick={value || disabled ? undefined : onToggle}\n            >\n                <Flex>\n                    {IconComponent && <IconComponent />}\n                    <Flex>\n                        <StyledValue\n                            onValueSelect={props.onValueSelect}\n                            {...props}\n                        />\n                        {showPlaceholder && (\n                            <Placeholder className=\"react-timebomb-placeholder\">\n                                {placeholder}\n                            </Placeholder>\n                        )}\n                    </Flex>\n                </Flex>\n                <Flex>\n                    {value && (\n                        <ClearComponent disabled={disabled} onClick={onClear} />\n                    )}\n                    <ArrowButtonComp\n                        id={arrowButtonId}\n                        disabled={disabled}\n                        open={open}\n                        onClick={disabled ? undefined : onToggle}\n                    />\n                </Flex>\n            </Container>\n        );\n    }\n);\n","import { ArrowButtonProps } from './components/button';\n\nexport type ReactTimebombDate = undefined | Date | Date[];\n\ntype ReactComponent<P = {}> =\n    | React.ComponentClass<P>\n    | React.StatelessComponent<P>;\n\nexport interface ReactTimebombProps {\n    className?: string;\n    value?: ReactTimebombDate;\n    format?: string;\n    placeholder?: string;\n    menuWidth?: number;\n    minDate?: Date;\n    maxDate?: Date;\n    selectRange?: 'week' | number | boolean;\n    showCalendarWeek?: boolean;\n    showConfirm?: boolean;\n    disabled?: boolean;\n    error?: any;\n    mobile?: boolean;\n    arrowButtonId?: string;\n    arrowButtonComponent?: ReactComponent<ArrowButtonProps>;\n    clearComponent?: ReactComponent<ClearComponentProps>;\n    iconComponent?: ReactComponent<IconProps> | null;\n    labelComponent?: ReactComponent<\n        ReactTimebombValueProps | ReactTimebombMultiValueProps\n    >;\n    confirmComponent?: ReactComponent<ReactTimebombMenuProps>;\n    timeStep?: number;\n    onChange(...dates: (undefined | Date)[]): void;\n    onError?(\n        error: ReactTimebombError,\n        ...value: ReactTimebombState['valueText'][]\n    ): void;\n    onOpen?(): void;\n    onClose?(): void;\n}\n\nexport interface ReactTimebombState {\n    minDate?: Date;\n    maxDate?: Date;\n    valueText?: string | string[];\n    allowValidation?: boolean;\n    date: ReactTimebombDate;\n    mode?: FormatType;\n    showDate?: boolean;\n    showTime?: boolean;\n    preventClose?: boolean;\n    selectedRange: number;\n    menuHeight?: 'auto';\n    hoverDate?: Date;\n}\n\nexport type ReactTimebombError = 'outOfRange' | 'invalidDate';\nexport type FormatType =\n    | 'day'\n    | 'month'\n    | 'year'\n    | 'hour'\n    | 'minute'\n    | 'second';\n\nexport interface ReactTimebombValueProps {\n    className?: string;\n    innerRef?: React.Ref<HTMLDivElement>;\n    open?: boolean;\n    value?: Date;\n    format: string;\n    placeholder: ReactTimebombProps['placeholder'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    showDate: ReactTimebombState['showDate'];\n    showTime: ReactTimebombState['showTime'];\n    mode: ReactTimebombState['mode'];\n    allowValidation: ReactTimebombState['allowValidation'];\n    arrowButtonComponent: ReactTimebombProps['arrowButtonComponent'];\n    clearComponent: ReactTimebombProps['clearComponent'];\n    arrowButtonId: ReactTimebombProps['arrowButtonId'];\n    iconComponent: ReactTimebombProps['iconComponent'];\n    labelComponent: ReactTimebombProps['labelComponent'];\n    disabled: ReactTimebombProps['disabled'];\n    mobile: ReactTimebombProps['mobile'];\n    timeStep: ReactTimebombProps['timeStep'];\n    hoverDate: ReactTimebombState['hoverDate'];\n    onToggle?(): void;\n    onChangeValueText(valueText?: string, commit?: boolean): void;\n    onChangeFormatGroup(formatGroup: string): void;\n    onAllSelect(): void;\n    onSubmit(): void;\n    onClear(): void;\n}\n\nexport type ReactTimebombMultiValueProps = Omit<\n    ReactTimebombValueProps,\n    'value'\n> & {\n    value: undefined | Date[];\n    onValueSelect(date: Date, index: number): void;\n};\n\nexport interface ReactTimebombMenuProps {\n    showTime: ReactTimebombState['showTime'];\n    showDate: ReactTimebombState['showDate'];\n    showConfirm: ReactTimebombProps['showConfirm'];\n    showCalendarWeek: ReactTimebombProps['showCalendarWeek'];\n    selectRange: ReactTimebombProps['selectRange'];\n    value: ReactTimebombProps['value'];\n    valueText: ReactTimebombState['valueText'];\n    minDate: ReactTimebombProps['minDate'];\n    maxDate: ReactTimebombProps['maxDate'];\n    date: ReactTimebombState['date'];\n    mode: ReactTimebombState['mode'];\n    timeStep: ReactTimebombProps['timeStep'];\n    selectedRange: ReactTimebombState['selectedRange'];\n    mobile: ReactTimebombProps['mobile'];\n    confirmComponent: ReactTimebombProps['confirmComponent'];\n    format: string;\n    onSelectDay(date: Date): void;\n    onSelectYear(date: Date): void;\n    /** month was selected, value will change to `date` */\n    onSelectMonth(date: Date): void;\n    /** month was selected but value will not change to `date` */\n    onChangeMonth(date: Date): void;\n    onSelectTime(date: Date, mode: FormatType): void;\n    onSubmitTime(date: Date | undefined, mode: FormatType): void;\n    onHoverDays(dates: Date[]): void;\n    onSubmit(): void;\n}\n\nexport interface IconProps {\n    showDate?: boolean;\n    showTime?: boolean;\n}\n\nexport interface ClearComponentProps {\n    disabled?: boolean;\n    onClick(e: React.MouseEvent<HTMLButtonElement>): void;\n}\n\nexport { ClearComponentProps as ReactTimebombClearComponentProps };\nexport { ArrowButtonProps as ReactTimebombArrowButtonProps };\n"]}